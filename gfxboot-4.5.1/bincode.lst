     1                                  			bits 32
     2                                  
     3                                  			extern jpeg_get_size
     4                                  			extern jpeg_decode
     5                                  
     6                                  			global _start
     7                                  
     8                                  %define			debug 1
     9                                  
    10                                  %include		"vocabulary.inc"
    11                              <1> cb_functions		equ 11
    12                              <1> prim_functions		equ 173
    13                              <1> 
    14                              <1> cb_KeyEvent		equ 0
    15                              <1> cb_MenuInit		equ 1
    16                              <1> cb_InfoBoxInit	equ 2
    17                              <1> cb_InfoBoxDone	equ 3
    18                              <1> cb_ProgressInit	equ 4
    19                              <1> cb_ProgressDone	equ 5
    20                              <1> cb_ProgressUpdate	equ 6
    21                              <1> cb_PasswordInit	equ 7
    22                              <1> cb_PasswordDone	equ 8
    23                              <1> cb_Timeout		equ 9
    24                              <1> cb_Timer		equ 10
    25                              <1> 
    26                              <1> %macro			prim_jump_table 0
    27                              <1> jt_p_none		dw 0			; 00h
    28                              <1> jt_p_code		dw 0			; 01h
    29                              <1> jt_p_ret		dw 0			; 02h
    30                              <1> jt_p_astart		dw prim_astart		; 03h
    31                              <1> jt_p_aend		dw prim_aend		; 04h
    32                              <1> jt_p_def		dw prim_def		; 05h
    33                              <1> jt_p_if			dw prim_if		; 06h
    34                              <1> jt_p_ifelse		dw prim_ifelse		; 07h
    35                              <1> jt_p_loop		dw prim_loop		; 08h
    36                              <1> jt_p_repeat		dw prim_repeat		; 09h
    37                              <1> jt_p_for		dw prim_for		; 0ah
    38                              <1> jt_p_forall		dw prim_forall		; 0bh
    39                              <1> jt_p_exit		dw prim_exit		; 0ch
    40                              <1> jt_p_return		dw prim_return		; 0dh
    41                              <1> jt_p_array		dw prim_array		; 0eh
    42                              <1> jt_p_get		dw prim_get		; 0fh
    43                              <1> jt_p_put		dw prim_put		; 10h
    44                              <1> jt_p_length		dw prim_length		; 11h
    45                              <1> jt_p_dup		dw prim_dup		; 12h
    46                              <1> jt_p_pop		dw prim_pop		; 13h
    47                              <1> jt_p_exch		dw prim_exch		; 14h
    48                              <1> jt_p_rot		dw prim_rot		; 15h
    49                              <1> jt_p_roll		dw prim_roll		; 16h
    50                              <1> jt_p_over		dw prim_over		; 17h
    51                              <1> jt_p_index		dw prim_index		; 18h
    52                              <1> jt_p_exec		dw prim_exec		; 19h
    53                              <1> jt_p_add		dw prim_add		; 1ah
    54                              <1> jt_p_sub		dw prim_sub		; 1bh
    55                              <1> jt_p_mul		dw prim_mul		; 1ch
    56                              <1> jt_p_div		dw prim_div		; 1dh
    57                              <1> jt_p_mod		dw prim_mod		; 1eh
    58                              <1> jt_p_neg		dw prim_neg		; 1fh
    59                              <1> jt_p_abs		dw prim_abs		; 20h
    60                              <1> jt_p_min		dw prim_min		; 21h
    61                              <1> jt_p_max		dw prim_max		; 22h
    62                              <1> jt_p_and		dw prim_and		; 23h
    63                              <1> jt_p_or			dw prim_or		; 24h
    64                              <1> jt_p_xor		dw prim_xor		; 25h
    65                              <1> jt_p_not		dw prim_not		; 26h
    66                              <1> jt_p_shl		dw prim_shl		; 27h
    67                              <1> jt_p_shr		dw prim_shr		; 28h
    68                              <1> jt_p_eq			dw prim_eq		; 29h
    69                              <1> jt_p_ne			dw prim_ne		; 2ah
    70                              <1> jt_p_gt			dw prim_gt		; 2bh
    71                              <1> jt_p_ge			dw prim_ge		; 2ch
    72                              <1> jt_p_lt			dw prim_lt		; 2dh
    73                              <1> jt_p_le			dw prim_le		; 2eh
    74                              <1> jt_p_trace		dw prim_trace		; 2fh
    75                              <1> jt_p_dtrace		dw prim_dtrace		; 30h
    76                              <1> jt_p_malloc		dw prim_malloc		; 31h
    77                              <1> jt_p_free		dw prim_free		; 32h
    78                              <1> jt_p_realloc		dw prim_realloc		; 33h
    79                              <1> jt_p_memsize		dw prim_memsize		; 34h
    80                              <1> jt_p_dumpmem		dw prim_dumpmem		; 35h
    81                              <1> jt_p_gettype		dw prim_gettype		; 36h
    82                              <1> jt_p_settype		dw prim_settype		; 37h
    83                              <1> jt_p_screensize		dw prim_screensize	; 38h
    84                              <1> jt_p_imagecolors	dw prim_imagecolors	; 39h
    85                              <1> jt_p_vscreensize	dw prim_vscreensize	; 3ah
    86                              <1> jt_p_monitorsize	dw prim_monitorsize	; 3bh
    87                              <1> jt_p_displaysizes	dw prim_displaysizes	; 3ch
    88                              <1> jt_p_moveto		dw prim_moveto		; 3dh
    89                              <1> jt_p_currentpoint	dw prim_currentpoint	; 3eh
    90                              <1> jt_p_lineto		dw prim_lineto		; 3fh
    91                              <1> jt_p_setcolor		dw prim_setcolor	; 40h
    92                              <1> jt_p_currentcolor	dw prim_currentcolor	; 41h
    93                              <1> jt_p_putpixel		dw prim_putpixel	; 42h
    94                              <1> jt_p_getpixel		dw prim_getpixel	; 43h
    95                              <1> jt_p_setfont		dw prim_setfont		; 44h
    96                              <1> jt_p_currentfont	dw prim_currentfont	; 45h
    97                              <1> jt_p_fontheight		dw prim_fontheight	; 46h
    98                              <1> jt_p_strsize		dw prim_strsize		; 47h
    99                              <1> jt_p_show		dw prim_show		; 48h
   100                              <1> jt_p_settextmodecolor	dw prim_settextmodecolor	; 49h
   101                              <1> jt_p_image		dw prim_image		; 4ah
   102                              <1> jt_p_loadpalette	dw prim_loadpalette	; 4bh
   103                              <1> jt_p_setpalette		dw prim_setpalette	; 4ch
   104                              <1> jt_p_getpalette		dw prim_getpalette	; 4dh
   105                              <1> jt_p_settransparentcolor	dw prim_settransparentcolor	; 4eh
   106                              <1> jt_p_savescreen		dw prim_savescreen	; 4fh
   107                              <1> jt_p_restorescreen	dw prim_restorescreen	; 50h
   108                              <1> jt_p_fillrect		dw prim_fillrect	; 51h
   109                              <1> jt_p_snprintf		dw prim_snprintf	; 52h
   110                              <1> jt_p_editinit		dw prim_editinit	; 53h
   111                              <1> jt_p_editdone		dw prim_editdone	; 54h
   112                              <1> jt_p_editinput		dw prim_editinput	; 55h
   113                              <1> jt_p_editshowcursor	dw prim_editshowcursor	; 56h
   114                              <1> jt_p_edithidecursor	dw prim_edithidecursor	; 57h
   115                              <1> jt_p_editredraw		dw prim_editredraw	; 58h
   116                              <1> jt_p_editgetleft	dw prim_editgetleft	; 59h
   117                              <1> jt_p_rmoveto		dw prim_rmoveto		; 5ah
   118                              <1> jt_p_strstr		dw prim_strstr		; 5bh
   119                              <1> jt_p_soundgetvolume	dw prim_soundgetvolume	; 5ch
   120                              <1> jt_p_soundsetvolume	dw prim_soundsetvolume	; 5dh
   121                              <1> jt_p_soundgetsamplerate	dw prim_soundgetsamplerate	; 5eh
   122                              <1> jt_p_soundsetsamplerate	dw prim_soundsetsamplerate	; 5fh
   123                              <1> jt_p_soundplay		dw prim_soundplay	; 60h
   124                              <1> jt_p_sounddone		dw prim_sounddone	; 61h
   125                              <1> jt_p_modload		dw prim_modload	; 62h
   126                              <1> jt_p_modplay		dw prim_modplay	; 63h
   127                              <1> jt_p_modplaysample	dw prim_modplaysample	; 64h
   128                              <1> jt_p_wavplay		dw prim_wavplay	; 65h
   129                              <1> jt_p_wavplaylater	dw prim_wavplaylater	; 66h
   130                              <1> jt_p_settextwrap	dw prim_settextwrap	; 67h
   131                              <1> jt_p_currenttextwrap	dw prim_currenttextwrap	; 68h
   132                              <1> jt_p_seteotchar		dw prim_seteotchar	; 69h
   133                              <1> jt_p_currenteotchar	dw prim_currenteotchar	; 6ah
   134                              <1> jt_p_settextcolors	dw prim_settextcolors	; 6bh
   135                              <1> jt_p_currenttextcolors	dw prim_currenttextcolors	; 6ch
   136                              <1> jt_p_setmaxrows		dw prim_setmaxrows	; 6dh
   137                              <1> jt_p_currentmaxrows	dw prim_currentmaxrows	; 6eh
   138                              <1> jt_p_formattext		dw prim_formattext	; 6fh
   139                              <1> jt_p_gettextrows	dw prim_gettextrows	; 70h
   140                              <1> jt_p_setstartrow	dw prim_setstartrow	; 71h
   141                              <1> jt_p_getlinks		dw prim_getlinks	; 72h
   142                              <1> jt_p_setlink		dw prim_setlink		; 73h
   143                              <1> jt_p_currentlink	dw prim_currentlink	; 74h
   144                              <1> jt_p_getlink		dw prim_getlink		; 75h
   145                              <1> jt_p_lineheight		dw prim_lineheight	; 76h
   146                              <1> jt_p_currenttitle	dw prim_currenttitle	; 77h
   147                              <1> jt_p_usleep		dw prim_usleep		; 78h
   148                              <1> jt_p_notimeout		dw prim_notimeout	; 79h
   149                              <1> jt_p_time		dw prim_time		; 7ah
   150                              <1> jt_p_date		dw prim_date		; 7bh
   151                              <1> jt_p_idle		dw prim_idle		; 7ch
   152                              <1> jt_p_imagesize		dw prim_imagesize	; 7dh
   153                              <1> jt_p_eject		dw prim_eject		; 7eh
   154                              <1> jt_p_poweroff		dw prim_poweroff	; 7fh
   155                              <1> jt_p_reboot		dw prim_reboot		; 80h
   156                              <1> jt_p_64bit		dw prim_64bit		; 81h
   157                              <1> jt_p_getbyte		dw prim_getbyte		; 82h
   158                              <1> jt_p_putbyte		dw prim_putbyte		; 83h
   159                              <1> jt_p_getword		dw prim_getword		; 84h
   160                              <1> jt_p_putword		dw prim_putword		; 85h
   161                              <1> jt_p_getdword		dw prim_getdword	; 86h
   162                              <1> jt_p_putdword		dw prim_putdword	; 87h
   163                              <1> jt_p_inbyte		dw prim_inbyte		; 88h
   164                              <1> jt_p_outbyte		dw prim_outbyte		; 89h
   165                              <1> jt_p_findfile		dw prim_findfile	; 8ah
   166                              <1> jt_p_filesize		dw prim_filesize	; 8bh
   167                              <1> jt_p_getcwd		dw prim_getcwd		; 8ch
   168                              <1> jt_p_chdir		dw prim_chdir		; 8dh
   169                              <1> jt_p_mount		dw prim_mount		; 8eh
   170                              <1> jt_p_setmode		dw prim_setmode		; 8fh
   171                              <1> jt_p_currentmode	dw prim_currentmode	; 90h
   172                              <1> jt_p_videomodeinfo	dw prim_videomodeinfo	; 91h
   173                              <1> jt_p_videomodes		dw prim_videomodes	; 92h
   174                              <1> jt_p_colorbits		dw prim_colorbits	; 93h
   175                              <1> jt_p_setimage		dw prim_setimage	; 94h
   176                              <1> jt_p_currentimage	dw prim_currentimage	; 95h
   177                              <1> jt_p_settransparency	dw prim_settransparency	; 96h
   178                              <1> jt_p_currenttransparency	dw prim_currenttransparency	; 97h
   179                              <1> jt_p_unpackimage	dw prim_unpackimage	; 98h
   180                              <1> jt_p_keepmode		dw prim_keepmode	; 99h
   181                              <1> jt_p_blend		dw prim_blend		; 9ah
   182                              <1> jt_p_memcpy		dw prim_memcpy		; 9bh
   183                              <1> jt_p_sysconfig		dw prim_sysconfig	; 9ch
   184                              <1> jt_p__readsector	dw prim__readsector	; 9dh
   185                              <1> jt_p_sysinfo		dw prim_sysinfo		; 9eh
   186                              <1> jt_p_getkey		dw prim_getkey		; 9fh
   187                              <1> jt_p_serialinit		dw prim_serialinit	; a0h
   188                              <1> jt_p_serialputc		dw prim_serialputc	; a1h
   189                              <1> jt_p_serialsetconfig	dw prim_serialsetconfig	; a2h
   190                              <1> jt_p_serialgetbaud	dw prim_serialgetbaud	; a3h
   191                              <1> jt_p_realpath		dw prim_realpath	; a4h
   192                              <1> jt_p_systempath		dw prim_systempath	; a5h
   193                              <1> jt_p_xxx		dw prim_xxx		; a6h
   194                              <1> jt_p_test1		dw prim_test1		; a7h
   195                              <1> jt_p_test2		dw prim_test2		; a8h
   196                              <1> jt_p_test3		dw prim_test3		; a9h
   197                              <1> jt_p_test4		dw prim_test4		; aah
   198                              <1> jt_p_test5		dw prim_test5		; abh
   199                              <1> jt_p_test6		dw prim_test6		; ach
   200                              <1> %endmacro
   201                                  %include		"modplay_defines.inc"
   202                              <1> ; MOD player  (c) 2002 mls
   203                              <1> ;
   204                              <1> ; generates samples for 11000 HZ
   205                              <1> ; bpm always 125
   206                              <1> 
   207                              <1> STATE_OFF	equ 0
   208                              <1> STATE_PLAY	equ 1
   209                              <1> STATE_SAMPLE	equ 2
   210                              <1> 
   211                              <1> ; struct volume
   212                              <1> vo_volume	equ 0
   213                              <1> vo_volumegoal	equ vo_volume + 2
   214                              <1> vo_volumerate	equ vo_volumegoal + 2
   215                              <1> vo_sizeof	equ vo_volumerate + 2
   216                              <1> 
   217                              <1> ; struct channel
   218                              <1> ch_samp		equ 0
   219                              <1> ch_startseg	equ ch_samp + 2
   220                              <1> ch_pitch	equ ch_startseg + 2
   221                              <1> ch_finetune	equ ch_pitch + 2
   222                              <1> ch_volume	equ ch_finetune + 2
   223                              <1> 
   224                              <1> ch_start	equ ch_volume + 2		; pointer, rel to ch_startseg
   225                              <1> ch_pointer	equ ch_start + 4
   226                              <1> ch_pointer8	equ ch_pointer + 2
   227                              <1> ch_end		equ ch_pointer8 + 2
   228                              <1> ch_send		equ ch_end + 2
   229                              <1> ch_roff		equ ch_send + 2
   230                              <1> ch_rend		equ ch_roff + 2
   231                              <1> ch_step		equ ch_rend + 2
   232                              <1> ch_step8	equ ch_step + 2
   233                              <1> 
   234                              <1> ch_slide	equ ch_step8 + 2
   235                              <1> ch_vibrate	equ ch_slide + 2
   236                              <1> ch_viboffset	equ ch_vibrate + 2
   237                              <1> ch_vibdepth	equ ch_viboffset + 2
   238                              <1> ch_pitchgoal	equ ch_vibdepth + 2
   239                              <1> ch_pitchrate	equ ch_pitchgoal + 2
   240                              <1> ch_volumerate	equ ch_pitchrate + 2
   241                              <1> ch_arpindex	equ ch_volumerate + 2
   242                              <1> ch_arp		equ ch_arpindex + 2
   243                              <1> ch_current	equ ch_arp + 3 * 2
   244                              <1> ch_retrig	equ ch_current + 2
   245                              <1> ch_latesamp	equ ch_retrig + 2
   246                              <1> ch_effect	equ ch_latesamp + 2
   247                              <1> ch_player	equ ch_effect + 2		; pointer to player data, rel to ds
   248                              <1> ch_sizeof       equ ch_player + 4
   249                              <1> 
   250                              <1> ; struct player
   251                              <1> pl_volume	equ 0
   252                              <1> pl_state	equ pl_volume + vo_sizeof
   253                              <1> pl_songlen	equ pl_state + 2
   254                              <1> pl_speed	equ pl_songlen + 2
   255                              <1> pl_effpos	equ pl_speed + 2
   256                              <1> pl_nextsongnum	equ pl_effpos + 2
   257                              <1> pl_nextnotenum	equ pl_nextsongnum + 2
   258                              <1> pl_songnum	equ pl_nextnotenum + 2
   259                              <1> pl_notenum	equ pl_songnum + 2
   260                              <1> pl_loop_notenum	equ pl_notenum + 2
   261                              <1> pl_loop_counter	equ pl_loop_notenum + 2
   262                              <1> pl_seg		equ pl_loop_counter + 2
   263                              <1> pl_song		equ pl_seg + 2			; pointer, rel to pl_seg
   264                              <1> pl_patterns     equ pl_song + 4			; pointer, rel to pl_seg
   265                              <1> pl_sampinfo     equ pl_patterns + 4		; pointer, rel to pl_seg
   266                              <1> pl_sampd        equ pl_sampinfo + 4		; pointer array, rel to pl_sampdseg
   267                              <1> pl_sampdseg     equ pl_sampd + 4 * 32
   268                              <1> pl_channs       equ pl_sampdseg + 2 * 32
   269                              <1> pl_loaded	equ pl_channs + 4 * ch_sizeof
   270                              <1> pl_sizeof	equ pl_loaded + 2
   271                              <1> 
   272                              <1> EFF_ARP		equ 1
   273                              <1> EFF_SLIDE	equ 2
   274                              <1> EFF_PORTA	equ 3
   275                              <1> EFF_VIBRA	equ 4
   276                              <1> EFF_RETRIG	equ 5
   277                              <1> EFF_CUT		equ 6
   278                              <1> EFF_LATESTART	equ 7
   279                              <1> EFF_SLIDEVOL	equ 8
   280                              <1> EFF_PORTASLIDE	equ 8 + 3
   281                              <1> EFF_VIBRASLIDE	equ 8 + 4
   282                              <1> 
   283                              <1> 		; _must_ be 320
   284                              <1> num_samples	equ 320
   285                              <1> 
   286                              <1> ; struct area
   287                              <1> ar_hassamp	equ 0
   288                              <1> ar_samps	equ ar_hassamp + 1
   289                              <1> ar_volume	equ ar_samps + num_samples + 1
   290                              <1> ar_players	equ ar_volume + vo_sizeof
   291                              <1> ar_ssamps	equ ar_players + pl_sizeof * 4
   292                              <1> ar_sizeof	equ ar_ssamps + num_samples * 2
   293                              <1> 
   294                                  %include		"jpeg.inc"
   295                              <1> 		jpg_data_size	equ 11024
   296                                  
   297                                  
   298                                  ; some type definitions from mkbootmsg.c
   299                                  ; struct file_header_t
   300                                  fh_magic_id		equ 0
   301                                  fh_version		equ 4
   302                                  fh_res_1		equ 5
   303                                  fh_res_2		equ 6
   304                                  fh_res_3		equ 7
   305                                  fh_bincode		equ 8
   306                                  fh_bincode_size		equ 12
   307                                  fh_bincode_crc		equ 16
   308                                  fh_dict			equ 20
   309                                  fh_code			equ 24
   310                                  fh_code_size		equ 28
   311                                  sizeof_file_header_t	equ 32
   312                                  
   313                                  
   314                                  ; font file header definition
   315                                  foh.magic		equ 0
   316                                  foh.entries		equ 4
   317                                  foh.height		equ 8
   318                                  foh.baseline		equ 9
   319                                  foh.line_height		equ 10
   320                                  foh.size		equ 11
   321                                  
   322                                  
   323                                  ; char bitmap definitions
   324                                  ; must match values in mkblfont.c
   325                                  cbm_gray_bits		equ 4
   326                                  cbm_gray_bit_count	equ 3
   327                                  
   328                                  cbm_max_gray		equ (1 << cbm_gray_bits) - 3
   329                                  cbm_rep_black		equ cbm_max_gray + 1
   330                                  cbm_rep_white		equ cbm_max_gray + 2
   331                                  
   332                                  
   333                                  ; struct playlist
   334                                  pl_file			equ 0		; actually file index + 1
   335                                  pl_loop			equ 1
   336                                  pl_res1			equ 2
   337                                  pl_res2			equ 3
   338                                  pl_start		equ 4
   339                                  pl_current		equ 8
   340                                  pl_end			equ 12
   341                                  sizeof_playlist		equ 16
   342                                  playlist_entries	equ 4
   343                                  
   344                                  
   345                                  ; struct link
   346                                  li.label		equ 0
   347                                  li.text			equ 4
   348                                  li.x			equ 8
   349                                  li.row			equ 10
   350                                  li.size			equ 12		; search for 'li.size'!
   351                                  link_entries		equ 64
   352                                  
   353                                  
   354                                  ; sysconfig data (64 bytes [sc.size])
   355                                  sc.bootloader		equ 0
   356                                  sc.sector_shift		equ 1
   357                                  sc.media_type		equ 2
   358                                  sc.failsafe		equ 3
   359                                  sc.sysconfig_size	equ 4
   360                                  sc.boot_drive		equ 5
   361                                  sc.callback		equ 6
   362                                  sc.bootloader_seg	equ 8
   363                                  sc.serial_port		equ 10
   364                                  sc.user_info_0		equ 12
   365                                  sc.user_info_1		equ 16
   366                                  sc.bios_mem_size	equ 20
   367                                  sc.xmem_0		equ 24
   368                                  sc.xmem_1		equ 26
   369                                  sc.xmem_2		equ 28
   370                                  sc.xmem_3		equ 30
   371                                  sc.file			equ 32
   372                                  sc.archive_start	equ 36
   373                                  sc.archive_end		equ 40
   374                                  sc.mem0_start		equ 44
   375                                  sc.mem0_end		equ 48
   376                                  sc.xmem_start		equ 52
   377                                  sc.xmem_end		equ 56
   378                                  sc.features		equ 60
   379                                  sc.reserved_1		equ 62
   380                                  sc.cwd			equ 64
   381                                  sc.size			equ 68
   382                                  sc.size_64		equ 64		; supports xmem_* & feature flags
   383                                  sc.size_68		equ 68		; supports cwd
   384                                  
   385                                  
   386                                  ; enum_type_t
   387                                  t_none			equ 0
   388                                  t_int			equ 1
   389                                  t_unsigned		equ 2
   390                                  t_bool			equ 3
   391                                  t_string		equ 4
   392                                  t_code			equ 5
   393                                  t_ret			equ 6
   394                                  t_prim			equ 7
   395                                  t_sec			equ 8
   396                                  t_dict_idx		equ 9
   397                                  t_array			equ 10
   398                                  t_end			equ 11
   399                                  t_ptr			equ 12
   400                                  
   401                                  t_if			equ t_code + 10h
   402                                  t_loop			equ t_code + 20h
   403                                  t_repeat		equ t_code + 30h
   404                                  t_for			equ t_code + 40h
   405                                  t_forall		equ t_code + 50h
   406                                  t_exit			equ t_code + 60h
   407                                  
   408                                  
   409                                  param_stack_size	equ 1000
   410                                  ret_stack_size		equ 1000
   411                                  
   412                                  
   413                                  ; various error codes
   414                                  pserr_ok			equ 0
   415                                  pserr_nocode			equ 1
   416                                  pserr_invalid_opcode		equ 2
   417                                  pserr_pstack_underflow		equ 3
   418                                  pserr_pstack_overflow		equ 4
   419                                  pserr_rstack_underflow		equ 5
   420                                  pserr_rstack_overflow		equ 6
   421                                  pserr_invalid_dict		equ 7
   422                                  pserr_wrong_arg_types		equ 8
   423                                  pserr_div_by_zero		equ 9
   424                                  pserr_invalid_rstack_entry	equ 0ah
   425                                  pserr_invalid_range		equ 0bh
   426                                  pserr_invalid_exit		equ 0ch
   427                                  pserr_invalid_image_size	equ 0dh
   428                                  pserr_no_memory			equ 0eh
   429                                  pserr_invalid_data		equ 0fh
   430                                  pserr_nop			equ 10h
   431                                  pserr_invalid_function		equ 11h
   432                                  pserr_invalid_dict_entry	equ 200h
   433                                  pserr_invalid_prim		equ 201h
   434                                  
   435                                  keyBS			equ 08h
   436                                  keyLeft			equ 4bh		; scan code
   437                                  keyRight		equ 4dh		; scan code
   438                                  keyHome			equ 47h		; scan code
   439                                  keyEnd			equ 4fh		; scan code
   440                                  keyDel			equ 53h		; scan code
   441                                  
   442                                  max_text_rows		equ 128
   443                                  
   444                                  mhead.memsize		equ 0
   445                                  mhead.ip		equ 4
   446                                  mhead.used		equ 8		; bit 7
   447                                  mhead.rem		equ 8		; bit 0..6
   448                                  mhead.size		equ 9
   449                                  
   450                                  			section .text
   451                                  
   452                                  _start:
   453                                  
   454                                  ; jmp table to interface functions
   455 00000000 [3C0E]                  jt_init			dw gfx_init
   456 00000002 [F411]                  jt_done			dw gfx_done
   457 00000004 [1612]                  jt_input		dw gfx_input
   458 00000006 [FA12]                  jt_menu_init		dw gfx_menu_init
   459 00000008 [5114]                  jt_infobox_init		dw gfx_infobox_init
   460 0000000A [F514]                  jt_infobox_done		dw gfx_infobox_done
   461 0000000C [4315]                  jt_progress_init	dw gfx_progress_init
   462 0000000E [AA15]                  jt_progress_done	dw gfx_progress_done
   463 00000010 [F815]                  jt_progress_update	dw gfx_progress_update
   464 00000012 [6B16]                  jt_progress_limit	dw gfx_progress_limit
   465 00000014 [7E16]                  jt_password_init	dw gfx_password_init
   466 00000016 [EB16]                  jt_password_done	dw gfx_password_done
   467                                  
   468                                  			align 4, db 0
   469 00000018 00000000                file.start		dd 0		; the file we are in
   470                                  
   471 0000001C 00000000                archive.start		dd 0		; archive start address (0 -> none)
   472 00000020 00000000                archive.end		dd 0		; archive end
   473                                  
   474 00000024 00000000                mem0.start		dd 0		; free low memory area start
   475 00000028 00000000                mem0.end		dd 0		; dto, end
   476                                  
   477                                  malloc.areas		equ 5
   478 0000002C 00000000                malloc.start		dd 0
   479 00000030 00000000                malloc.end		dd 0
   480                                  			; start, end pairs
   481 00000034 00000000<rept>          malloc.area		times malloc.areas * 2 dd 0
   482                                  
   483 0000005C 00000000                vbe_buffer		dd 0		; (lin) buffer for vbe calls
   484 00000060 00000000                vbe_mode_list		dd 0		; (lin) list with (up to 100h) vbe modes
   485 00000064 00000000                vbe_info_buffer		dd 0		; (lin) buffer for vbe gfx card info
   486 00000068 00000000                infobox_buffer		dd 0		; (lin) temp buffer for InfoBox messages
   487                                  
   488 0000006C 00000000                local_stack		dd 0		; ofs local stack (8k)
   489                                  local_stack.ofs		equ local_stack
   490 00000070 0000                    local_stack.seg		dw 0		; dto, seg
   491 00000072 00000000                old_stack		dd 0		; store old esp value
   492                                  old_stack.ofs		equ old_stack
   493 00000076 0000                    old_stack.seg		dw 0		; dto, ss
   494 00000078 00000000                stack.size		dd 0		; in bytes
   495 0000007C 0000                    tmp_stack_val		dw 0		; needed for stack switching
   496                                  
   497 0000007E 00000000                pscode_start		dd 0		; (lin)
   498 00000082 00000000                pscode_size		dd 0
   499 00000086 00000000                pscode_instr		dd 0		; (lin) current instruction (rel. to pscode_start)
   500 0000008A 00000000                pscode_next_instr	dd 0		; (lin) next instruction
   501                                  ; for debugging only
   502 0000008E 00000000                pscode_next_break	dd 0		; (lin) break at this instruction
   503 00000092 00000000                pscode_eval		dd 0		; opcode from exec instruction
   504 00000096 00000000                pscode_error_arg_0	dd 0
   505 0000009A 00000000                pscode_error_arg_1	dd 0
   506 0000009E 00000000                pscode_arg		dd 0		; current arg
   507 000000A2 0000                    pscode_error		dw 0		; error code (if any)
   508 000000A4 00                      pscode_type		db 0		; current instr type
   509                                  
   510 000000A5 00<rept>                			align 4, db 0
   511 000000A8 00000000                dict			dd 0		; lin
   512 000000AC 00000000                dict.size		dd 0		; dict entries
   513                                  
   514 000000B0 00000000                boot.base		dd 0		; bootloader segment
   515 000000B4 00000000                boot.sysconfig		dd 0		; bootloader parameter block
   516 000000B8 00000000                boot.callback		dd 0 		; seg:ofs
   517                                  
   518 000000BC 00000000                pstack			dd 0		; data stack
   519 000000C0 00000000                pstack.size		dd 0		; entries
   520 000000C4 00000000                pstack.ptr		dd 0		; index of current tos
   521 000000C8 00000000                rstack			dd 0		; code stack
   522 000000CC 00000000                rstack.size		dd 0		; entries
   523 000000D0 00000000                rstack.ptr		dd 0		; index of current tos
   524                                  
   525 000000D4 00000000                image			dd 0		; (lin) current image
   526 000000D8 0000                    image_width		dw 0
   527 000000DA 0000                    image_height		dw 0
   528 000000DC 00                      image_type		db 0		; 0:no image, 1: pcx, 2:jpeg
   529                                  
   530 000000DD 00000000                pcx_line_starts		dd 0		; (lin) table of line starts
   531 000000E1 00000000                jpg_static_buf		dd 0		; (lin) tmp data for jpeg decoder
   532                                  
   533 000000E5 0000                    screen_width		dw 0
   534 000000E7 0000                    screen_height		dw 0
   535 000000E9 0000                    screen_vheight		dw 0
   536 000000EB 0000                    screen_mem		dw 0		; mem in 64k
   537 000000ED 00000000                screen_line_len		dd 0
   538                                  
   539 000000F1 [465B0000]              setpixel		dd setpixel_8		; function that sets one pixel
   540 000000F5 [4B5B0000]              setpixel_a		dd setpixel_a_8		; function that sets one pixel
   541 000000F9 [465B0000]              setpixel_t		dd setpixel_8		; function that sets one pixel
   542 000000FD [4B5B0000]              setpixel_ta		dd setpixel_a_8		; function that sets one pixel
   543 00000101 [025C0000]              getpixel		dd getpixel_8		; function that gets one pixel
   544                                  
   545                                  
   546 00000105 00000000                transp			dd 0		; transparency
   547                                  
   548 00000109 00<rept>                			align 4, db 0
   549                                  ; current font description
   550 0000010C 00000000                font			dd 0		; (lin)
   551 00000110 00000000                font.entries		dd 0		; chars in font
   552 00000114 0000                    font.height		dw 0
   553 00000116 0000                    font.baseline		dw 0
   554 00000118 0000                    font.line_height	dw 0
   555 0000011A 00                      font.properties		db 0		; bit 0: pw mode (show '*')
   556 0000011B 00                      font.res1		db 0		; alignment
   557                                  
   558                                  ; console font
   559 0000011C 00000000                cfont.lin		dd 0		; console font bitmap
   560 00000120 00000000                cfont_height		dd 0
   561 00000124 0000                    con_x			dw 0		; cursor pos in pixel
   562 00000126 0000                    con_y			dw 0		; cursor pos in pixel, *must* follow con_x
   563                                  
   564                                  
   565                                  ; current char description
   566 00000128 00000000                chr.buf			dd 0		; buffer for antialiased fonts
   567 0000012C 00000000                chr.buf_len		dd 0
   568 00000130 00000000                chr.pixel_buf		dd 0
   569 00000134 00000000                chr.data		dd 0		; encoded char data
   570 00000138 00000000                chr.bitmap		dd 0		; start of encoded bitmap; bit offset rel to chr.data
   571 0000013C 0000                    chr.bitmap_width	dw 0
   572 0000013E 0000                    chr.bitmap_height	dw 0
   573 00000140 0000                    chr.x_ofs		dw 0
   574 00000142 0000                    chr.y_ofs		dw 0		; rel. to baseline
   575 00000144 0000                    chr.x_advance		dw 0
   576 00000146 00                      chr.type		db 0		; 0 = bitmap, 1: gray scale
   577                                  
   578                                  chr.gray_values:
   579                                  %assign i 0
   580                                  %rep cbm_max_gray + 1
   581                                  			db (i * 255)/cbm_max_gray
   582                                  %assign i i + 1
   583                                  %endrep
   584 00000147 00                  <1>  db (i * 255)/cbm_max_gray
   585                              <1> %assign i i + 1
   586 00000148 13                  <1>  db (i * 255)/cbm_max_gray
   587                              <1> %assign i i + 1
   588 00000149 27                  <1>  db (i * 255)/cbm_max_gray
   589                              <1> %assign i i + 1
   590 0000014A 3A                  <1>  db (i * 255)/cbm_max_gray
   591                              <1> %assign i i + 1
   592 0000014B 4E                  <1>  db (i * 255)/cbm_max_gray
   593                              <1> %assign i i + 1
   594 0000014C 62                  <1>  db (i * 255)/cbm_max_gray
   595                              <1> %assign i i + 1
   596 0000014D 75                  <1>  db (i * 255)/cbm_max_gray
   597                              <1> %assign i i + 1
   598 0000014E 89                  <1>  db (i * 255)/cbm_max_gray
   599                              <1> %assign i i + 1
   600 0000014F 9C                  <1>  db (i * 255)/cbm_max_gray
   601                              <1> %assign i i + 1
   602 00000150 B0                  <1>  db (i * 255)/cbm_max_gray
   603                              <1> %assign i i + 1
   604 00000151 C4                  <1>  db (i * 255)/cbm_max_gray
   605                              <1> %assign i i + 1
   606 00000152 D7                  <1>  db (i * 255)/cbm_max_gray
   607                              <1> %assign i i + 1
   608 00000153 EB                  <1>  db (i * 255)/cbm_max_gray
   609                              <1> %assign i i + 1
   610 00000154 FF                  <1>  db (i * 255)/cbm_max_gray
   611                              <1> %assign i i + 1
   612                                  
   613 00000155 00<rept>                utf8_buf		times 8 db 0
   614                                  
   615                                  ; pointer to currently active palette (3*100h bytes)
   616 0000015D 00000000                gfx_pal			dd 0		; (lin)
   617                                  ; pointer to tmp area (3*100h bytes)
   618 00000161 00000000                gfx_pal_tmp		dd 0		; (lin)
   619                                  ; number of fixed pal values
   620 00000165 0000                    pals			dw 0
   621                                  
   622                                  ; the current gfx mode
   623 00000167 0300                    gfx_mode		dw 3
   624                                  ; != 0 if we're using a vbe mode (hi byte of gfx_mode)
   625                                  vbe_active		equ gfx_mode + 1
   626 00000169 00                      pixel_bits		db 0		; pixel size (8 or 16)
   627 0000016A 00                      color_bits		db 0		; color bits (8, 15 or 16)
   628 0000016B 00000000                pixel_bytes		dd 0		; pixel size in bytes
   629                                  
   630                                  ; segment address of writeable window
   631 0000016F 0000                    window_seg_w		dw 0
   632                                  ; segment address of readable window (= gfx_window_seg_w if 0)
   633 00000171 0000                    window_seg_r		dw 0
   634                                  ; ganularity units per window
   635 00000173 00                      window_inc		db 0
   636                                  ; currently mapped window
   637 00000174 00                      mapped_window		db 0
   638                                  
   639                                  ; cursor position
   640                                  gfx_cur			equ $		; both x & y
   641 00000175 0000                    gfx_cur_x		dw 0
   642 00000177 0000                    gfx_cur_y		dw 0		; must follow gfx_cur_x
   643 00000179 0000                    gfx_width		dw 0
   644 0000017B 0000                    gfx_height		dw 0
   645 0000017D 00000000                line_wrap		dd 0
   646 00000181 0000                    gfx_indent		dw 0
   647                                  
   648                                  ; clip region (incl)
   649 00000183 0000                    clip_l			dw 0		; left, incl
   650 00000185 0000                    clip_r			dw 0		; right, excl
   651 00000187 0000                    clip_t			dw 0		; top, incl
   652 00000189 0000                    clip_b			dw 0		; bottom, excl
   653                                  
   654 0000018B 00000000                line_x0			dd 0
   655 0000018F 00000000                line_y0			dd 0
   656 00000193 00000000                line_x1			dd 0
   657 00000197 00000000                line_y1			dd 0
   658 0000019B 00000000                line_tmp		dd 0
   659 0000019F 00000000                line_tmp2		dd 0
   660                                  
   661 000001A3 00                      			align 4, db 0
   662 000001A4 00000000                gfx_color		dd 0		; current color
   663 000001A8 00000000                gfx_color0		dd 0		; color #0 (normal color))
   664 000001AC 00000000                gfx_color1		dd 0		; color #1 (highlight color)
   665 000001B0 00000000                gfx_color2		dd 0		; color #2 (link color)
   666 000001B4 00000000                gfx_color3		dd 0		; color #3 (selected link color)
   667 000001B8 00000000                gfx_color_rgb		dd 0		; current color (rgb)
   668 000001BC FFFFFFFF                transparent_color	dd -1
   669 000001C0 00000000                char_eot		dd 0		; 'end of text' char
   670 000001C4 00000000                last_label		dd 0		; lin
   671 000001C8 00000000                page_title		dd 0		; lin
   672 000001CC 00000000                max_rows		dd 0		; max. number of text rows
   673 000001D0 00000000                cur_row			dd 0		; current text row (0 based)
   674 000001D4 00000000                cur_row2		dd 0		; dto, only during formatting
   675 000001D8 00000000                start_row		dd 0		; start row for text output
   676 000001DC 00000000                cur_link		dd 0		; link count
   677 000001E0 00000000                sel_link		dd 0		; selected link
   678 000001E4 00                      txt_state		db 0		; bit 0: 1 = skip text
   679                                  					; bit 1: 1 = text formatting only
   680 000001E5 07                      textmode_color		db 7		; fg color for text (debug) output
   681 000001E6 00                      keep_mode		db 0		; keep video mode in gfx_done
   682                                  
   683 000001E7 00                      			align 4, db 0
   684                                  
   685 000001E8 00000000                idle.draw_buffer	dd 0		; some drawing buffer
   686 000001EC 00000000                idle.data1		dd 0		; some data
   687 000001F0 00000000                idle.data2		dd 0		; some more data
   688 000001F4 00                      idle.run		db 0		; run idle loop
   689 000001F5 00                      idle.invalid		db 0		; idle loop has been left
   690                                  
   691 000001F6 00<rept>                			align 4, db 0
   692 000001F8 00000000                fname.tmp		dd 0		; tmp buffer for fname processing
   693 000001FC 00000000                fname.abs		dd 0		; tmp buffer for abs fname processing
   694 00000200 00000000                fname.cwd		dd 0		; current working dir
   695 00000204 00000000                fname.sys_cwd		dd 0		; real cwd (bootloader's view)
   696                                  fname.size		equ 256		; buffer size of fname.*
   697                                  
   698                                  			align 4, db 0
   699 00000208 00000000<rept>          row_text		times max_text_rows dd 0
   700 00000408 0000<rept>              ind_text		times max_text_rows dw 0
   701                                  
   702                                  			; note: link_list relies on row_start
   703 00000508 00<rept>                link_list		times li.size * link_entries db 0
   704                                  
   705                                  			; max label size: 32
   706 00000808 00<rept>                label_buf		times 35 db 0
   707                                  
   708                                  ; buffer for number conversions
   709                                  ; must be large enough for ps_status_info()
   710 0000082B 00<rept>                num_buf			times 23h db 0
   711 0000084E 00                      num_buf_end		db 0
   712                                  
   713                                  ; temp data for printf
   714 0000084F 00000000<rept>          tmp_write_data		times 10h dd 0
   715 0000088F 00000000                tmp_write_num		dd 0
   716 00000893 00                      tmp_write_sig		db 0
   717 00000894 00                      tmp_write_cnt		db 0
   718 00000895 00                      tmp_write_pad		db 0
   719                                  
   720 00000896 00                      pf_gfx			db 0
   721 00000897 00                      pf_gfx_raw_char		db 0
   722 00000898 0000                    pf_gfx_err		dw 0
   723 0000089A 00<rept>                			align 4, db 0
   724 0000089C 00000000                pf_gfx_buf		dd 0
   725 000008A0 00000000                pf_gfx_max		dd 0
   726 000008A4 00000000                pf_gfx_cnt		dd 0
   727                                  
   728 000008A8 00                      input_notimeout		db 0
   729 000008A9 00<rept>                			align 4, db 0
   730 000008AC 00000000                input_timeout_start	dd 0
   731 000008B0 00000000                input_timeout		dd 0
   732                                  
   733 000008B4 00000000                progress_max		dd 0
   734 000008B8 00000000                progress_current	dd 0
   735                                  
   736 000008BC 0000                    edit_x			dw 0
   737 000008BE 0000                    edit_y			dw 0
   738 000008C0 0000                    edit_width		dw 0
   739 000008C2 0000                    edit_height		dw 0
   740 000008C4 00000000                edit_bg			dd 0		; (lin)
   741 000008C8 00000000                edit_buf		dd 0		; (lin)
   742 000008CC 0000                    edit_buf_len		dw 0
   743 000008CE 0000                    edit_buf_ptr		dw 0
   744 000008D0 00000000                edit_flags		dd 0		; bit 0: cursor visible
   745                                  					; bit 1: complete redraw needed
   746 000008D4 00000000                edit_saved_cursor	dd 0		; (lin)
   747 000008D8 0000                    edit_cursor		dw 0		; cursor pos in pixel
   748 000008DA 0000                    edit_shift		dw 0
   749 000008DC 0000                    edit_y_ofs		dw 0
   750 000008DE 0000                    edit_length		dw 0		; string length in pixel
   751                                  
   752 000008E0 0000                    kbd_status		dw 0
   753                                  
   754                                  sl.port			equ 0
   755                                  sl.baud			equ 2
   756                                  sl.scancode		equ 4
   757                                  sl.status		equ 5		; bits:
   758                                  					;   0: valid config
   759                                  					;   1: input received
   760                                  					;   2: baud autodetect
   761                                  sl.recv_mask		equ 6		; for autodetect
   762                                  sl.recv_cnt		equ 7		; dto.
   763                                  sl.baud_idx		equ 8		; dto.
   764                                  sl.size			equ 9
   765                                  
   766                                  			; 5 serial lines
   767                                  serial.lines.max	equ 5
   768 000008E2 00<rept>                serial.lines		times serial.lines.max * sl.size db 0
   769                                  
   770 0000090F 0000                    serial.port_noinit	dw 0		; port that was setup by bootloader
   771 00000911 00000000                serial.key		dd 0		; serial input
   772                                  
   773                                  			; baud divisors
   774 00000915 0103060C00              serial.baud_tab		db 1, 3, 6, 12, 0
   775                                  
   776                                  sound_buf_size		equ 4*1024
   777                                  sound_buf_mask		equ sound_buf_size - 1
   778                                  
   779                                  
   780 0000091A 00<rept>                			align 4, db 0
   781 0000091C 00000000                sound_unpack_buf	dd 0		; buffer for unpacked sound samples
   782 00000920 00000000                sound_unpack_buf_size	dd 0
   783 00000924 0000                    cnt0_acc		dw 0
   784 00000926 0000                    cnt0_start_val		dw 0
   785 00000928 00000000                sound_old_int8		dd 0
   786 0000092C 00                      sound_vol		db 0
   787 0000092D 00                      sound_ok		db 0
   788 0000092E 00                      sound_int_active	db 0
   789 0000092F 00                      sound_playing		db 0		; bits 0-3: mod, 4-7: wav
   790 00000930 00                      sound_scale		db 0
   791 00000931 00000000                sound_sample		dd 0
   792 00000935 00000000                sound_buf		dd 0		; (seg:ofs)
   793 00000939 00000000                sound_buf.lin		dd 0		; buffer for sound player
   794 0000093D 00000000                sound_start		dd 0		; rel. to sound_buf
   795 00000941 00000000                sound_end		dd 0		; rel. to sound_buf
   796 00000945 00<rept>                playlist		times playlist_entries * sizeof_playlist db 0
   797 00000985 00000000                mod_buf			dd 0 		; buffer for mod player
   798 00000989 00000000                int8_count		dd 0
   799 0000098D 00000000                wav_current		dd 0		; pointer to currently played way file
   800 00000991 00000000                wav_end			dd 0		; stop here
   801 00000995 00000000                wav_next		dd 0		; next sound sample
   802 00000999 00                      wav_type		db 0
   803 0000099A 00                      need_sound_update	db 0
   804                                  
   805 0000099B 00                      			align 4, db 0
   806                                  
   807 0000099C 00000000                ddc_external		dd 0
   808                                  
   809                                  ; temporary vars
   810 000009A0 00000000                tmp_var_0		dd 0
   811 000009A4 00000000                tmp_var_1		dd 0
   812 000009A8 00000000                tmp_var_2		dd 0
   813 000009AC 00000000                tmp_var_3		dd 0
   814                                  
   815                                  			; display size list
   816 000009B0 0000                    display_res.cnt		dw 0   
   817 000009B2 00000000<rept>          display_res		times 16 dw 0, 0
   818 000009F2 00000000                display_res_pref	dw 0, 0
   819                                  
   820                                  			align 2
   821 000009F6 FF07                    pm_idt			dw 7ffh			; idt for pm
   822 000009F8 00000000                .base			dd 0
   823 000009FC FFFF                    rm_idt			dw 0ffffh		; idt for real mode
   824 000009FE 00000000                .base			dd 0
   825 00000A02 4F00                    pm_gdt			dw gdt_size-1		; gdt for pm
   826 00000A04 00000000                .base			dd 0
   827                                  
   828                                  ; real mode segment values
   829                                  rm_seg:
   830 00000A08 0000                    .ss			dw 0
   831 00000A0A 0000                    .cs			dw 0
   832 00000A0C 0000                    .ds			dw 0
   833 00000A0E 0000                    .es			dw 0
   834 00000A10 0000                    .fs			dw 0
   835 00000A12 0000                    .gs			dw 0
   836                                  
   837                                  			align 4
   838                                  
   839 00000A14 00000000                prog.base		dd 0			; our base address
   840                                  
   841 00000A18 0000000000000000        gdt			dd 0, 0			; null descriptor
   842 00000A20 FFFF00000093CF00        .4gb_d32		dd 0000ffffh, 00cf9300h	; 4GB segment, data, use32
   843 00000A28 FFFF0000009BCF00        .4gb_c32		dd 0000ffffh, 00cf9b00h	; 4GB segment, code, use32
   844                                  			; see gdt_init
   845 00000A30 00000000009B4000        .prog_c32		dd 00000000h, 00409b00h	; our program as code, use32
   846 00000A38 0000000000930000        .prog_d16		dd 00000000h, 00009300h	; dto, data, use16
   847 00000A40 00000000009B0000        .prog_c16		dd 00000000h, 00009b00h	; dto, code, use16
   848 00000A48 0000000000930000        .data_d16		dd 00000000h, 00009300h	; 64k segment, data, use16
   849                                  
   850 00000A50 0000000000930000        .screen_r16		dd 00000000h, 00009300h ; 64k screen, data, use16
   851 00000A58 0000000000930000        .screen_w16		dd 00000000h, 00009300h ; 64k screen, data, use16
   852 00000A60 6700000000890000        .tss			dd 00000067h, 00008900h ; 104 byte minimal tss
   853                                  gdt_size		equ $-gdt
   854                                  
   855                                  ; gdt for pm switch
   856                                  pm_seg.4gb_d32		equ 8			; covers all 4GB, default ss, es, fs, gs
   857                                  pm_seg.4gb_c32		equ 10h			; dto, but executable (for e.g., idt)
   858                                  pm_seg.prog_c32		equ 18h			; default cs, use32
   859                                  pm_seg.prog_d16		equ 20h			; default ds
   860                                  pm_seg.prog_c16		equ 28h			; default cs, use16
   861                                  pm_seg.data_d16		equ 30h			; free to use
   862                                  pm_seg.screen_r16	equ 38h			; graphics window, for reading
   863                                  pm_seg.screen_w16	equ 40h			; graphics window, for writing
   864                                  pm_seg.tss		equ 48h			; tss
   865                                  
   866                                  %if debug
   867                                  ; debug texts
   868 00000A68 0A5072657373206120-     dmsg_01			db 10, 'Press a key to continue...', 0
   869 00000A71 6B657920746F20636F-
   870 00000A7A 6E74696E75652E2E2E-
   871 00000A83 00                 
   872 00000A84 20202020206D656D20-     dmsg_02			db '     mem area %d: 0x%08x - 0x%08x', 10, 0
   873 00000A8D 617265612025643A20-
   874 00000A96 307825303878202D20-
   875 00000A9F 3078253038780A00   
   876 00000AA7 2534753A2061646472-     dmsg_03			db '%4u: addr 0x%08x, size 0x%08x+%u, ip 0x%04x, %s', 10, 0
   877 00000AB0 203078253038782C20-
   878 00000AB9 73697A652030782530-
   879 00000AC2 38782B25752C206970-
   880 00000ACB 203078253034782C20-
   881 00000AD4 25730A00           
   882 00000AD8 202020202020202020-     dmsg_03a		db '                                                         ', 10, 0
   883 00000AE1 202020202020202020-
   884 00000AEA 202020202020202020-
   885 00000AF3 202020202020202020-
   886 00000AFC 202020202020202020-
   887 00000B05 202020202020202020-
   888 00000B0E 2020200A00         
   889 00000B13 6F6F70733A20626C6F-     dmsg_04			db 'oops: block at 0x%08x: size 0x%08x is too small', 10, 0
   890 00000B1C 636B20617420307825-
   891 00000B25 3038783A2073697A65-
   892 00000B2E 203078253038782069-
   893 00000B37 7320746F6F20736D61-
   894 00000B40 6C6C0A00           
   895 00000B44 6F6F70733A20307825-     dmsg_04a		db 'oops: 0x%08x > 0x%08x', 10, 0
   896 00000B4D 303878203E20307825-
   897 00000B56 3038780A00         
   898 00000B5B 616464722030782530-     dmsg_06			db 'addr 0x%08x', 10, 0
   899 00000B64 38780A00           
   900 00000B68 6672656500              dmsg_07			db 'free', 0
   901 00000B6D 7573656400              dmsg_08			db 'used', 0
   902 00000B72 63757272656E742064-     dmsg_09			db 'current dictionary', 10, 0
   903 00000B7B 696374696F6E617279-
   904 00000B84 0A00               
   905 00000B86 20202532753A207479-     dmsg_10			db '  %2u: type %u, val 0x%x', 10, 0
   906 00000B8F 70652025752C207661-
   907 00000B98 6C20307825780A00   
   908                                  
   909                                  %endif
   910                                  
   911 00000BA0 00                      single_step		db 0
   912 00000BA1 00                      show_debug_info		db 0
   913 00000BA2 00                      dtrace_count		db 0
   914                                  
   915 00000BA3 00                      fms_cpio_swab		db 0
   916                                  
   917 00000BA4 0A496E697469616C69-     hello			db 10, 'Initializing gfx code...', 10
   918 00000BAD 7A696E672067667820-
   919 00000BB6 636F64652E2E2E0A   
   920 00000BBE 00                      msg_0			db 0
   921                                  
   922 00000BBF B36970202534783A20-     msg_10			db 0b3h, 'ip %4x:  %8x.%x           ', 0b3h, 10, 0
   923 00000BC8 202538782E25782020-
   924 00000BD1 202020202020202020-
   925 00000BDA B30A00             
   926 00000BDD B32532783A20253878-     msg_11			db 0b3h, '%2x: %8x.%2x', 0
   927 00000BE6 2E25327800         
   928 00000BEB B320203A2020202020-     msg_12			db 0b3h, '  :            ', 0
   929 00000BF4 2020202020202000   
   930 00000BFC DAC4C4C4C464617461      msg_13			db 0dah, 0c4h, 0c4h, 0c4h, 0c4h, 'data'
   931 00000C05 C4<rept>                			times 7 db 0c4h
   932 00000C0C C2C4C4C4C470726F67      			db 0c2h, 0c4h, 0c4h, 0c4h, 0c4h, 'prog'
   933 00000C15 C4<rept>                			times 7 db 0c4h
   934 00000C1C BF0A00                  			db 0bfh, 10, 0
   935 00000C1F C3                      msg_14			db 0c3h
   936 00000C20 C4<rept>                			times 15 db 0c4h
   937 00000C2F C1                      			db 0c1h
   938 00000C30 C4<rept>                			times 15 db 0c4h
   939 00000C3F B40A00                  			db 0b4h, 10, 0
   940 00000C42 C0                      msg_15			db 0c0h
   941 00000C43 C4<rept>                			times 31 db 0c4h
   942 00000C62 D90A00                  			db 0d9h, 10, 0
   943 00000C65 B30A00                  msg_16			db 0b3h, 10, 0
   944 00000C68 B36572722025337820-     msg_17			db 0b3h, 'err %3x                        ', 0b3h, 10, 0 
   945 00000C71 202020202020202020-
   946 00000C7A 202020202020202020-
   947 00000C83 2020202020B30A00   
   948 00000C8B B3657272202533783A-     msg_18			db 0b3h, 'err %3x: %8x              ', 0b3h, 10, 0
   949 00000C94 202538782020202020-
   950 00000C9D 202020202020202020-
   951 00000CA6 B30A00             
   952 00000CA9 B3657272202533783A-     msg_19			db 0b3h, 'err %3x: %8x   %8x   ', 0b3h, 10, 0
   953 00000CB2 202538782020202538-
   954 00000CBB 78202020B30A00     
   955 00000CC2 B36970202534783A20-     msg_20			db 0b3h, 'ip %4x: %8x.%x %8x.%x ', 0b3h, 10, 0
   956 00000CCB 2538782E2578202538-
   957 00000CD4 782E257820B30A00   
   958 00000CDC B32553B30A00            msg_21			db 0b3h, '%S', 0b3h, 10, 0 
   959                                  
   960                                  			align 2, db 0
   961                                  			; prim_function entries
   962                                  			prim_jump_table
   963 00000CE2 0000                <1> jt_p_none dw 0
   964 00000CE4 0000                <1> jt_p_code dw 0
   965 00000CE6 0000                <1> jt_p_ret dw 0
   966 00000CE8 [5831]              <1> jt_p_astart dw prim_astart
   967 00000CEA [7E31]              <1> jt_p_aend dw prim_aend
   968 00000CEC [AA35]              <1> jt_p_def dw prim_def
   969 00000CEE [D235]              <1> jt_p_if dw prim_if
   970 00000CF0 [2E36]              <1> jt_p_ifelse dw prim_ifelse
   971 00000CF2 [5C38]              <1> jt_p_loop dw prim_loop
   972 00000CF4 [B038]              <1> jt_p_repeat dw prim_repeat
   973 00000CF6 [1939]              <1> jt_p_for dw prim_for
   974 00000CF8 [D739]              <1> jt_p_forall dw prim_forall
   975 00000CFA [1238]              <1> jt_p_exit dw prim_exit
   976 00000CFC [F137]              <1> jt_p_return dw prim_return
   977 00000CFE [A632]              <1> jt_p_array dw prim_array
   978 00000D00 [E331]              <1> jt_p_get dw prim_get
   979 00000D02 [1232]              <1> jt_p_put dw prim_put
   980 00000D04 [8C32]              <1> jt_p_length dw prim_length
   981 00000D06 [F132]              <1> jt_p_dup dw prim_dup
   982 00000D08 [DD32]              <1> jt_p_pop dw prim_pop
   983 00000D0A [6137]              <1> jt_p_exch dw prim_exch
   984 00000D0C [7037]              <1> jt_p_rot dw prim_rot
   985 00000D0E [7F37]              <1> jt_p_roll dw prim_roll
   986 00000D10 [1F33]              <1> jt_p_over dw prim_over
   987 00000D12 [5033]              <1> jt_p_index dw prim_index
   988 00000D14 [7C33]              <1> jt_p_exec dw prim_exec
   989 00000D16 [9333]              <1> jt_p_add dw prim_add
   990 00000D18 [CF33]              <1> jt_p_sub dw prim_sub
   991 00000D1A [0C34]              <1> jt_p_mul dw prim_mul
   992 00000D1C [2934]              <1> jt_p_div dw prim_div
   993 00000D1E [5134]              <1> jt_p_mod dw prim_mod
   994 00000D20 [7A34]              <1> jt_p_neg dw prim_neg
   995 00000D22 [8D34]              <1> jt_p_abs dw prim_abs
   996 00000D24 [A434]              <1> jt_p_min dw prim_min
   997 00000D26 [C234]              <1> jt_p_max dw prim_max
   998 00000D28 [1735]              <1> jt_p_and dw prim_and
   999 00000D2A [2C35]              <1> jt_p_or dw prim_or
  1000 00000D2C [3535]              <1> jt_p_xor dw prim_xor
  1001 00000D2E [3E35]              <1> jt_p_not dw prim_not
  1002 00000D30 [6435]              <1> jt_p_shl dw prim_shl
  1003 00000D32 [8735]              <1> jt_p_shr dw prim_shr
  1004 00000D34 [1337]              <1> jt_p_eq dw prim_eq
  1005 00000D36 [2037]              <1> jt_p_ne dw prim_ne
  1006 00000D38 [2D37]              <1> jt_p_gt dw prim_gt
  1007 00000D3A [3A37]              <1> jt_p_ge dw prim_ge
  1008 00000D3C [4737]              <1> jt_p_lt dw prim_lt
  1009 00000D3E [5437]              <1> jt_p_le dw prim_le
  1010 00000D40 [E237]              <1> jt_p_trace dw prim_trace
  1011 00000D42 [CD37]              <1> jt_p_dtrace dw prim_dtrace
  1012 00000D44 [3C41]              <1> jt_p_malloc dw prim_malloc
  1013 00000D46 [5D41]              <1> jt_p_free dw prim_free
  1014 00000D48 [8341]              <1> jt_p_realloc dw prim_realloc
  1015 00000D4A [B141]              <1> jt_p_memsize dw prim_memsize
  1016 00000D4C [F141]              <1> jt_p_dumpmem dw prim_dumpmem
  1017 00000D4E [B23A]              <1> jt_p_gettype dw prim_gettype
  1018 00000D50 [C83A]              <1> jt_p_settype dw prim_settype
  1019 00000D52 [E63A]              <1> jt_p_screensize dw prim_screensize
  1020 00000D54 [443C]              <1> jt_p_imagecolors dw prim_imagecolors
  1021 00000D56 [223B]              <1> jt_p_vscreensize dw prim_vscreensize
  1022 00000D58 [5E3B]              <1> jt_p_monitorsize dw prim_monitorsize
  1023 00000D5A [A93B]              <1> jt_p_displaysizes dw prim_displaysizes
  1024 00000D5C [8E3C]              <1> jt_p_moveto dw prim_moveto
  1025 00000D5E [D03C]              <1> jt_p_currentpoint dw prim_currentpoint
  1026 00000D60 [0C3D]              <1> jt_p_lineto dw prim_lineto
  1027 00000D62 [5A3C]              <1> jt_p_setcolor dw prim_setcolor
  1028 00000D64 [743C]              <1> jt_p_currentcolor dw prim_currentcolor
  1029 00000D66 [593D]              <1> jt_p_putpixel dw prim_putpixel
  1030 00000D68 [733D]              <1> jt_p_getpixel dw prim_getpixel
  1031 00000D6A [953D]              <1> jt_p_setfont dw prim_setfont
  1032 00000D6C [C33D]              <1> jt_p_currentfont dw prim_currentfont
  1033 00000D6E [DA3D]              <1> jt_p_fontheight dw prim_fontheight
  1034 00000D70 [533E]              <1> jt_p_strsize dw prim_strsize
  1035 00000D72 [103E]              <1> jt_p_show dw prim_show
  1036 00000D74 [833C]              <1> jt_p_settextmodecolor dw prim_settextmodecolor
  1037 00000D76 [DD3E]              <1> jt_p_image dw prim_image
  1038 00000D78 [633F]              <1> jt_p_loadpalette dw prim_loadpalette
  1039 00000D7A [2440]              <1> jt_p_setpalette dw prim_setpalette
  1040 00000D7C [6340]              <1> jt_p_getpalette dw prim_getpalette
  1041 00000D7E [9840]              <1> jt_p_settransparentcolor dw prim_settransparentcolor
  1042 00000D80 [A340]              <1> jt_p_savescreen dw prim_savescreen
  1043 00000D82 [0741]              <1> jt_p_restorescreen dw prim_restorescreen
  1044 00000D84 [F741]              <1> jt_p_fillrect dw prim_fillrect
  1045 00000D86 [1842]              <1> jt_p_snprintf dw prim_snprintf
  1046 00000D88 [8E42]              <1> jt_p_editinit dw prim_editinit
  1047 00000D8A [FF42]              <1> jt_p_editdone dw prim_editdone
  1048 00000D8C [DC43]              <1> jt_p_editinput dw prim_editinput
  1049 00000D8E [6843]              <1> jt_p_editshowcursor dw prim_editshowcursor
  1050 00000D90 [A243]              <1> jt_p_edithidecursor dw prim_edithidecursor
  1051 00000D92 [CF42]              <1> jt_p_editredraw dw prim_editredraw
  1052 00000D94 [2644]              <1> jt_p_editgetleft dw prim_editgetleft
  1053 00000D96 [AE3C]              <1> jt_p_rmoveto dw prim_rmoveto
  1054 00000D98 [6F48]              <1> jt_p_strstr dw prim_strstr
  1055 00000D9A [B348]              <1> jt_p_soundgetvolume dw prim_soundgetvolume
  1056 00000D9C [DB48]              <1> jt_p_soundsetvolume dw prim_soundsetvolume
  1057 00000D9E [0C49]              <1> jt_p_soundgetsamplerate dw prim_soundgetsamplerate
  1058 00000DA0 [3249]              <1> jt_p_soundsetsamplerate dw prim_soundsetsamplerate
  1059 00000DA2 [4F49]              <1> jt_p_soundplay dw prim_soundplay
  1060 00000DA4 [5849]              <1> jt_p_sounddone dw prim_sounddone
  1061 00000DA6 [5F49]              <1> jt_p_modload dw prim_modload
  1062 00000DA8 [8449]              <1> jt_p_modplay dw prim_modplay
  1063 00000DAA [A949]              <1> jt_p_modplaysample dw prim_modplaysample
  1064 00000DAC [034A]              <1> jt_p_wavplay dw prim_wavplay
  1065 00000DAE [574A]              <1> jt_p_wavplaylater dw prim_wavplaylater
  1066 00000DB0 [7B4A]              <1> jt_p_settextwrap dw prim_settextwrap
  1067 00000DB2 [864A]              <1> jt_p_currenttextwrap dw prim_currenttextwrap
  1068 00000DB4 [904A]              <1> jt_p_seteotchar dw prim_seteotchar
  1069 00000DB6 [9B4A]              <1> jt_p_currenteotchar dw prim_currenteotchar
  1070 00000DB8 [334B]              <1> jt_p_settextcolors dw prim_settextcolors
  1071 00000DBA [A94B]              <1> jt_p_currenttextcolors dw prim_currenttextcolors
  1072 00000DBC [A54A]              <1> jt_p_setmaxrows dw prim_setmaxrows
  1073 00000DBE [B04A]              <1> jt_p_currentmaxrows dw prim_currentmaxrows
  1074 00000DC0 [BA4A]              <1> jt_p_formattext dw prim_formattext
  1075 00000DC2 [144B]              <1> jt_p_gettextrows dw prim_gettextrows
  1076 00000DC4 [1E4B]              <1> jt_p_setstartrow dw prim_setstartrow
  1077 00000DC6 [294B]              <1> jt_p_getlinks dw prim_getlinks
  1078 00000DC8 [184C]              <1> jt_p_setlink dw prim_setlink
  1079 00000DCA [2B4C]              <1> jt_p_currentlink dw prim_currentlink
  1080 00000DCC [354C]              <1> jt_p_getlink dw prim_getlink
  1081 00000DCE [D94C]              <1> jt_p_lineheight dw prim_lineheight
  1082 00000DD0 [E54C]              <1> jt_p_currenttitle dw prim_currenttitle
  1083 00000DD2 [004D]              <1> jt_p_usleep dw prim_usleep
  1084 00000DD4 [294D]              <1> jt_p_notimeout dw prim_notimeout
  1085 00000DD6 [324D]              <1> jt_p_time dw prim_time
  1086 00000DD8 [3C4D]              <1> jt_p_date dw prim_date
  1087 00000DDA [354E]              <1> jt_p_idle dw prim_idle
  1088 00000DDC [083C]              <1> jt_p_imagesize dw prim_imagesize
  1089 00000DDE [FE47]              <1> jt_p_eject dw prim_eject
  1090 00000DE0 [1C48]              <1> jt_p_poweroff dw prim_poweroff
  1091 00000DE2 [5648]              <1> jt_p_reboot dw prim_reboot
  1092 00000DE4 [7344]              <1> jt_p_64bit dw prim_64bit
  1093 00000DE6 [AE44]              <1> jt_p_getbyte dw prim_getbyte
  1094 00000DE8 [C544]              <1> jt_p_putbyte dw prim_putbyte
  1095 00000DEA [DB44]              <1> jt_p_getword dw prim_getword
  1096 00000DEC [F244]              <1> jt_p_putword dw prim_putword
  1097 00000DEE [0945]              <1> jt_p_getdword dw prim_getdword
  1098 00000DF0 [1F45]              <1> jt_p_putdword dw prim_putdword
  1099 00000DF2 [8044]              <1> jt_p_inbyte dw prim_inbyte
  1100 00000DF4 [9844]              <1> jt_p_outbyte dw prim_outbyte
  1101 00000DF6 [3545]              <1> jt_p_findfile dw prim_findfile
  1102 00000DF8 [6645]              <1> jt_p_filesize dw prim_filesize
  1103 00000DFA [9E45]              <1> jt_p_getcwd dw prim_getcwd
  1104 00000DFC [AA45]              <1> jt_p_chdir dw prim_chdir
  1105 00000DFE [C845]              <1> jt_p_mount dw prim_mount
  1106 00000E00 [0146]              <1> jt_p_setmode dw prim_setmode
  1107 00000E02 [6A46]              <1> jt_p_currentmode dw prim_currentmode
  1108 00000E04 [9A46]              <1> jt_p_videomodeinfo dw prim_videomodeinfo
  1109 00000E06 [7646]              <1> jt_p_videomodes dw prim_videomodes
  1110 00000E08 [F247]              <1> jt_p_colorbits dw prim_colorbits
  1111 00000E0A [E63D]              <1> jt_p_setimage dw prim_setimage
  1112 00000E0C [F13D]              <1> jt_p_currentimage dw prim_currentimage
  1113 00000E0E [FB3D]              <1> jt_p_settransparency dw prim_settransparency
  1114 00000E10 [063E]              <1> jt_p_currenttransparency dw prim_currenttransparency
  1115 00000E12 [713F]              <1> jt_p_unpackimage dw prim_unpackimage
  1116 00000E14 [AD4E]              <1> jt_p_keepmode dw prim_keepmode
  1117 00000E16 [B84E]              <1> jt_p_blend dw prim_blend
  1118 00000E18 [9B3E]              <1> jt_p_memcpy dw prim_memcpy
  1119 00000E1A [6944]              <1> jt_p_sysconfig dw prim_sysconfig
  1120 00000E1C [D945]              <1> jt_p__readsector dw prim__readsector
  1121 00000E1E [CF47]              <1> jt_p_sysinfo dw prim_sysinfo
  1122 00000E20 [7C4F]              <1> jt_p_getkey dw prim_getkey
  1123 00000E22 [2E4E]              <1> jt_p_serialinit dw prim_serialinit
  1124 00000E24 [464D]              <1> jt_p_serialputc dw prim_serialputc
  1125 00000E26 [524D]              <1> jt_p_serialsetconfig dw prim_serialsetconfig
  1126 00000E28 [FD4D]              <1> jt_p_serialgetbaud dw prim_serialgetbaud
  1127 00000E2A [066F]              <1> jt_p_realpath dw prim_realpath
  1128 00000E2C [E56E]              <1> jt_p_systempath dw prim_systempath
  1129 00000E2E [C16E]              <1> jt_p_xxx dw prim_xxx
  1130 00000E30 [B66E]              <1> jt_p_test1 dw prim_test1
  1131 00000E32 [0F4A]              <1> jt_p_test2 dw prim_test2
  1132 00000E34 [1F4A]              <1> jt_p_test3 dw prim_test3
  1133 00000E36 [2B4A]              <1> jt_p_test4 dw prim_test4
  1134 00000E38 [354A]              <1> jt_p_test5 dw prim_test5
  1135 00000E3A [474A]              <1> jt_p_test6 dw prim_test6
  1136                                  
  1137                                  ; menu entry descriptor
  1138                                  menu_entries		equ 0
  1139                                  menu_default		equ 2		; seg:ofs
  1140                                  menu_ent_list		equ 6		; seg:ofs
  1141                                  menu_ent_size		equ 10
  1142                                  menu_arg_list		equ 12		; seg:ofs
  1143                                  menu_arg_size		equ 16
  1144                                  sizeof_menu_desc	equ 18
  1145                                  
  1146                                  ; framebuffer mode list
  1147                                  fb_mode			equ 0		; word
  1148                                  fb_width		equ 2		; word
  1149                                  fb_height		equ 4		; word, must follow fb_width
  1150                                  fb_bits			equ 6		; byte
  1151                                  fb_ok			equ 7		; monitor supports it
  1152                                  sizeof_fb_entry		equ 8
  1153                                  
  1154                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1155                                  ;
  1156                                  ; Some macros.
  1157                                  ;
  1158                                  %macro		pf_arg_uchar 2
  1159                                  		and dword [tmp_write_data + %1 * 4],byte 0
  1160                                  		mov [tmp_write_data + %1 * 4],%2
  1161                                  %endmacro
  1162                                  
  1163                                  
  1164                                  %macro		pf_arg_ushort 2
  1165                                  		and word [tmp_write_data + %1 * 4 + 2],byte 0
  1166                                  		mov [tmp_write_data + %1 * 4],%2
  1167                                  %endmacro
  1168                                  
  1169                                  
  1170                                  %macro		pf_arg_uint 2
  1171                                  		mov [tmp_write_data + %1 * 4],%2
  1172                                  %endmacro
  1173                                  
  1174                                  
  1175                                  %macro		pf_arg_char 2
  1176                                  		push eax
  1177                                  		movsx eax,%2
  1178                                  		mov [tmp_write_data + %1 * 4],eax
  1179                                  		pop eax
  1180                                  %endmacro
  1181                                  
  1182                                  
  1183                                  %macro		pf_arg_short 2
  1184                                  		push eax
  1185                                  		movsx eax,%2
  1186                                  		mov [tmp_write_data + %1 * 4],eax
  1187                                  		pop eax
  1188                                  %endmacro
  1189                                  
  1190                                  
  1191                                  %macro		pf_arg_int 2
  1192                                  		mov [tmp_write_data + %1 * 4],%2
  1193                                  %endmacro
  1194                                  
  1195                                  
  1196                                  %macro		pm_enter 0
  1197                                  %%j_pm_1:
  1198                                  		call switch_to_pm
  1199                                  %%j_pm_2:
  1200                                  		%if %%j_pm_2 - %%j_pm_1 != 3
  1201                                  		  %error "pm_enter: not in 16 bit mode"
  1202                                  		%endif
  1203                                  
  1204                                  		bits 32
  1205                                  %endmacro
  1206                                  
  1207                                  
  1208                                  %macro		pm_leave 0
  1209                                  %%j_pm_1:
  1210                                  		call switch_to_rm
  1211                                  %%j_pm_2:
  1212                                  		%if %%j_pm_2 - %%j_pm_1 != 5
  1213                                  		  %error "pm_leave: not in 32 bit mode"
  1214                                  		%endif
  1215                                  
  1216                                  		bits 16
  1217                                  %endmacro
  1218                                  
  1219                                  
  1220                                  %macro		gfx_enter 0
  1221                                  		call _gfx_enter
  1222                                  		bits 32
  1223                                  %endmacro
  1224                                  
  1225                                  
  1226                                  %macro		gfx_leave 0
  1227                                  		call _gfx_leave
  1228                                  		bits 16
  1229                                  %endmacro
  1230                                  
  1231                                  
  1232                                  %macro		rm32_call 1
  1233                                  		pm_leave
  1234                                  		call %1
  1235                                  		pm_enter
  1236                                  %endmacro
  1237                                  
  1238                                  
  1239                                  %macro		pm32_call 1
  1240                                  		pm_enter
  1241                                  		call %1
  1242                                  		pm_leave
  1243                                  %endmacro
  1244                                  
  1245                                  
  1246                                  %macro          wait32 0
  1247                                  		pushf
  1248                                  		push ecx
  1249                                  		push eax
  1250                                                  mov ecx,10000000
  1251                                  %%wait32_10:
  1252                                                  in al,80h
  1253                                                  loop %%wait32_10
  1254                                                  pop eax
  1255                                                  pop ecx
  1256                                                  popf
  1257                                  %endmacro
  1258                                  
  1259                                  
  1260                                  %macro		is_dotdot 1
  1261                                  		cmp dword [%1],'/../'
  1262                                  		jz %%idd_90
  1263                                  		cmp dword [%1],'/..'
  1264                                  %%idd_90:
  1265                                  %endmacro
  1266                                  
  1267                                  
  1268                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1269                                  ;
  1270                                  ; Interface functions.
  1271                                  ;
  1272                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1273                                  
  1274                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1275                                  ; Setup internal data structures.
  1276                                  ;
  1277                                  ; esi		sysconfig data
  1278                                  ;
  1279                                  ; return:
  1280                                  ;  CF		error
  1281                                  ;
  1282                                  
  1283                                  		bits 16
  1284                                  
  1285                                  gfx_init:
  1286                                  		; don't change stack layout - see gfx_enter
  1287 00000E3C 0FA0                    		push fs
  1288 00000E3E 06                      		push es
  1289 00000E3F 1E                      		push ds
  1290                                  
  1291 00000E40 0E                      		push cs
  1292 00000E41 1F                      		pop ds
  1293                                  
  1294 00000E42 FC                      		cld
  1295                                  
  1296 00000E43 668936[B400]            		mov [boot.sysconfig],esi
  1297                                  
  1298                                  		; setup gdt, to get pm-switching going
  1299 00000E48 E8736C                  		call gdt_init
  1300                                  
  1301                                  		; we can run in protected mode but can't handle ints until
  1302                                  		; after pm_init
  1303 00000E4B FA                      		cli
  1304                                  
  1305 00000E4C 6631C9                  		xor ecx,ecx
  1306 00000E4F 49                      		dec cx
  1307                                  
  1308                                  		pm_enter
  1309                              <1> %%j_pm_1:
  1310 00000E50 E88F6D              <1>  call switch_to_pm
  1311                              <1> %%j_pm_2:
  1312                              <1>  %if %%j_pm_2 - %%j_pm_1 != 3
  1313                              <1>  %error "pm_enter: not in 16 bit mode"
  1314                              <1>  %endif
  1315                              <1> 
  1316                              <1>  bits 32
  1317                                  
  1318                                  		; some via cpus have problems with pm switching (bug #231104), so:
  1319                                  		; checking whether pm switch really worked...
  1320 00000E53 41                      		inc ecx
  1321 00000E54 751C                    		jnz gfx_init_10
  1322                                  
  1323                                  		; ... apparently not; try to get out
  1324 00000E56 F5                      		cmc
  1325 00000E57 7300                    		jnc $+2
  1326 00000E59 F5                      		cmc
  1327 00000E5A 7300                    		jnc $+2
  1328 00000E5C 7400                    		jz $+2
  1329                                  
  1330                                  		pm_leave
  1331                              <1> %%j_pm_1:
  1332 00000E5E E8076E0000          <1>  call switch_to_rm
  1333                              <1> %%j_pm_2:
  1334                              <1>  %if %%j_pm_2 - %%j_pm_1 != 5
  1335                              <1>  %error "pm_leave: not in 32 bit mode"
  1336                              <1>  %endif
  1337                              <1> 
  1338                              <1>  bits 16
  1339                                  
  1340 00000E63 F5                      		cmc
  1341 00000E64 7300                    		jnc $+2
  1342 00000E66 F5                      		cmc
  1343 00000E67 7300                    		jnc $+2
  1344 00000E69 7400                    		jz $+2
  1345                                  
  1346 00000E6B F9                      		stc
  1347                                  
  1348 00000E6C 1F                      		pop ds
  1349 00000E6D 07                      		pop es
  1350 00000E6E 0FA1                    		pop fs
  1351                                  
  1352 00000E70 FB                      		sti
  1353                                  
  1354 00000E71 CB                      		retf
  1355                                  
  1356                                  		bits 32
  1357                                  
  1358                                  gfx_init_10:
  1359 00000E72 8B35[B4000000]          		mov esi,[boot.sysconfig]
  1360 00000E78 260FB74608              		movzx eax,word [es:esi+sc.bootloader_seg]
  1361 00000E7D C1E004                  		shl eax,4
  1362 00000E80 A3[B0000000]            		mov [boot.base],eax
  1363                                  
  1364 00000E85 26FF7620                		push dword [es:esi+sc.file]
  1365 00000E89 8F05[18000000]          		pop dword [file.start]
  1366 00000E8F 26FF7624                		push dword [es:esi+sc.archive_start]
  1367 00000E93 8F05[1C000000]          		pop dword [archive.start]
  1368 00000E99 26FF7628                		push dword [es:esi+sc.archive_end]
  1369 00000E9D 8F05[20000000]          		pop dword [archive.end]
  1370 00000EA3 26FF762C                		push dword [es:esi+sc.mem0_start]
  1371 00000EA7 8F05[24000000]          		pop dword [mem0.start]
  1372 00000EAD 26FF7630                		push dword [es:esi+sc.mem0_end]
  1373 00000EB1 8F05[28000000]          		pop dword [mem0.end]
  1374 00000EB7 26668B460A              		mov ax,[es:esi+sc.serial_port]
  1375 00000EBC 66A3[0F090000]          		mov [serial.port_noinit],ax
  1376                                  
  1377 00000EC2 268B4606                		mov eax,[es:esi+sc.callback]
  1378 00000EC6 6609C0                  		or ax,ax				; check only offset
  1379 00000EC9 7405                    		jz gfx_init_20
  1380 00000ECB A3[B8000000]            		mov [boot.callback],eax
  1381                                  gfx_init_20:
  1382                                  
  1383                                  		; init malloc memory chain
  1384                                  
  1385 00000ED0 FF35[24000000]          		push dword [mem0.start]
  1386 00000ED6 8F05[34000000]          		pop dword [malloc.area]
  1387 00000EDC FF35[28000000]          		push dword [mem0.end]
  1388 00000EE2 8F05[38000000]          		pop dword [malloc.area+4]
  1389                                  
  1390 00000EE8 8B1D[B4000000]          		mov ebx,[boot.sysconfig]
  1391 00000EEE 26807B0440              		cmp byte [es:ebx+sc.sysconfig_size],sc.size_64
  1392 00000EF3 7220                    		jb gfx_init_28
  1393                                  		; pass back feature flags
  1394 00000EF5 2666C7433C0300          		mov word [es:ebx+sc.features],3
  1395                                  		; only one xmem area
  1396 00000EFC 268B4334                		mov eax,[es:ebx+sc.xmem_start]
  1397 00000F00 268B5338                		mov edx,[es:ebx+sc.xmem_end]
  1398 00000F04 39C2                    		cmp edx,eax
  1399 00000F06 760D                    		jbe gfx_init_28
  1400                                  		; ok, use only this one
  1401 00000F08 A3[3C000000]            		mov [malloc.area+8],eax
  1402 00000F0D 8915[40000000]          		mov [malloc.area+8+4],edx
  1403 00000F13 EB3F                    		jmp gfx_init_40
  1404                                  
  1405                                  gfx_init_28:
  1406                                  		; old way to specify extended mem areas
  1407 00000F15 BE[3C000000]            		mov esi,malloc.area+8
  1408 00000F1A B904000000              		mov ecx,malloc.areas-1			; extended mem areas
  1409                                  gfx_init_30:
  1410 00000F1F 260FB74318              		movzx eax,word [es:ebx+sc.xmem_0]	; extended mem area pointer
  1411 00000F24 09C0                    		or eax,eax
  1412 00000F26 742C                    		jz gfx_init_40
  1413 00000F28 89C2                    		mov edx,eax
  1414 00000F2A 80E2F0                  		and dl,~0fh
  1415 00000F2D C1E210                  		shl edx,16
  1416                                  
  1417 00000F30 83E00F                  		and eax,0fh
  1418 00000F33 C1E014                  		shl eax,20
  1419 00000F36 01D0                    		add eax,edx
  1420 00000F38 894604                  		mov [esi+4],eax
  1421                                  
  1422                                  		; magic: if archive was loaded in high memory, exclude it
  1423 00000F3B 3B15[1C000000]          		cmp edx,[archive.start]
  1424 00000F41 7506                    		jnz gfx_init_35
  1425 00000F43 8B15[20000000]          		mov edx,[archive.end]
  1426                                  gfx_init_35:
  1427 00000F49 8916                    		mov [esi],edx
  1428                                  
  1429 00000F4B 83C608                  		add esi,8
  1430 00000F4E 83C302                  		add ebx,2
  1431 00000F51 49                      		dec ecx
  1432 00000F52 75CB                    		jnz gfx_init_30
  1433                                  
  1434                                  gfx_init_40:
  1435 00000F54 E8520B0000              		call malloc_init
  1436                                  
  1437                                  		; setup full pm interface
  1438                                  		; can't do it earlier - we need malloc
  1439 00000F59 E8C46B0000              		call pm_init
  1440                                  
  1441                                  		; allocate 8k local stack
  1442                                  
  1443 00000F5E B800200000              		mov eax,8 << 10
  1444 00000F63 A3[78000000]            		mov [stack.size],eax
  1445 00000F68 83C003                  		add eax,3
  1446 00000F6B E87E0B0000              		call calloc
  1447                                  		; dword align
  1448 00000F70 83C003                  		add eax,3
  1449 00000F73 83E0FC                  		and eax,~3
  1450 00000F76 751E                    		jnz gfx_init_50
  1451 00000F78 3D00001000              		cmp eax,100000h		; must be low memory
  1452 00000F7D 7217                    		jb gfx_init_50
  1453                                  		; malloc failed - keep stack
  1454 00000F7F 66FF35[080A0000]        		push word [rm_seg.ss]
  1455 00000F86 668F05[70000000]        		pop word [local_stack.seg]
  1456 00000F8D 89E0                    		mov eax,esp
  1457 00000F8F A3[6C000000]            		mov [local_stack.ofs],eax
  1458 00000F94 EB1A                    		jmp gfx_init_51
  1459                                  gfx_init_50:
  1460 00000F96 89C2                    		mov edx,eax
  1461 00000F98 83E00F                  		and eax,0fh
  1462 00000F9B 0305[78000000]          		add eax,[stack.size]
  1463 00000FA1 A3[6C000000]            		mov [local_stack.ofs],eax
  1464 00000FA6 C1EA04                  		shr edx,4
  1465 00000FA9 668915[70000000]        		mov [local_stack.seg],dx
  1466                                  
  1467                                  gfx_init_51:
  1468                                  
  1469                                  		; now we really start...
  1470                                  		pm_leave
  1471                              <1> %%j_pm_1:
  1472 00000FB0 E8B56C0000          <1>  call switch_to_rm
  1473                              <1> %%j_pm_2:
  1474                              <1>  %if %%j_pm_2 - %%j_pm_1 != 5
  1475                              <1>  %error "pm_leave: not in 32 bit mode"
  1476                              <1>  %endif
  1477                              <1> 
  1478                              <1>  bits 16
  1479                                  
  1480 00000FB5 FB                      		sti
  1481 00000FB6 E87E6A                  		call use_local_stack
  1482                                  
  1483                                  		pm_enter
  1484                              <1> %%j_pm_1:
  1485 00000FB9 E8266C              <1>  call switch_to_pm
  1486                              <1> %%j_pm_2:
  1487                              <1>  %if %%j_pm_2 - %%j_pm_1 != 3
  1488                              <1>  %error "pm_enter: not in 16 bit mode"
  1489                              <1>  %endif
  1490                              <1> 
  1491                              <1>  bits 32
  1492                                  
  1493 00000FBC BE[A40B0000]            		mov esi,hello
  1494 00000FC1 E8E3130000              		call printf
  1495                                  
  1496                                  		; get initial keyboard state
  1497 00000FC6 2666FF3517040000        		push word [es:417h]
  1498 00000FCE 668F05[E0080000]        		pop word [kbd_status]
  1499                                  
  1500 00000FD5 A1[B4000000]            		mov eax,[boot.sysconfig]
  1501 00000FDA 268A4003                		mov al,[es:eax+sc.failsafe]
  1502 00000FDE A801                    		test al,1
  1503 00000FE0 744C                    		jz gfx_init_58
  1504                                  
  1505 00000FE2 31DB                    		xor ebx,ebx
  1506                                  
  1507                                  gfx_init_55:
  1508                                  		pf_arg_uchar 0,bl
  1509 00000FE4 8325[4F080000]00    <1>  and dword [tmp_write_data + %1 * 4],byte 0
  1510 00000FEB 881D[4F080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  1511 00000FF1 8B04DD[34000000]        		mov eax,[malloc.area+8*ebx]
  1512                                  		pf_arg_uint 1,eax
  1513 00000FF8 A3[53080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  1514 00000FFD 8B04DD[38000000]        		mov eax,[malloc.area+8*ebx+4]
  1515                                  		pf_arg_uint 2,eax
  1516 00001004 A3[57080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  1517                                  
  1518 00001009 09C0                    		or eax,eax
  1519 0000100B 7412                    		jz gfx_init_57
  1520                                  
  1521 0000100D 53                      		push ebx
  1522 0000100E BE[840A0000]            		mov esi,dmsg_02
  1523 00001013 E891130000              		call printf
  1524 00001018 5B                      		pop ebx
  1525                                  
  1526 00001019 43                      		inc ebx
  1527 0000101A 83FB05                  		cmp ebx,malloc.areas
  1528 0000101D 72C5                    		jb gfx_init_55
  1529                                  
  1530                                  gfx_init_57:
  1531                                  
  1532 0000101F BE[680A0000]            		mov esi,dmsg_01
  1533 00001024 E880130000              		call printf
  1534 00001029 E803180000              		call get_key
  1535                                  
  1536                                  gfx_init_58:
  1537                                  
  1538                                  		; alloc memory for palette data
  1539 0000102E E863560000              		call pal_init
  1540 00001033 0F82B6010000            		jc gfx_init_90
  1541                                  
  1542 00001039 B800020000              		mov eax,200h
  1543 0000103E E8AB0A0000              		call calloc
  1544 00001043 83F801                  		cmp eax,1
  1545 00001046 0F82A3010000            		jc gfx_init_90
  1546 0000104C A3[5C000000]            		mov [vbe_buffer],eax
  1547                                  
  1548 00001051 B800010000              		mov eax,100h
  1549 00001056 E8930A0000              		call calloc
  1550 0000105B 83F801                  		cmp eax,1
  1551 0000105E 0F828B010000            		jc gfx_init_90
  1552 00001064 A3[64000000]            		mov [vbe_info_buffer],eax
  1553                                  
  1554 00001069 B800100000              		mov eax,sound_buf_size
  1555 0000106E E87B0A0000              		call calloc
  1556 00001073 83F801                  		cmp eax,1
  1557 00001076 0F8273010000            		jc gfx_init_90
  1558 0000107C A3[39090000]            		mov [sound_buf.lin],eax
  1559 00001081 89C2                    		mov edx,eax
  1560 00001083 83E0F0                  		and eax,~0fh
  1561 00001086 C1E00C                  		shl eax,12
  1562 00001089 83E20F                  		and edx,0fh
  1563 0000108C 6689D0                  		mov ax,dx
  1564 0000108F A3[35090000]            		mov [sound_buf],eax
  1565                                  
  1566                                  		; those must be low memory addresses:
  1567 00001094 A1[61010000]            		mov eax,[gfx_pal_tmp]
  1568 00001099 0B05[5C000000]          		or eax,[vbe_buffer]
  1569 0000109F 0B05[64000000]          		or eax,[vbe_info_buffer]
  1570 000010A5 0B05[39090000]          		or eax,[sound_buf.lin]
  1571 000010AB 3D00001000              		cmp eax,100000h
  1572 000010B0 F5                      		cmc
  1573 000010B1 0F8238010000            		jc gfx_init_90
  1574                                  
  1575 000010B7 E82D090000              		call dict_init
  1576 000010BC 0F822D010000            		jc gfx_init_90
  1577                                  
  1578 000010C2 E890070000              		call stack_init
  1579 000010C7 0F8222010000            		jc gfx_init_90
  1580                                  
  1581 000010CD A1[18000000]            		mov eax,[file.start]
  1582 000010D2 89C6                    		mov esi,eax
  1583 000010D4 26034618                		add eax,[es:esi+fh_code]
  1584 000010D8 A3[7E000000]            		mov [pscode_start],eax
  1585 000010DD 268B461C                		mov eax,[es:esi+fh_code_size]
  1586 000010E1 A3[82000000]            		mov [pscode_size],eax
  1587                                  
  1588                                  		; now the ps interpreter is ready to run
  1589                                  
  1590                                  		; jpg decoding buffer
  1591 000010E6 E8A5640000              		call jpg_setup
  1592 000010EB 0F82FE000000            		jc gfx_init_90
  1593                                  
  1594 000010F1 B800010000              		mov eax,100h
  1595 000010F6 E8F3090000              		call calloc
  1596 000010FB 83F801                  		cmp eax,1
  1597 000010FE 0F82EB000000            		jc gfx_init_90
  1598 00001104 A3[68000000]            		mov [infobox_buffer],eax
  1599                                  
  1600 00001109 B800020000              		mov eax,200h
  1601 0000110E E8DB090000              		call calloc
  1602 00001113 83F801                  		cmp eax,1
  1603 00001116 0F82D3000000            		jc gfx_init_90
  1604 0000111C A3[60000000]            		mov [vbe_mode_list],eax
  1605                                  
  1606 00001121 B800040000              		mov eax,fname.size * 4
  1607 00001126 E8C3090000              		call calloc
  1608 0000112B 83F801                  		cmp eax,1
  1609 0000112E 0F82BB000000            		jc gfx_init_90
  1610 00001134 A3[F8010000]            		mov [fname.tmp],eax
  1611 00001139 0500010000              		add eax,fname.size
  1612 0000113E A3[FC010000]            		mov [fname.abs],eax
  1613 00001143 0500010000              		add eax,fname.size
  1614 00001148 A3[00020000]            		mov [fname.cwd],eax
  1615 0000114D 0500010000              		add eax,fname.size
  1616 00001152 A3[04020000]            		mov [fname.sys_cwd],eax
  1617                                  
  1618                                  		; fill list
  1619 00001157 E8D1110000              		call get_vbe_modes
  1620                                  
  1621                                  		; get console font
  1622 0000115C E8AE4A0000              		call cfont_init
  1623                                  
  1624                                  		; get cwd
  1625 00001161 E8525E0000              		call get_sys_cwd
  1626 00001166 E86F5F0000              		call chdir
  1627                                  		; copy canonical path back to sys_cwd
  1628 0000116B 8B35[00020000]          		mov esi,[fname.cwd]
  1629 00001171 8B3D[04020000]          		mov edi,[fname.sys_cwd]
  1630 00001177 B900010000              		mov ecx,fname.size
  1631 0000117C F326A4                  		es rep movsb
  1632                                  
  1633                                  		; store pointer to fname.cwd in config area
  1634                                  
  1635 0000117F A1[B4000000]            		mov eax,[boot.sysconfig]
  1636 00001184 2680780444              		cmp byte [es:eax+sc.sysconfig_size],sc.size_68
  1637 00001189 720A                    		jb gfx_init_585
  1638 0000118B 8B15[00020000]          		mov edx,[fname.cwd]
  1639 00001191 26895040                		mov [es:eax+sc.cwd],edx
  1640                                  gfx_init_585:
  1641                                  
  1642                                  		; ok, we've done it, now continue the setup
  1643                                  
  1644 00001195 A1[B4000000]            		mov eax,[boot.sysconfig]
  1645 0000119A 268A4003                		mov al,[es:eax+sc.failsafe]
  1646 0000119E A801                    		test al,1
  1647 000011A0 7414                    		jz gfx_init_59
  1648                                  
  1649 000011A2 E8430B0000              		call dump_malloc
  1650 000011A7 BE[680A0000]            		mov esi,dmsg_01
  1651 000011AC E8F8110000              		call printf
  1652 000011B1 E87B160000              		call get_key
  1653                                  
  1654                                  gfx_init_59:
  1655                                  
  1656                                  		; run global code
  1657 000011B6 31C0                    		xor eax,eax
  1658 000011B8 A3[C4000000]            		mov [pstack.ptr],eax
  1659 000011BD A3[D0000000]            		mov [rstack.ptr],eax
  1660 000011C2 E8761A0000              		call run_pscode
  1661 000011C7 7216                    		jc gfx_init_60
  1662                                  
  1663                                  		; check for true/false on stack
  1664                                  		; (empty stack == true)
  1665                                  
  1666 000011C9 31C9                    		xor ecx,ecx
  1667 000011CB E889070000              		call get_pstack_tos
  1668 000011D0 F5                      		cmc
  1669 000011D1 731C                    		jnc gfx_init_90
  1670 000011D3 80FA03                  		cmp dl,t_bool
  1671 000011D6 7511                    		jnz gfx_init_70
  1672 000011D8 83F801                  		cmp eax,1
  1673 000011DB 7412                    		jz gfx_init_90
  1674 000011DD EB0A                    		jmp gfx_init_70
  1675                                  
  1676                                  gfx_init_60:
  1677 000011DF E8B6140000              		call ps_status_info
  1678 000011E4 E848160000              		call get_key
  1679                                  gfx_init_70:
  1680 000011E9 E813000000              		call gfx_done_pm
  1681 000011EE F9                      		stc
  1682                                  
  1683                                  gfx_init_90:
  1684                                  		gfx_leave		; does not return
  1685 000011EF E880050000          <1>  call _gfx_leave
  1686                              <1>  bits 16
  1687                                  
  1688                                  
  1689                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1690                                  ; Finish gfx code.
  1691                                  ;
  1692                                  
  1693                                  		bits 16
  1694                                  
  1695                                  gfx_done:
  1696                                  		gfx_enter
  1697 000011F4 E86305              <1>  call _gfx_enter
  1698                              <1>  bits 32
  1699                                  
  1700 000011F7 E805000000              		call gfx_done_pm
  1701                                  
  1702                                  		gfx_leave		; does not return
  1703 000011FC E873050000          <1>  call _gfx_leave
  1704                              <1>  bits 16
  1705                                  
  1706                                  
  1707                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1708                                  
  1709                                  		bits 32
  1710                                  
  1711                                  gfx_done_pm:
  1712 00001201 E87B5A0000              		call sound_done
  1713                                  
  1714 00001206 803D[E6010000]00        		cmp byte [keep_mode],0
  1715 0000120D 7506                    		jnz gfx_done_pm_90
  1716 0000120F 66B80300                		mov ax,3
  1717 00001213 CD10                    		int 10h
  1718                                  gfx_done_pm_90:
  1719 00001215 C3                      		ret
  1720                                  
  1721                                  
  1722                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1723                                  ; Input a text line.
  1724                                  ;
  1725                                  ; edi		buffer (0: no buffer)
  1726                                  ; ecx		buffer size
  1727                                  ; eax		timeout value (0: no timeout)
  1728                                  ;
  1729                                  ; return:
  1730                                  ;  eax		action (1, 2: textmode, boot)
  1731                                  ;  ebx		selected menu entry (-1: none)
  1732                                  ;
  1733                                  
  1734                                  		bits 16
  1735                                  
  1736                                  gfx_input:
  1737                                  		gfx_enter
  1738 00001216 E84105              <1>  call _gfx_enter
  1739                              <1>  bits 32
  1740                                  
  1741 00001219 57                      		push edi
  1742 0000121A 51                      		push ecx
  1743                                  
  1744 0000121B 803D[A8080000]00        		cmp byte [input_notimeout],0
  1745 00001222 750A                    		jnz gfx_input_10
  1746 00001224 A3[B0080000]            		mov [input_timeout],eax
  1747 00001229 A3[AC080000]            		mov [input_timeout_start],eax
  1748                                  gfx_input_10:
  1749                                  
  1750 0000122E E8EE170000              		call clear_kbd_queue
  1751                                  
  1752                                  gfx_input_20:
  1753 00001233 E81B160000              		call get_key_to
  1754 00001238 8325[B0080000]00        		and dword [input_timeout],0		; disable timeout
  1755                                  
  1756 0000123F 50                      		push eax
  1757 00001240 B900000000              		mov ecx,cb_KeyEvent
  1758 00001245 E82B080000              		call get_dict_entry
  1759 0000124A 59                      		pop ecx
  1760 0000124B 0F82A2000000            		jc gfx_input_90
  1761                                  
  1762 00001251 80FA05                  		cmp dl,t_code
  1763 00001254 F9                      		stc
  1764 00001255 0F8598000000            		jnz gfx_input_90
  1765                                  
  1766 0000125B 50                      		push eax
  1767 0000125C 89C8                    		mov eax,ecx
  1768 0000125E C705[C4000000]0100-     		mov dword [pstack.ptr],1
  1769 00001266 0000               
  1770 00001268 B201                    		mov dl,t_int
  1771 0000126A 31C9                    		xor ecx,ecx
  1772 0000126C E8FD060000              		call set_pstack_tos
  1773 00001271 C705[D0000000]0100-     		mov dword [rstack.ptr],1
  1774 00001279 0000               
  1775 0000127B 31C9                    		xor ecx,ecx
  1776 0000127D B205                    		mov dl,t_code
  1777 0000127F F9                      		stc
  1778 00001280 19C0                    		sbb eax,eax
  1779 00001282 E84B070000              		call set_rstack_tos
  1780 00001287 58                      		pop eax
  1781                                  
  1782 00001288 E8B0190000              		call run_pscode
  1783 0000128D 730D                    		jnc gfx_input_50
  1784                                  
  1785 0000128F E806140000              		call ps_status_info
  1786 00001294 E898150000              		call get_key
  1787 00001299 F9                      		stc
  1788 0000129A EB57                    		jmp gfx_input_90
  1789                                  
  1790                                  gfx_input_50:
  1791 0000129C B902000000              		mov ecx,2
  1792 000012A1 E8B3060000              		call get_pstack_tos
  1793 000012A6 724B                    		jc gfx_input_90
  1794 000012A8 80FA04                  		cmp dl,t_string
  1795 000012AB F9                      		stc
  1796 000012AC 7545                    		jnz gfx_input_90
  1797                                  
  1798 000012AE 59                      		pop ecx
  1799 000012AF 5F                      		pop edi
  1800 000012B0 57                      		push edi
  1801 000012B1 51                      		push ecx
  1802                                  
  1803 000012B2 09FF                    		or edi,edi
  1804 000012B4 7412                    		jz gfx_input_70
  1805 000012B6 09C9                    		or ecx,ecx
  1806 000012B8 740E                    		jz gfx_input_70
  1807                                  
  1808 000012BA 89C6                    		mov esi,eax
  1809                                  gfx_input_60:
  1810 000012BC 26AC                    		es lodsb
  1811 000012BE AA                      		stosb
  1812 000012BF 08C0                    		or al,al
  1813 000012C1 E0F9                    		loopnz gfx_input_60
  1814 000012C3 26C647FF00              		mov byte [es:edi-1],0
  1815                                  
  1816                                  gfx_input_70:
  1817 000012C8 B901000000              		mov ecx,1
  1818 000012CD E887060000              		call get_pstack_tos
  1819 000012D2 721F                    		jc gfx_input_90
  1820 000012D4 80FA01                  		cmp dl,t_int
  1821 000012D7 F9                      		stc
  1822 000012D8 7519                    		jnz gfx_input_90
  1823                                  
  1824 000012DA 31C9                    		xor ecx,ecx
  1825 000012DC 50                      		push eax
  1826 000012DD E877060000              		call get_pstack_tos
  1827 000012E2 5B                      		pop ebx
  1828 000012E3 720E                    		jc gfx_input_90
  1829 000012E5 80FA01                  		cmp dl,t_int
  1830 000012E8 F9                      		stc
  1831 000012E9 7508                    		jnz gfx_input_90
  1832                                  
  1833 000012EB 09C0                    		or eax,eax
  1834 000012ED 0F8440FFFFFF            		jz gfx_input_20
  1835                                  
  1836                                  gfx_input_90:
  1837                                  
  1838 000012F3 59                      		pop ecx
  1839 000012F4 5F                      		pop edi
  1840                                  
  1841                                  		gfx_leave		; does not return
  1842 000012F5 E87A040000          <1>  call _gfx_leave
  1843                              <1>  bits 16
  1844                                  
  1845                                  
  1846                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1847                                  ; Setup boot menu entries.
  1848                                  ;
  1849                                  ; esi		menu description
  1850                                  ;
  1851                                  
  1852                                  		bits 16
  1853                                  
  1854                                  gfx_menu_init:
  1855                                  		gfx_enter
  1856 000012FA E85D04              <1>  call _gfx_enter
  1857                              <1>  bits 32
  1858                                  
  1859 000012FD 56                      		push esi
  1860 000012FE 260FB706                		movzx eax,word [es:esi+menu_entries]
  1861 00001302 50                      		push eax
  1862 00001303 8D448002                		lea eax,[eax+4*eax+2]
  1863 00001307 50                      		push eax
  1864 00001308 E8E1070000              		call calloc
  1865 0000130D A3[A8090000]            		mov [tmp_var_2],eax
  1866 00001312 58                      		pop eax
  1867 00001313 E8D6070000              		call calloc
  1868 00001318 A3[A4090000]            		mov [tmp_var_1],eax
  1869 0000131D 59                      		pop ecx
  1870 0000131E 5E                      		pop esi
  1871 0000131F 09C0                    		or eax,eax
  1872 00001321 0F8425010000            		jz gfx_menu_init_90
  1873 00001327 833D[A8090000]00        		cmp dword [tmp_var_2],0
  1874 0000132E 0F8418010000            		jz gfx_menu_init_90
  1875                                  
  1876 00001334 51                      		push ecx
  1877                                  
  1878 00001335 8B1D[A4090000]          		mov ebx,[tmp_var_1]
  1879 0000133B 2666890B                		mov [es:ebx],cx
  1880 0000133F 83C302                  		add ebx,2
  1881 00001342 260FB74606              		movzx eax,word [es:esi+menu_ent_list]
  1882 00001347 260FB77E08              		movzx edi,word [es:esi+menu_ent_list+2]
  1883 0000134C C1E704                  		shl edi,4
  1884 0000134F 01C7                    		add edi,eax
  1885 00001351 81FE00001000            		cmp esi,1 << 20
  1886 00001357 7204                    		jb .low_mem
  1887 00001359 268B7E06                		mov edi,[es:esi+menu_ent_list]
  1888                                  .low_mem:
  1889 0000135D 09C9                    		or ecx,ecx
  1890 0000135F 7414                    		jz gfx_menu_init_45
  1891                                  gfx_menu_init_40:
  1892 00001361 26C60304                		mov byte [es:ebx],t_string
  1893 00001365 26897B01                		mov [es:ebx+1],edi
  1894 00001369 83C305                  		add ebx,5
  1895 0000136C 260FB7460A              		movzx eax,word [es:esi+menu_ent_size]
  1896 00001371 01C7                    		add edi,eax
  1897 00001373 E2EC                    		loop gfx_menu_init_40
  1898                                  gfx_menu_init_45:
  1899                                  
  1900 00001375 59                      		pop ecx
  1901                                  
  1902 00001376 8B1D[A8090000]          		mov ebx,[tmp_var_2]
  1903 0000137C 2666890B                		mov [es:ebx],cx
  1904 00001380 83C302                  		add ebx,2
  1905                                  
  1906 00001383 260FB7460C              		movzx eax,word [es:esi+menu_arg_list]
  1907 00001388 260FB77E0E              		movzx edi,word [es:esi+menu_arg_list+2]
  1908 0000138D C1E704                  		shl edi,4
  1909 00001390 01C7                    		add edi,eax
  1910 00001392 81FE00001000            		cmp esi,1 << 20
  1911 00001398 7204                    		jb .low_mem
  1912 0000139A 268B7E0C                		mov edi,[es:esi+menu_arg_list]
  1913                                  .low_mem:
  1914 0000139E 09C9                    		or ecx,ecx
  1915 000013A0 7414                    		jz gfx_menu_init_55
  1916                                  gfx_menu_init_50:
  1917 000013A2 26C60304                		mov byte [es:ebx],t_string
  1918 000013A6 26897B01                		mov [es:ebx+1],edi
  1919 000013AA 83C305                  		add ebx,5
  1920 000013AD 260FB74610              		movzx eax,word [es:esi+menu_arg_size]
  1921 000013B2 01C7                    		add edi,eax
  1922 000013B4 E2EC                    		loop gfx_menu_init_50
  1923                                  gfx_menu_init_55:
  1924                                  
  1925 000013B6 260FB74602              		movzx eax,word [es:esi+menu_default]
  1926 000013BB 260FB77E04              		movzx edi,word [es:esi+menu_default+2]
  1927 000013C0 C1E704                  		shl edi,4
  1928 000013C3 01F8                    		add eax,edi
  1929 000013C5 81FE00001000            		cmp esi,1 << 20
  1930 000013CB 7204                    		jb .low_mem
  1931 000013CD 268B4602                		mov eax,[es:esi+menu_default]
  1932                                  .low_mem:
  1933 000013D1 A3[AC090000]            		mov [tmp_var_3],eax
  1934                                  
  1935 000013D6 B901000000              		mov ecx,cb_MenuInit
  1936 000013DB E895060000              		call get_dict_entry
  1937 000013E0 726A                    		jc gfx_menu_init_90
  1938                                  
  1939 000013E2 80FA05                  		cmp dl,t_code
  1940 000013E5 F9                      		stc
  1941 000013E6 7564                    		jnz gfx_menu_init_90
  1942                                  
  1943 000013E8 50                      		push eax
  1944                                  
  1945 000013E9 C705[C4000000]0300-     		mov dword [pstack.ptr],3
  1946 000013F1 0000               
  1947                                  
  1948 000013F3 A1[A4090000]            		mov eax,[tmp_var_1]
  1949 000013F8 B20A                    		mov dl,t_array
  1950 000013FA B902000000              		mov ecx,2
  1951 000013FF E86A050000              		call set_pstack_tos
  1952                                  
  1953 00001404 A1[A8090000]            		mov eax,[tmp_var_2]
  1954 00001409 B20A                    		mov dl,t_array
  1955 0000140B B901000000              		mov ecx,1
  1956 00001410 E859050000              		call set_pstack_tos
  1957                                  
  1958 00001415 A1[AC090000]            		mov eax,[tmp_var_3]
  1959 0000141A B204                    		mov dl,t_string
  1960 0000141C 31C9                    		xor ecx,ecx
  1961 0000141E E84B050000              		call set_pstack_tos
  1962                                  
  1963 00001423 C705[D0000000]0100-     		mov dword [rstack.ptr],1
  1964 0000142B 0000               
  1965 0000142D 31C9                    		xor ecx,ecx
  1966 0000142F B205                    		mov dl,t_code
  1967 00001431 F9                      		stc
  1968 00001432 19C0                    		sbb eax,eax
  1969 00001434 E899050000              		call set_rstack_tos
  1970                                  
  1971 00001439 58                      		pop eax
  1972                                  
  1973 0000143A E8FE170000              		call run_pscode
  1974 0000143F 730B                    		jnc gfx_menu_init_90
  1975                                  
  1976 00001441 E854120000              		call ps_status_info
  1977 00001446 E8E6130000              		call get_key
  1978 0000144B F9                      		stc
  1979                                  
  1980                                  gfx_menu_init_90:
  1981                                  
  1982                                  		gfx_leave		; does not return
  1983 0000144C E823030000          <1>  call _gfx_leave
  1984                              <1>  bits 16
  1985                                  
  1986                                  
  1987                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  1988                                  ; Show info box.
  1989                                  ;
  1990                                  ; esi		info text 1
  1991                                  ; edi		info text 2	(0: no text 2)
  1992                                  ; al		0/1	info/error
  1993                                  ;
  1994                                  
  1995                                  		bits 16
  1996                                  
  1997                                  gfx_infobox_init:
  1998                                  		gfx_enter
  1999 00001451 E80603              <1>  call _gfx_enter
  2000                              <1>  bits 32
  2001                                  
  2002 00001454 50                      		push eax
  2003                                  
  2004 00001455 B9FF000000              		mov ecx,100h-1
  2005 0000145A 8B1D[68000000]          		mov ebx,[infobox_buffer]
  2006                                  
  2007 00001460 09F6                    		or esi,esi
  2008 00001462 7503                    		jnz gfx_infobox_init_20
  2009 00001464 43                      		inc ebx
  2010 00001465 EB20                    		jmp gfx_infobox_init_40
  2011                                  gfx_infobox_init_20:
  2012 00001467 26AC                    		es lodsb
  2013 00001469 268803                  		mov [es:ebx],al
  2014 0000146C 43                      		inc ebx
  2015 0000146D 08C0                    		or al,al
  2016 0000146F E0F6                    		loopnz gfx_infobox_init_20
  2017 00001471 09C9                    		or ecx,ecx
  2018 00001473 7412                    		jz gfx_infobox_init_40
  2019                                  
  2020 00001475 89FE                    		mov esi,edi
  2021 00001477 09F6                    		or esi,esi
  2022 00001479 740C                    		jz gfx_infobox_init_40
  2023 0000147B 41                      		inc ecx
  2024 0000147C 4B                      		dec ebx
  2025                                  gfx_infobox_init_25:
  2026 0000147D 26AC                    		es lodsb
  2027 0000147F 268803                  		mov [es:ebx],al
  2028 00001482 43                      		inc ebx
  2029 00001483 08C0                    		or al,al
  2030 00001485 E0F6                    		loopnz gfx_infobox_init_25
  2031                                  gfx_infobox_init_40:
  2032 00001487 26C643FF00              		mov byte [es:ebx-1],0
  2033                                  
  2034 0000148C B902000000              		mov ecx,cb_InfoBoxInit
  2035 00001491 E8DF050000              		call get_dict_entry
  2036                                  
  2037 00001496 5B                      		pop ebx
  2038                                  
  2039 00001497 7257                    		jc gfx_infobox_init_90
  2040                                  
  2041 00001499 80FA05                  		cmp dl,t_code
  2042 0000149C F9                      		stc
  2043 0000149D 7551                    		jnz gfx_infobox_init_90
  2044                                  
  2045 0000149F 50                      		push eax
  2046                                  
  2047 000014A0 C705[C4000000]0200-     		mov dword [pstack.ptr],2
  2048 000014A8 0000               
  2049                                  
  2050 000014AA 0FB6C3                  		movzx eax,bl
  2051 000014AD B201                    		mov dl,t_int
  2052 000014AF 31C9                    		xor ecx,ecx
  2053 000014B1 E8B8040000              		call set_pstack_tos
  2054                                  
  2055 000014B6 A1[68000000]            		mov eax,[infobox_buffer]
  2056 000014BB B204                    		mov dl,t_string
  2057 000014BD B901000000              		mov ecx,1
  2058 000014C2 E8A7040000              		call set_pstack_tos
  2059                                  
  2060 000014C7 C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2061 000014CF 0000               
  2062 000014D1 31C9                    		xor ecx,ecx
  2063 000014D3 B205                    		mov dl,t_code
  2064 000014D5 F9                      		stc
  2065 000014D6 19C0                    		sbb eax,eax
  2066 000014D8 E8F5040000              		call set_rstack_tos
  2067                                  
  2068 000014DD 58                      		pop eax
  2069 000014DE E85A170000              		call run_pscode
  2070 000014E3 730B                    		jnc gfx_infobox_init_90
  2071                                  
  2072 000014E5 E8B0110000              		call ps_status_info
  2073 000014EA E842130000              		call get_key
  2074 000014EF F9                      		stc
  2075                                  
  2076                                  gfx_infobox_init_90:
  2077                                  
  2078                                  		gfx_leave		; does not return
  2079 000014F0 E87F020000          <1>  call _gfx_leave
  2080                              <1>  bits 16
  2081                                  
  2082                                  
  2083                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2084                                  ; Close info box.
  2085                                  ;
  2086                                  
  2087                                  		bits 16
  2088                                  
  2089                                  gfx_infobox_done:
  2090                                  		gfx_enter
  2091 000014F5 E86202              <1>  call _gfx_enter
  2092                              <1>  bits 32
  2093                                  
  2094 000014F8 B903000000              		mov ecx,cb_InfoBoxDone
  2095 000014FD E873050000              		call get_dict_entry
  2096 00001502 723A                    		jc gfx_infobox_done_90
  2097                                  
  2098 00001504 80FA05                  		cmp dl,t_code
  2099 00001507 F9                      		stc
  2100 00001508 7534                    		jnz gfx_infobox_done_90
  2101                                  
  2102 0000150A 50                      		push eax
  2103 0000150B C705[C4000000]0000-     		mov dword [pstack.ptr],0
  2104 00001513 0000               
  2105 00001515 C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2106 0000151D 0000               
  2107 0000151F 31C9                    		xor ecx,ecx
  2108 00001521 B205                    		mov dl,t_code
  2109 00001523 F9                      		stc
  2110 00001524 19C0                    		sbb eax,eax
  2111 00001526 E8A7040000              		call set_rstack_tos
  2112                                  
  2113 0000152B 58                      		pop eax
  2114 0000152C E80C170000              		call run_pscode
  2115 00001531 730B                    		jnc gfx_infobox_done_90
  2116                                  
  2117 00001533 E862110000              		call ps_status_info
  2118 00001538 E8F4120000              		call get_key
  2119 0000153D F9                      		stc
  2120                                  
  2121                                  gfx_infobox_done_90:
  2122                                  
  2123                                  		gfx_leave		; does not return
  2124 0000153E E831020000          <1>  call _gfx_leave
  2125                              <1>  bits 16
  2126                                  
  2127                                  
  2128                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2129                                  ; Setup progress bar window.
  2130                                  ;
  2131                                  ; eax		max
  2132                                  ; esi		kernel name
  2133                                  ;
  2134                                  
  2135                                  		bits 16
  2136                                  
  2137                                  gfx_progress_init:
  2138                                  		gfx_enter
  2139 00001543 E81402              <1>  call _gfx_enter
  2140                              <1>  bits 32
  2141                                  
  2142 00001546 A3[B4080000]            		mov [progress_max],eax
  2143 0000154B 8325[B8080000]00        		and dword [progress_current],0
  2144                                  
  2145 00001552 B904000000              		mov ecx,cb_ProgressInit
  2146 00001557 56                      		push esi
  2147 00001558 E818050000              		call get_dict_entry
  2148 0000155D 5E                      		pop esi
  2149 0000155E 7245                    		jc gfx_progress_init_90
  2150                                  
  2151 00001560 80FA05                  		cmp dl,t_code
  2152 00001563 F9                      		stc
  2153 00001564 753F                    		jnz gfx_progress_init_90
  2154                                  
  2155 00001566 50                      		push eax
  2156 00001567 C705[C4000000]0100-     		mov dword [pstack.ptr],1
  2157 0000156F 0000               
  2158                                  
  2159 00001571 89F0                    		mov eax,esi
  2160 00001573 B204                    		mov dl,t_string
  2161 00001575 31C9                    		xor ecx,ecx
  2162 00001577 E8F2030000              		call set_pstack_tos
  2163                                  
  2164 0000157C C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2165 00001584 0000               
  2166 00001586 31C9                    		xor ecx,ecx
  2167 00001588 B205                    		mov dl,t_code
  2168 0000158A F9                      		stc
  2169 0000158B 19C0                    		sbb eax,eax
  2170 0000158D E840040000              		call set_rstack_tos
  2171                                  
  2172 00001592 58                      		pop eax
  2173 00001593 E8A5160000              		call run_pscode
  2174 00001598 730B                    		jnc gfx_progress_init_90
  2175                                  
  2176 0000159A E8FB100000              		call ps_status_info
  2177 0000159F E88D120000              		call get_key
  2178 000015A4 F9                      		stc
  2179                                  
  2180                                  gfx_progress_init_90:
  2181                                  
  2182                                  		gfx_leave		; does not return
  2183 000015A5 E8CA010000          <1>  call _gfx_leave
  2184                              <1>  bits 16
  2185                                  
  2186                                  
  2187                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2188                                  ; Close progress bar window.
  2189                                  ;
  2190                                  
  2191                                  		bits 16
  2192                                  
  2193                                  gfx_progress_done:
  2194                                  		gfx_enter
  2195 000015AA E8AD01              <1>  call _gfx_enter
  2196                              <1>  bits 32
  2197                                  
  2198 000015AD B905000000              		mov ecx,cb_ProgressDone
  2199 000015B2 E8BE040000              		call get_dict_entry
  2200 000015B7 723A                    		jc gfx_progress_done_90
  2201                                  
  2202 000015B9 80FA05                  		cmp dl,t_code
  2203 000015BC F9                      		stc
  2204 000015BD 7534                    		jnz gfx_progress_done_90
  2205                                  
  2206 000015BF 50                      		push eax
  2207 000015C0 C705[C4000000]0000-     		mov dword [pstack.ptr],0
  2208 000015C8 0000               
  2209 000015CA C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2210 000015D2 0000               
  2211 000015D4 31C9                    		xor ecx,ecx
  2212 000015D6 B205                    		mov dl,t_code
  2213 000015D8 F9                      		stc
  2214 000015D9 19C0                    		sbb eax,eax
  2215 000015DB E8F2030000              		call set_rstack_tos
  2216                                  
  2217 000015E0 58                      		pop eax
  2218 000015E1 E857160000              		call run_pscode
  2219 000015E6 730B                    		jnc gfx_progress_done_90
  2220                                  
  2221 000015E8 E8AD100000              		call ps_status_info
  2222 000015ED E83F120000              		call get_key
  2223 000015F2 F9                      		stc
  2224                                  
  2225                                  gfx_progress_done_90:
  2226                                  
  2227                                  		gfx_leave		; does not return
  2228 000015F3 E87C010000          <1>  call _gfx_leave
  2229                              <1>  bits 16
  2230                                  
  2231                                  
  2232                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2233                                  ; Advance progress bar.
  2234                                  ;
  2235                                  
  2236                                  		bits 16
  2237                                  
  2238                                  gfx_progress_update:
  2239                                  		gfx_enter
  2240 000015F8 E85F01              <1>  call _gfx_enter
  2241                              <1>  bits 32
  2242                                  
  2243 000015FB 0105[B8080000]          		add [progress_current],eax
  2244                                  
  2245 00001601 B906000000              		mov ecx,cb_ProgressUpdate
  2246 00001606 E86A040000              		call get_dict_entry
  2247 0000160B 7259                    		jc gfx_progress_update_90
  2248                                  
  2249 0000160D 80FA05                  		cmp dl,t_code
  2250 00001610 F9                      		stc
  2251 00001611 7553                    		jnz gfx_progress_update_90
  2252                                  
  2253 00001613 50                      		push eax
  2254 00001614 C705[C4000000]0200-     		mov dword [pstack.ptr],2
  2255 0000161C 0000               
  2256                                  
  2257 0000161E A1[B8080000]            		mov eax,[progress_current]
  2258 00001623 B201                    		mov dl,t_int
  2259 00001625 31C9                    		xor ecx,ecx
  2260 00001627 E842030000              		call set_pstack_tos
  2261                                  
  2262 0000162C A1[B4080000]            		mov eax,[progress_max]
  2263 00001631 B201                    		mov dl,t_int
  2264 00001633 B901000000              		mov ecx,1
  2265 00001638 E831030000              		call set_pstack_tos
  2266                                  
  2267 0000163D C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2268 00001645 0000               
  2269 00001647 31C9                    		xor ecx,ecx
  2270 00001649 B205                    		mov dl,t_code
  2271 0000164B F9                      		stc
  2272 0000164C 19C0                    		sbb eax,eax
  2273 0000164E E87F030000              		call set_rstack_tos
  2274                                  
  2275 00001653 58                      		pop eax
  2276 00001654 E8E4150000              		call run_pscode
  2277 00001659 730B                    		jnc gfx_progress_update_90
  2278                                  
  2279 0000165B E83A100000              		call ps_status_info
  2280 00001660 E8CC110000              		call get_key
  2281 00001665 F9                      		stc
  2282                                  
  2283                                  gfx_progress_update_90:
  2284                                  
  2285                                  		gfx_leave		; does not return
  2286 00001666 E809010000          <1>  call _gfx_leave
  2287                              <1>  bits 16
  2288                                  
  2289                                  
  2290                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2291                                  ; Set progress bar values.
  2292                                  ;
  2293                                  
  2294                                  		bits 16
  2295                                  
  2296                                  gfx_progress_limit:
  2297                                  		gfx_enter
  2298 0000166B E8EC00              <1>  call _gfx_enter
  2299                              <1>  bits 32
  2300                                  
  2301 0000166E A3[B4080000]            		mov [progress_max],eax
  2302 00001673 8915[B8080000]          		mov [progress_current],edx
  2303                                  
  2304                                  		gfx_leave		; does not return
  2305 00001679 E8F6000000          <1>  call _gfx_leave
  2306                              <1>  bits 16
  2307                                  
  2308                                  
  2309                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2310                                  ; Setup password window.
  2311                                  ;
  2312                                  ; esi		password
  2313                                  ; edi		image name
  2314                                  ;
  2315                                  
  2316                                  		bits 16
  2317                                  
  2318                                  gfx_password_init:
  2319                                  		gfx_enter
  2320 0000167E E8D900              <1>  call _gfx_enter
  2321                              <1>  bits 32
  2322                                  
  2323 00001681 B907000000              		mov ecx,cb_PasswordInit
  2324 00001686 56                      		push esi
  2325 00001687 57                      		push edi
  2326 00001688 E8E8030000              		call get_dict_entry
  2327 0000168D 5F                      		pop edi
  2328 0000168E 5E                      		pop esi
  2329 0000168F 7255                    		jc gfx_password_init_90
  2330                                  
  2331 00001691 80FA05                  		cmp dl,t_code
  2332 00001694 F9                      		stc
  2333 00001695 754F                    		jnz gfx_password_init_90
  2334                                  
  2335 00001697 50                      		push eax
  2336                                  
  2337 00001698 C705[C4000000]0200-     		mov dword [pstack.ptr],2
  2338 000016A0 0000               
  2339                                  
  2340 000016A2 89F0                    		mov eax,esi
  2341 000016A4 B204                    		mov dl,t_string
  2342 000016A6 31C9                    		xor ecx,ecx
  2343 000016A8 57                      		push edi
  2344 000016A9 E8C0020000              		call set_pstack_tos
  2345 000016AE 5F                      		pop edi
  2346                                  
  2347 000016AF 89F8                    		mov eax,edi
  2348 000016B1 B204                    		mov dl,t_string
  2349 000016B3 B901000000              		mov ecx,1
  2350 000016B8 E8B1020000              		call set_pstack_tos
  2351                                  
  2352 000016BD C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2353 000016C5 0000               
  2354 000016C7 31C9                    		xor ecx,ecx
  2355 000016C9 B205                    		mov dl,t_code
  2356 000016CB F9                      		stc
  2357 000016CC 19C0                    		sbb eax,eax
  2358 000016CE E8FF020000              		call set_rstack_tos
  2359                                  
  2360 000016D3 58                      		pop eax
  2361 000016D4 E864150000              		call run_pscode
  2362 000016D9 730B                    		jnc gfx_password_init_90
  2363                                  
  2364                                  gfx_password_init_80:
  2365 000016DB E8BA0F0000              		call ps_status_info
  2366 000016E0 E84C110000              		call get_key
  2367 000016E5 F9                      		stc
  2368                                  
  2369                                  gfx_password_init_90:
  2370                                  
  2371                                  		gfx_leave		; does not return
  2372 000016E6 E889000000          <1>  call _gfx_leave
  2373                              <1>  bits 16
  2374                                  
  2375                                  
  2376                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2377                                  ; Close password window.
  2378                                  ;
  2379                                  ; esi		password
  2380                                  ;
  2381                                  
  2382                                  		bits 16
  2383                                  
  2384                                  gfx_password_done:
  2385                                  		gfx_enter
  2386 000016EB E86C00              <1>  call _gfx_enter
  2387                              <1>  bits 32
  2388                                  
  2389 000016EE B908000000              		mov ecx,cb_PasswordDone
  2390 000016F3 56                      		push esi
  2391 000016F4 E87C030000              		call get_dict_entry
  2392 000016F9 5E                      		pop esi
  2393 000016FA 7259                    		jc gfx_password_done_90
  2394                                  
  2395 000016FC 80FA05                  		cmp dl,t_code
  2396 000016FF F9                      		stc
  2397 00001700 7553                    		jnz gfx_password_done_90
  2398                                  
  2399 00001702 50                      		push eax
  2400                                  
  2401 00001703 C705[C4000000]0100-     		mov dword [pstack.ptr],1
  2402 0000170B 0000               
  2403                                  
  2404 0000170D 89F0                    		mov eax,esi
  2405 0000170F B204                    		mov dl,t_string
  2406 00001711 31C9                    		xor ecx,ecx
  2407 00001713 E856020000              		call set_pstack_tos
  2408                                  
  2409 00001718 C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2410 00001720 0000               
  2411 00001722 31C9                    		xor ecx,ecx
  2412 00001724 B205                    		mov dl,t_code
  2413 00001726 F9                      		stc
  2414 00001727 19C0                    		sbb eax,eax
  2415 00001729 E8A4020000              		call set_rstack_tos
  2416                                  
  2417 0000172E 58                      		pop eax
  2418 0000172F E809150000              		call run_pscode
  2419 00001734 7214                    		jc gfx_password_done_80
  2420                                  
  2421 00001736 31C9                    		xor ecx,ecx
  2422 00001738 E81C020000              		call get_pstack_tos
  2423 0000173D 7216                    		jc gfx_password_done_90
  2424 0000173F 80FA03                  		cmp dl,t_bool
  2425 00001742 F9                      		stc
  2426 00001743 7510                    		jnz gfx_password_done_90
  2427                                  
  2428 00001745 83F801                  		cmp eax,1
  2429 00001748 EB0B                    		jmp gfx_password_done_90
  2430                                  
  2431                                  gfx_password_done_80:
  2432 0000174A E84B0F0000              		call ps_status_info
  2433 0000174F E8DD100000              		call get_key
  2434 00001754 F9                      		stc
  2435                                  
  2436                                  gfx_password_done_90:
  2437                                  
  2438                                  		gfx_leave		; does not return
  2439 00001755 E81A000000          <1>  call _gfx_leave
  2440                              <1>  bits 16
  2441                                  
  2442                                  
  2443                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2444                                  ; Save segment regs, use our own stack, and switch to pm.
  2445                                  ;
  2446                                  
  2447                                  		bits 16
  2448                                  
  2449                                  _gfx_enter:
  2450 0000175A 2E8F06[A009]            		pop word [cs:tmp_var_0]
  2451                                  
  2452 0000175F 0FA0                    		push fs
  2453 00001761 06                      		push es
  2454 00001762 1E                      		push ds
  2455                                  
  2456 00001763 0E                      		push cs
  2457 00001764 1F                      		pop ds
  2458 00001765 FC                      		cld
  2459                                  
  2460                                  		; better explicitly turn on ints
  2461 00001766 FB                      		sti
  2462                                  
  2463 00001767 E8CD62                  		call use_local_stack
  2464                                  
  2465                                  		pm_enter
  2466                              <1> %%j_pm_1:
  2467 0000176A E87564              <1>  call switch_to_pm
  2468                              <1> %%j_pm_2:
  2469                              <1>  %if %%j_pm_2 - %%j_pm_1 != 3
  2470                              <1>  %error "pm_enter: not in 16 bit mode"
  2471                              <1>  %endif
  2472                              <1> 
  2473                              <1>  bits 32
  2474                                  
  2475 0000176D 66FF25[A0090000]        		jmp word [tmp_var_0]
  2476                                  
  2477                                  
  2478                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2479                                  ; Switch to rm, switch back to boot loader stack, restore segment regs and leave.
  2480                                  ;
  2481                                  ; Note: function does not return.
  2482                                  ;
  2483                                  
  2484                                  		bits 32
  2485                                  
  2486                                  _gfx_leave:
  2487                                  		pm_leave
  2488                              <1> %%j_pm_1:
  2489 00001774 E8F1640000          <1>  call switch_to_rm
  2490                              <1> %%j_pm_2:
  2491                              <1>  %if %%j_pm_2 - %%j_pm_1 != 5
  2492                              <1>  %error "pm_leave: not in 32 bit mode"
  2493                              <1>  %endif
  2494                              <1> 
  2495                              <1>  bits 16
  2496                                  
  2497 00001779 E8D262                  		call use_old_stack
  2498                                  
  2499 0000177C 1F                      		pop ds
  2500 0000177D 07                      		pop es
  2501 0000177E 0FA1                    		pop fs
  2502 00001780 CB                      		retf
  2503                                  
  2504                                  
  2505                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2506                                  ; Run boot loader function.
  2507                                  ;
  2508                                  ; al		function number
  2509                                  ;
  2510                                  ; return:
  2511                                  ;  al		error code (0 = ok)
  2512                                  ;
  2513                                  
  2514                                  		bits 32
  2515                                  
  2516                                  gfx_cb:
  2517 00001781 833D[B8000000]00        		cmp dword [boot.callback],0
  2518 00001788 7410                    		jz gfx_cb_80
  2519                                  		pm_leave
  2520                              <1> %%j_pm_1:
  2521 0000178A E8DB640000          <1>  call switch_to_rm
  2522                              <1> %%j_pm_2:
  2523                              <1>  %if %%j_pm_2 - %%j_pm_1 != 5
  2524                              <1>  %error "pm_leave: not in 32 bit mode"
  2525                              <1>  %endif
  2526                              <1> 
  2527                              <1>  bits 16
  2528 0000178F 1E                      		push ds
  2529 00001790 FF1E[B800]              		call far [boot.callback]
  2530 00001794 1F                      		pop ds
  2531                                  		pm_enter
  2532                              <1> %%j_pm_1:
  2533 00001795 E84A64              <1>  call switch_to_pm
  2534                              <1> %%j_pm_2:
  2535                              <1>  %if %%j_pm_2 - %%j_pm_1 != 3
  2536                              <1>  %error "pm_enter: not in 16 bit mode"
  2537                              <1>  %endif
  2538                              <1> 
  2539                              <1>  bits 32
  2540 00001798 EB02                    		jmp gfx_cb_90
  2541                                  gfx_cb_80:
  2542 0000179A B0FF                    		mov al,0ffh
  2543                                  gfx_cb_90:
  2544 0000179C C3                      		ret
  2545                                  
  2546                                  
  2547                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2548                                  ;
  2549                                  ; Internal functions.
  2550                                  ;
  2551                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2552                                  
  2553                                  
  2554                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2555                                  ;
  2556                                  
  2557                                  		bits 32
  2558                                  
  2559                                  timeout:
  2560 0000179D B909000000              		mov ecx,cb_Timeout
  2561 000017A2 E8CE020000              		call get_dict_entry
  2562 000017A7 7259                    		jc timeout_90
  2563                                  
  2564 000017A9 80FA05                  		cmp dl,t_code
  2565 000017AC F9                      		stc
  2566 000017AD 7553                    		jnz timeout_90
  2567                                  
  2568 000017AF 50                      		push eax
  2569 000017B0 C705[C4000000]0200-     		mov dword [pstack.ptr],2
  2570 000017B8 0000               
  2571                                  
  2572 000017BA B901000000              		mov ecx,1
  2573 000017BF B201                    		mov dl,t_int
  2574 000017C1 A1[AC080000]            		mov eax,[input_timeout_start]
  2575 000017C6 E8A3010000              		call set_pstack_tos
  2576                                  
  2577 000017CB 31C9                    		xor ecx,ecx
  2578 000017CD B201                    		mov dl,t_int
  2579 000017CF A1[B0080000]            		mov eax,[input_timeout]
  2580 000017D4 E895010000              		call set_pstack_tos
  2581                                  
  2582 000017D9 C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2583 000017E1 0000               
  2584 000017E3 31C9                    		xor ecx,ecx
  2585 000017E5 B205                    		mov dl,t_code
  2586 000017E7 F9                      		stc
  2587 000017E8 19C0                    		sbb eax,eax
  2588 000017EA E8E3010000              		call set_rstack_tos
  2589                                  
  2590 000017EF 58                      		pop eax
  2591 000017F0 E848140000              		call run_pscode
  2592 000017F5 730B                    		jnc timeout_90
  2593                                  
  2594 000017F7 E89E0E0000              		call ps_status_info
  2595 000017FC E830100000              		call get_key
  2596 00001801 F9                      		stc
  2597                                  
  2598                                  timeout_90:
  2599 00001802 C3                      		ret
  2600                                  
  2601                                  
  2602                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2603                                  ; Run 'Timer' callback function.
  2604                                  ;
  2605                                  ; eax		time
  2606                                  ;
  2607                                  
  2608                                  		bits 32
  2609                                  
  2610                                  timer:
  2611 00001803 B90A000000              		mov ecx,cb_Timer
  2612 00001808 50                      		push eax
  2613 00001809 E867020000              		call get_dict_entry
  2614 0000180E 5B                      		pop ebx
  2615 0000180F 7245                    		jc timer_90
  2616                                  
  2617 00001811 80FA05                  		cmp dl,t_code
  2618 00001814 F9                      		stc
  2619 00001815 753F                    		jnz timer_90
  2620                                  
  2621 00001817 50                      		push eax
  2622 00001818 C705[C4000000]0100-     		mov dword [pstack.ptr],1
  2623 00001820 0000               
  2624                                  
  2625 00001822 31C9                    		xor ecx,ecx
  2626 00001824 B201                    		mov dl,t_int
  2627 00001826 89D8                    		mov eax,ebx
  2628 00001828 E841010000              		call set_pstack_tos
  2629                                  
  2630 0000182D C705[D0000000]0100-     		mov dword [rstack.ptr],1
  2631 00001835 0000               
  2632 00001837 31C9                    		xor ecx,ecx
  2633 00001839 B205                    		mov dl,t_code
  2634 0000183B F9                      		stc
  2635 0000183C 19C0                    		sbb eax,eax
  2636 0000183E E88F010000              		call set_rstack_tos
  2637                                  
  2638 00001843 58                      		pop eax
  2639 00001844 E8F4130000              		call run_pscode
  2640 00001849 730B                    		jnc timer_90
  2641                                  
  2642 0000184B E84A0E0000              		call ps_status_info
  2643 00001850 E8DC0F0000              		call get_key
  2644 00001855 F9                      		stc
  2645                                  
  2646                                  timer_90:
  2647 00001856 C3                      		ret
  2648                                  
  2649                                  
  2650                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2651                                  ; Initialize parameter & return stack.
  2652                                  ;
  2653                                  ; return:
  2654                                  ;  CF		error
  2655                                  ;
  2656                                  
  2657                                  		bits 32
  2658                                  
  2659                                  stack_init:
  2660 00001857 C705[C0000000]E803-     		mov dword [pstack.size],param_stack_size
  2661 0000185F 0000               
  2662 00001861 8325[C4000000]00        		and dword [pstack.ptr],0
  2663 00001868 B888130000              		mov eax,param_stack_size * 5
  2664 0000186D E87C020000              		call calloc
  2665 00001872 83F801                  		cmp eax,1
  2666 00001875 722A                    		jc stack_init_90
  2667 00001877 A3[BC000000]            		mov [pstack],eax
  2668                                  
  2669 0000187C C705[CC000000]E803-     		mov dword [rstack.size],ret_stack_size
  2670 00001884 0000               
  2671 00001886 8325[D0000000]00        		and dword [rstack.ptr],0
  2672 0000188D B888130000              		mov eax,ret_stack_size * 5
  2673 00001892 E857020000              		call calloc
  2674 00001897 83F801                  		cmp eax,1
  2675 0000189A 7205                    		jc stack_init_90
  2676 0000189C A3[C8000000]            		mov [rstack],eax
  2677                                  
  2678                                  stack_init_90:
  2679 000018A1 C3                      		ret
  2680                                  
  2681                                  
  2682                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2683                                  ; Rotate pstack up (ecx-1'th element becomes tos).
  2684                                  ;
  2685                                  ;  ecx		values to rotate (counted from tos)
  2686                                  ;
  2687                                  ; return:
  2688                                  ;  CF		error
  2689                                  ;
  2690                                  
  2691                                  		bits 32
  2692                                  
  2693                                  rot_pstack_up:
  2694 000018A2 09C9                    		or ecx,ecx
  2695 000018A4 7438                    		jz rot_pstack_up_90
  2696 000018A6 8B3D[BC000000]          		mov edi,[pstack]
  2697 000018AC A1[C4000000]            		mov eax,[pstack.ptr]
  2698 000018B1 29C8                    		sub eax,ecx
  2699 000018B3 7229                    		jb rot_pstack_up_90
  2700 000018B5 83F901                  		cmp ecx,1
  2701 000018B8 7424                    		jz rot_pstack_up_90
  2702 000018BA 01C7                    		add edi,eax
  2703 000018BC C1E002                  		shl eax,2
  2704 000018BF 01C7                    		add edi,eax
  2705 000018C1 49                      		dec ecx
  2706 000018C2 89C8                    		mov eax,ecx
  2707 000018C4 C1E002                  		shl eax,2
  2708 000018C7 01C1                    		add ecx,eax
  2709 000018C9 268B1F                  		mov ebx,[es:edi]
  2710 000018CC 268A5704                		mov dl,[es:edi+4]
  2711 000018D0 8D7705                  		lea esi,[edi+5]
  2712 000018D3 F326A4                  		es rep movsb
  2713 000018D6 26891F                  		mov [es:edi],ebx
  2714 000018D9 26885704                		mov [es:edi+4],dl
  2715 000018DD F8                      		clc
  2716                                  rot_pstack_up_90:
  2717 000018DE C3                      		ret
  2718                                  
  2719                                  
  2720                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2721                                  ; Rotate pstack down (1st element becomes tos).
  2722                                  ;
  2723                                  ;  ecx		values to rotate (counted from tos)
  2724                                  ;
  2725                                  ; return:
  2726                                  ;  CF		error
  2727                                  ;
  2728                                  
  2729                                  		bits 32
  2730                                  
  2731                                  rot_pstack_down:
  2732 000018DF 09C9                    		or ecx,ecx
  2733 000018E1 743D                    		jz rot_pstack_down_90
  2734 000018E3 8B3D[BC000000]          		mov edi,[pstack]
  2735 000018E9 A1[C4000000]            		mov eax,[pstack.ptr]
  2736 000018EE 39C8                    		cmp eax,ecx
  2737 000018F0 722E                    		jb rot_pstack_down_90
  2738 000018F2 83F901                  		cmp ecx,1
  2739 000018F5 7429                    		jz rot_pstack_down_90
  2740 000018F7 01C7                    		add edi,eax
  2741 000018F9 C1E002                  		shl eax,2
  2742 000018FC 01C7                    		add edi,eax
  2743 000018FE 4F                      		dec edi
  2744 000018FF 8D77FB                  		lea esi,[edi-5]
  2745 00001902 49                      		dec ecx
  2746 00001903 89C8                    		mov eax,ecx
  2747 00001905 C1E002                  		shl eax,2
  2748 00001908 01C1                    		add ecx,eax
  2749 0000190A 268B5E01                		mov ebx,[es:esi+1]
  2750 0000190E 268A5605                		mov dl,[es:esi+5]
  2751 00001912 FD                      		std
  2752 00001913 F326A4                  		es rep movsb
  2753 00001916 FC                      		cld
  2754 00001917 26895E01                		mov [es:esi+1],ebx
  2755 0000191B 26885605                		mov [es:esi+5],dl
  2756 0000191F F8                      		clc
  2757                                  rot_pstack_down_90:
  2758 00001920 C3                      		ret
  2759                                  
  2760                                  
  2761                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2762                                  ; Read pstack entry.
  2763                                  ;
  2764                                  ;  ecx		index
  2765                                  ;
  2766                                  ; return:
  2767                                  ;  eax		value
  2768                                  ;  dl		type
  2769                                  ;  ecx		index
  2770                                  ;  CF		error
  2771                                  ;
  2772                                  
  2773                                  		bits 32
  2774                                  
  2775                                  get_pstack_entry:
  2776 00001921 31C0                    		xor eax,eax
  2777 00001923 88C2                    		mov dl,al
  2778 00001925 390D[C0000000]          		cmp [pstack.size],ecx
  2779 0000192B 7211                    		jb get_pstack_entry_90
  2780 0000192D 8D1C89                  		lea ebx,[ecx+ecx*4]
  2781 00001930 031D[BC000000]          		add ebx,[pstack]
  2782 00001936 268A13                  		mov dl,[es:ebx]
  2783 00001939 268B4301                		mov eax,[es:ebx+1]
  2784 0000193D F8                      		clc
  2785                                  get_pstack_entry_90:
  2786 0000193E C3                      		ret
  2787                                  
  2788                                  
  2789                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2790                                  ; Write pstack entry.
  2791                                  ;
  2792                                  ;  ecx		index
  2793                                  ;  eax		value
  2794                                  ;  dl		type
  2795                                  ;
  2796                                  ; return:
  2797                                  ;  ecx		index
  2798                                  ;  CF		error
  2799                                  ;
  2800                                  
  2801                                  		bits 32
  2802                                  
  2803                                  set_pstack_entry:
  2804 0000193F 390D[C0000000]          		cmp [pstack.size],ecx
  2805 00001945 7211                    		jb set_pstack_entry_90
  2806 00001947 8D1C89                  		lea ebx,[ecx+ecx*4]
  2807 0000194A 031D[BC000000]          		add ebx,[pstack]
  2808 00001950 268813                  		mov [es:ebx],dl
  2809 00001953 26894301                		mov [es:ebx+1],eax
  2810 00001957 F8                      		clc
  2811                                  set_pstack_entry_90:
  2812 00001958 C3                      		ret
  2813                                  
  2814                                  
  2815                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2816                                  ; Read pstack tos (no pop).
  2817                                  ;
  2818                                  ;  ecx		index (rel. to tos, 0 = tos)
  2819                                  ;
  2820                                  ; return:
  2821                                  ;  eax		value
  2822                                  ;  dl		type
  2823                                  ;  ecx		index (absolute)
  2824                                  ;  CF		error
  2825                                  ;
  2826                                  
  2827                                  		bits 32
  2828                                  
  2829                                  get_pstack_tos:
  2830 00001959 A1[C4000000]            		mov eax,[pstack.ptr]
  2831 0000195E 83E801                  		sub eax,1
  2832 00001961 720A                    		jc get_pstack_tos_90
  2833 00001963 29C8                    		sub eax,ecx
  2834 00001965 7206                    		jc get_pstack_tos_90
  2835 00001967 91                      		xchg eax,ecx
  2836 00001968 E8B4FFFFFF              		call get_pstack_entry
  2837                                  get_pstack_tos_90:
  2838 0000196D C3                      		ret
  2839                                  
  2840                                  
  2841                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2842                                  ; Write pstack tos (no push).
  2843                                  ;
  2844                                  ;  ecx		index (rel. to tos, 0 = tos)
  2845                                  ;  eax		value
  2846                                  ;  dl		type
  2847                                  ;
  2848                                  ; return:
  2849                                  ;  ecx		index (absolute)
  2850                                  ;  CF		error
  2851                                  ;
  2852                                  
  2853                                  		bits 32
  2854                                  
  2855                                  set_pstack_tos:
  2856 0000196E 8B1D[C4000000]          		mov ebx,[pstack.ptr]
  2857 00001974 83EB01                  		sub ebx,1
  2858 00001977 720B                    		jc set_pstack_tos_90
  2859 00001979 29CB                    		sub ebx,ecx
  2860 0000197B 7207                    		jc set_pstack_tos_90
  2861 0000197D 87D9                    		xchg ebx,ecx
  2862 0000197F E8BBFFFFFF              		call set_pstack_entry
  2863                                  set_pstack_tos_90:
  2864 00001984 C3                      		ret
  2865                                  
  2866                                  
  2867                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2868                                  ; Read rstack entry.
  2869                                  ;
  2870                                  ;  ecx		index
  2871                                  ;
  2872                                  ; return:
  2873                                  ;  eax		value
  2874                                  ;  dl		type
  2875                                  ;  ecx		index
  2876                                  ;  CF		error
  2877                                  ;
  2878                                  
  2879                                  		bits 32
  2880                                  
  2881                                  get_rstack_entry:
  2882 00001985 31C0                    		xor eax,eax
  2883 00001987 88C2                    		mov dl,al
  2884 00001989 390D[CC000000]          		cmp [rstack.size],ecx
  2885 0000198F 7211                    		jb get_rstack_entry_90
  2886 00001991 8D1C89                  		lea ebx,[ecx+ecx*4]
  2887 00001994 031D[C8000000]          		add ebx,[rstack]
  2888 0000199A 268A13                  		mov dl,[es:ebx]
  2889 0000199D 268B4301                		mov eax,[es:ebx+1]
  2890 000019A1 F8                      		clc
  2891                                  get_rstack_entry_90:
  2892 000019A2 C3                      		ret
  2893                                  
  2894                                  
  2895                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2896                                  ; Write rstack entry.
  2897                                  ;
  2898                                  ;  ecx		index
  2899                                  ;  eax		value
  2900                                  ;  dl		type
  2901                                  ;
  2902                                  ; return:
  2903                                  ;  ecx		index
  2904                                  ;  CF		error
  2905                                  ;
  2906                                  
  2907                                  		bits 32
  2908                                  
  2909                                  set_rstack_entry:
  2910 000019A3 390D[CC000000]          		cmp [rstack.size],ecx
  2911 000019A9 7211                    		jb set_rstack_entry_90
  2912 000019AB 8D1C89                  		lea ebx,[ecx+ecx*4]
  2913 000019AE 031D[C8000000]          		add ebx,[rstack]
  2914 000019B4 268813                  		mov [es:ebx],dl
  2915 000019B7 26894301                		mov [es:ebx+1],eax
  2916 000019BB F8                      		clc
  2917                                  set_rstack_entry_90:
  2918 000019BC C3                      		ret
  2919                                  
  2920                                  
  2921                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2922                                  ; Read rstack tos (no pop).
  2923                                  ;
  2924                                  ;  ecx		index (rel. to tos, 0 = tos)
  2925                                  ;
  2926                                  ; return:
  2927                                  ;  eax		value
  2928                                  ;  dl		type
  2929                                  ;  ecx		index (absolute)
  2930                                  ;  CF		error
  2931                                  ;
  2932                                  
  2933                                  		bits 32
  2934                                  
  2935                                  get_rstack_tos:
  2936 000019BD A1[D0000000]            		mov eax,[rstack.ptr]
  2937 000019C2 83E801                  		sub eax,1
  2938 000019C5 720A                    		jc get_rstack_tos_90
  2939 000019C7 29C8                    		sub eax,ecx
  2940 000019C9 7206                    		jc get_rstack_tos_90
  2941 000019CB 91                      		xchg eax,ecx
  2942 000019CC E8B4FFFFFF              		call get_rstack_entry
  2943                                  get_rstack_tos_90:
  2944 000019D1 C3                      		ret
  2945                                  
  2946                                  
  2947                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2948                                  ; Write rstack tos (no push).
  2949                                  ;
  2950                                  ;  ecx		index (rel. to tos, 0 = tos)
  2951                                  ;  eax		value
  2952                                  ;  dl		type
  2953                                  ;
  2954                                  ; return:
  2955                                  ;  ecx		index (absolute)
  2956                                  ;  CF		error
  2957                                  ;
  2958                                  
  2959                                  		bits 32
  2960                                  
  2961                                  set_rstack_tos:
  2962 000019D2 8B1D[D0000000]          		mov ebx,[rstack.ptr]
  2963 000019D8 83EB01                  		sub ebx,1
  2964 000019DB 720B                    		jc set_rstack_tos_90
  2965 000019DD 29CB                    		sub ebx,ecx
  2966 000019DF 7207                    		jc set_rstack_tos_90
  2967 000019E1 87D9                    		xchg ebx,ecx
  2968 000019E3 E8BBFFFFFF              		call set_rstack_entry
  2969                                  set_rstack_tos_90:
  2970 000019E8 C3                      		ret
  2971                                  
  2972                                  
  2973                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  2974                                  ; Setup initial dictionary.
  2975                                  ;
  2976                                  ; return:
  2977                                  ;  CF		error
  2978                                  ;
  2979                                  
  2980                                  		bits 32
  2981                                  
  2982                                  dict_init:
  2983 000019E9 A1[18000000]            		mov eax,[file.start]
  2984                                  
  2985 000019EE 268B4814                		mov ecx,[es:eax+fh_dict]
  2986 000019F2 83F901                  		cmp ecx,1
  2987 000019F5 727D                    		jc dict_init_90
  2988 000019F7 01C8                    		add eax,ecx
  2989                                  
  2990 000019F9 89C6                    		mov esi,eax
  2991                                  
  2992 000019FB 31C0                    		xor eax,eax
  2993 000019FD 2666AD                  		es lodsw
  2994 00001A00 66A3[AC000000]          		mov [dict.size],ax
  2995                                  
  2996                                  		; p_none is not part of the default dict
  2997 00001A06 663DB700                		cmp ax,cb_functions + prim_functions - 1
  2998 00001A0A 7268                    		jb dict_init_90
  2999                                  
  3000 00001A0C 8D0480                  		lea eax,[eax+eax*4]
  3001                                  
  3002 00001A0F 56                      		push esi
  3003 00001A10 E8D9000000              		call calloc
  3004 00001A15 5E                      		pop esi
  3005 00001A16 83F801                  		cmp eax,1
  3006 00001A19 7259                    		jc dict_init_90
  3007 00001A1B A3[A8000000]            		mov [dict],eax
  3008                                  
  3009                                  		; add default functions
  3010                                  
  3011 00001A20 83C037                  		add eax,cb_functions * 5
  3012 00001A23 31C9                    		xor ecx,ecx
  3013 00001A25 41                      		inc ecx
  3014                                  dict_init_20:
  3015 00001A26 26C60007                		mov byte [es:eax],t_prim
  3016 00001A2A 26894801                		mov [es:eax+1],ecx
  3017 00001A2E 83C005                  		add eax,5
  3018 00001A31 41                      		inc ecx
  3019 00001A32 81F9AD000000            		cmp ecx,prim_functions
  3020 00001A38 72EC                    		jb dict_init_20
  3021                                  
  3022                                  		; add user defined things
  3023                                  
  3024 00001A3A 31C0                    		xor eax,eax
  3025 00001A3C 2666AD                  		es lodsw
  3026 00001A3F 09C0                    		or eax,eax
  3027 00001A41 7430                    		jz dict_init_80
  3028 00001A43 3905[AC000000]          		cmp [dict.size],eax
  3029 00001A49 7229                    		jb dict_init_90
  3030                                  
  3031 00001A4B 8B1D[A8000000]          		mov ebx,[dict]
  3032                                  
  3033 00001A51 91                      		xchg eax,ecx
  3034                                  dict_init_50:
  3035 00001A52 31C0                    		xor eax,eax
  3036 00001A54 2666AD                  		es lodsw
  3037 00001A57 3B05[AC000000]          		cmp eax,[dict.size]
  3038 00001A5D F5                      		cmc
  3039 00001A5E 7214                    		jc dict_init_90
  3040 00001A60 8D3C80                  		lea edi,[eax+eax*4]
  3041 00001A63 26AC                    		es lodsb
  3042 00001A65 6488043B                		mov [fs:ebx+edi],al
  3043 00001A69 26AD                    		es lodsd
  3044 00001A6B 6489443B01              		mov [fs:ebx+edi+1],eax
  3045 00001A70 49                      		dec ecx
  3046 00001A71 75DF                    		jnz dict_init_50
  3047                                  
  3048                                  dict_init_80:
  3049 00001A73 F8                      		clc
  3050                                  dict_init_90:
  3051 00001A74 C3                      		ret
  3052                                  
  3053                                  
  3054                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3055                                  ; Dump dictionary to console.
  3056                                  ;
  3057                                  ; Currently unused.
  3058                                  ;
  3059                                  %if 0
  3060                                  
  3061                                  		bits 32
  3062                                  
  3063                                  dump_dict:
  3064                                  		mov esi,dmsg_09
  3065                                  		call printf
  3066                                  
  3067                                  		xor ecx,ecx
  3068                                  dump_dict_20:
  3069                                  		call get_dict_entry
  3070                                  		jc dump_dict_90
  3071                                  		pf_arg_uint 0,ecx
  3072                                  		pf_arg_uchar 1,dl
  3073                                  		pf_arg_uint 2,eax
  3074                                  		mov esi,dmsg_10
  3075                                  		pusha
  3076                                  		call printf
  3077                                  		popa
  3078                                  
  3079                                  		inc ecx
  3080                                  		cmp ecx,[dict.size]
  3081                                  		jb dump_dict_20
  3082                                  dump_dict_90:
  3083                                  		ret
  3084                                  
  3085                                  %endif
  3086                                  
  3087                                  
  3088                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3089                                  ; Read a dictionary entry.
  3090                                  ;
  3091                                  ;  ecx		index
  3092                                  ;
  3093                                  ; return:
  3094                                  ;  eax		value
  3095                                  ;  dl		type
  3096                                  ;  ecx		index
  3097                                  ;  CF		error
  3098                                  ;
  3099                                  
  3100                                  		bits 32
  3101                                  
  3102                                  get_dict_entry:
  3103 00001A75 31C0                    		xor eax,eax
  3104 00001A77 88C2                    		mov dl,al
  3105 00001A79 390D[AC000000]          		cmp [dict.size],ecx
  3106 00001A7F 7210                    		jb get_dict_entry_90
  3107 00001A81 8D0489                  		lea eax,[ecx+4*ecx]		; dict entry size = 5
  3108 00001A84 0305[A8000000]          		add eax,[dict]
  3109 00001A8A 268A10                  		mov dl,[es:eax]
  3110 00001A8D 268B4001                		mov eax,[es:eax+1]
  3111                                  get_dict_entry_90:
  3112 00001A91 C3                      		ret
  3113                                  
  3114                                  
  3115                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3116                                  ; Write a dictionary entry.
  3117                                  ;
  3118                                  ;  ecx		index
  3119                                  ;  eax		value
  3120                                  ;  dl		type
  3121                                  ;
  3122                                  ; return:
  3123                                  ;  ecx		index
  3124                                  ;  CF		error
  3125                                  ;
  3126                                  
  3127                                  		bits 32
  3128                                  
  3129                                  set_dict_entry:
  3130 00001A92 390D[AC000000]          		cmp [dict.size],ecx
  3131 00001A98 7210                    		jb set_dict_entry_90
  3132 00001A9A 8D1C89                  		lea ebx,[ecx+4*ecx]
  3133 00001A9D 031D[A8000000]          		add ebx,[dict]
  3134 00001AA3 268813                  		mov [es:ebx],dl
  3135 00001AA6 26894301                		mov [es:ebx+1],eax
  3136                                  set_dict_entry_90:
  3137 00001AAA C3                      		ret
  3138                                  
  3139                                  
  3140                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3141                                  ; Init malloc areas.
  3142                                  ;
  3143                                  ; idt is not ready yet - hence the cli.
  3144                                  ;
  3145                                  
  3146                                  		bits 32
  3147                                  
  3148                                  malloc_init:
  3149 00001AAB 31DB                    		xor ebx,ebx
  3150                                  malloc_init_10:
  3151 00001AAD 678B87[3400]            		mov eax,[malloc.area + bx]
  3152 00001AB2 678B97[3800]            		mov edx,[malloc.area + bx + 4]
  3153 00001AB7 39D0                    		cmp eax,edx
  3154 00001AB9 7428                    		jz malloc_init_70
  3155                                  
  3156 00001ABB 39C2                    		cmp edx,eax
  3157 00001ABD 730E                    		jnb malloc_init_30
  3158                                  
  3159                                  malloc_init_20:
  3160                                  		; we can't access it
  3161 00001ABF 31C0                    		xor eax,eax
  3162 00001AC1 678987[3400]            		mov [malloc.area + bx],eax
  3163 00001AC6 678987[3800]            		mov [malloc.area + bx + 4],eax
  3164 00001ACB EB16                    		jmp malloc_init_70
  3165                                  
  3166                                  malloc_init_30:
  3167 00001ACD 89C6                    		mov esi,eax
  3168                                  
  3169 00001ACF 29C2                    		sub edx,eax
  3170 00001AD1 31C0                    		xor eax,eax
  3171 00001AD3 268916                  		mov [es:esi + mhead.memsize],edx
  3172 00001AD6 26894604                		mov [es:esi + mhead.ip],eax
  3173 00001ADA 26884608                		mov [es:esi + mhead.used],al
  3174                                  
  3175                                  		; just check we can really write there
  3176 00001ADE 263916                  		cmp [es:esi + mhead.memsize],edx
  3177 00001AE1 75DC                    		jnz malloc_init_20
  3178                                  malloc_init_70:
  3179 00001AE3 6683C308                		add bx,8
  3180 00001AE7 6683FB28                		cmp bx,malloc.areas * 8
  3181 00001AEB 72C0                    		jb malloc_init_10
  3182 00001AED C3                      		ret
  3183                                  
  3184                                  
  3185                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3186                                  ; Get some memory.
  3187                                  ;
  3188                                  ;  eax          memory size
  3189                                  ;
  3190                                  ; return:
  3191                                  ;  eax          linear address  (0 if the request failed)
  3192                                  ;  memory is initialized with 0
  3193                                  ;
  3194                                  
  3195                                  		bits 32
  3196                                  
  3197                                  calloc:
  3198 00001AEE 50                      		push eax
  3199 00001AEF E821000000              		call malloc
  3200 00001AF4 59                      		pop ecx
  3201                                  calloc_10:
  3202 00001AF5 09C0                    		or eax,eax
  3203 00001AF7 7408                    		jz calloc_90
  3204 00001AF9 50                      		push eax
  3205 00001AFA 89C7                    		mov edi,eax
  3206 00001AFC 30C0                    		xor al,al
  3207 00001AFE F3AA                    		rep stosb
  3208 00001B00 58                      		pop eax
  3209                                  calloc_90:
  3210 00001B01 C3                      		ret
  3211                                  
  3212                                  
  3213                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3214                                  ; Get some memory (taken from extended memory, if possible).
  3215                                  ;
  3216                                  ;  eax          memory size
  3217                                  ;
  3218                                  ; return:
  3219                                  ;  eax          linear address  (0 if the request failed)
  3220                                  ;  memory is initialized with 0
  3221                                  ;
  3222                                  
  3223                                  		bits 32
  3224                                  
  3225                                  xcalloc:
  3226 00001B02 66BB0800                		mov bx,8		; start with mem area 1
  3227                                  
  3228 00001B06 50                      		push eax
  3229 00001B07 E80C000000              		call malloc_10
  3230 00001B0C 59                      		pop ecx
  3231                                  
  3232 00001B0D 09C0                    		or eax,eax
  3233 00001B0F 75E4                    		jnz calloc_10
  3234                                  
  3235 00001B11 89C8                    		mov eax,ecx
  3236 00001B13 EBD9                    		jmp calloc
  3237                                  
  3238                                  
  3239                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3240                                  ; Get some memory.
  3241                                  ;
  3242                                  ;  eax          memory size
  3243                                  ;
  3244                                  ; return:
  3245                                  ;  eax          linear address  (0 if request failed)
  3246                                  ;
  3247                                  
  3248                                  		bits 32
  3249                                  
  3250                                  malloc:
  3251 00001B15 6631DB                  		xor bx,bx
  3252                                  
  3253                                  malloc_10:
  3254 00001B18 678B8F[3400]            		mov ecx,[malloc.area + bx]
  3255 00001B1D 678B97[3800]            		mov edx,[malloc.area + 4 + bx]
  3256                                  
  3257 00001B22 890D[2C000000]          		mov [malloc.start],ecx
  3258 00001B28 8915[30000000]          		mov [malloc.end],edx
  3259                                  
  3260 00001B2E 39CA                    		cmp edx,ecx
  3261 00001B30 740F                    		jz malloc_70
  3262                                  
  3263 00001B32 53                      		push ebx
  3264 00001B33 50                      		push eax
  3265 00001B34 E815000000              		call _malloc
  3266 00001B39 5A                      		pop edx
  3267 00001B3A 5B                      		pop ebx
  3268                                  
  3269 00001B3B 09C0                    		or eax,eax
  3270 00001B3D 750E                    		jnz malloc_90
  3271                                  
  3272 00001B3F 89D0                    		mov eax,edx
  3273                                  
  3274                                  malloc_70:
  3275 00001B41 6683C308                		add bx,8
  3276 00001B45 6683FB28                		cmp bx,malloc.areas * 8
  3277 00001B49 72CD                    		jb malloc_10
  3278                                  
  3279 00001B4B 31C0                    		xor eax,eax
  3280                                  
  3281                                  malloc_90:
  3282 00001B4D C3                      		ret
  3283                                  
  3284                                  _malloc:
  3285 00001B4E 31ED                    		xor ebp,ebp
  3286 00001B50 09C0                    		or eax,eax
  3287 00001B52 745A                    		jz _malloc_90
  3288 00001B54 83C009                  		add eax,mhead.size
  3289 00001B57 8B1D[2C000000]          		mov ebx,[malloc.start]
  3290                                  
  3291                                  _malloc_20:
  3292 00001B5D 89DE                    		mov esi,ebx
  3293 00001B5F 268B0E                  		mov ecx,[es:esi + mhead.memsize]
  3294 00001B62 26F6460880              		test byte [es:esi + mhead.used],80h
  3295 00001B67 753B                    		jnz _malloc_70
  3296 00001B69 39C1                    		cmp ecx,eax
  3297 00001B6B 7237                    		jb _malloc_70
  3298                                  		; mark as occupied
  3299 00001B6D 26C6460880              		mov byte [es:esi + mhead.used],80h
  3300 00001B72 FF35[86000000]          		push dword [pscode_instr]
  3301 00001B78 268F4604                		pop dword [es:esi + mhead.ip]
  3302 00001B7C 8D6B09                  		lea ebp,[ebx + mhead.size]
  3303 00001B7F 89CA                    		mov edx,ecx
  3304 00001B81 29C2                    		sub edx,eax
  3305 00001B83 83FA09                  		cmp edx,mhead.size
  3306 00001B86 7706                    		ja _malloc_60
  3307                                  
  3308 00001B88 26005608                		add [es:esi + mhead.rem],dl
  3309                                  
  3310 00001B8C EB20                    		jmp _malloc_90
  3311                                  
  3312                                  _malloc_60:
  3313 00001B8E 268906                  		mov [es:esi + mhead.memsize],eax
  3314 00001B91 01C3                    		add ebx,eax
  3315 00001B93 89DE                    		mov esi,ebx
  3316 00001B95 268916                  		mov [es:esi + mhead.memsize],edx
  3317 00001B98 31D2                    		xor edx,edx
  3318 00001B9A 26885608                		mov byte [es:esi + mhead.used],dl
  3319 00001B9E 26895604                		mov [es:esi + mhead.ip],edx
  3320                                  		
  3321 00001BA2 EB0A                    		jmp _malloc_90
  3322                                  _malloc_70:
  3323 00001BA4 01CB                    		add ebx,ecx
  3324 00001BA6 3B1D[30000000]          		cmp ebx,[malloc.end]
  3325 00001BAC 72AF                    		jb _malloc_20
  3326                                  _malloc_90:
  3327 00001BAE 95                      		xchg ebp,eax
  3328 00001BAF C3                      		ret
  3329                                  
  3330                                  
  3331                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3332                                  ; Free memory.
  3333                                  ;
  3334                                  ;  eax          linear address
  3335                                  ;
  3336                                  
  3337                                  		bits 32
  3338                                  
  3339                                  free:
  3340 00001BB0 6631DB                  		xor bx,bx
  3341                                  
  3342                                  free_10:
  3343 00001BB3 678B8F[3400]            		mov ecx,[malloc.area + bx]
  3344 00001BB8 678B97[3800]            		mov edx,[malloc.area + 4 + bx]
  3345                                  
  3346 00001BBD 39C8                    		cmp eax,ecx
  3347 00001BBF 7212                    		jb free_70
  3348 00001BC1 39D0                    		cmp eax,edx
  3349 00001BC3 730E                    		jae free_70
  3350                                  
  3351 00001BC5 890D[2C000000]          		mov [malloc.start],ecx
  3352 00001BCB 8915[30000000]          		mov [malloc.end],edx
  3353                                  
  3354 00001BD1 EB0B                    		jmp _free
  3355                                  
  3356                                  free_70:
  3357 00001BD3 6683C308                		add bx,8
  3358 00001BD7 6683FB28                		cmp bx,malloc.areas * 8
  3359 00001BDB 72D6                    		jb free_10
  3360                                  free_90:
  3361 00001BDD C3                      		ret
  3362                                  
  3363                                  
  3364                                  _free:
  3365 00001BDE 09C0                    		or eax,eax
  3366 00001BE0 745A                    		jz _free_90
  3367                                  
  3368 00001BE2 83E809                  		sub eax,mhead.size
  3369                                  
  3370 00001BE5 8B1D[2C000000]          		mov ebx,[malloc.start]
  3371 00001BEB 89D9                    		mov ecx,ebx
  3372                                  _free_10:
  3373 00001BED 39D8                    		cmp eax,ebx
  3374 00001BEF 753E                    		jnz _free_70
  3375                                  
  3376 00001BF1 26F6430880              		test byte [es:ebx + mhead.used],80h
  3377 00001BF6 7444                    		jz _free_90
  3378                                  
  3379 00001BF8 39D9                    		cmp ecx,ebx				; first block?
  3380 00001BFA 7412                    		jz _free_30
  3381                                  
  3382 00001BFC 26F6410880              		test byte [es:ecx + mhead.used],80h
  3383 00001C01 750B                    		jnz _free_30				; prev block is used
  3384                                  
  3385                                  		; prev block is free -> join them
  3386 00001C03 268B11                  		mov edx,[es:ecx + mhead.memsize]
  3387                                  
  3388 00001C06 260313                  		add edx,[es:ebx + mhead.memsize]
  3389                                  
  3390 00001C09 268911                  		mov [es:ecx + mhead.memsize],edx
  3391 00001C0C 89CB                    		mov ebx,ecx
  3392                                  
  3393                                  _free_30:
  3394 00001C0E 89DA                    		mov edx,ebx
  3395 00001C10 26C6430800              		mov byte [es:ebx + mhead.used],0	; mark block as free
  3396 00001C15 260313                  		add edx,[es:ebx + mhead.memsize]
  3397 00001C18 3B15[30000000]          		cmp edx,[malloc.end]			; last block?
  3398 00001C1E 731C                    		jae _free_90
  3399                                  
  3400 00001C20 26F6420880              		test byte [es:edx + mhead.used],80h
  3401 00001C25 7515                    		jnz _free_90				; next block is used
  3402                                  
  3403                                  		; next block is free -> join them
  3404 00001C27 268B12                  		mov edx,[es:edx + mhead.memsize]
  3405                                  
  3406 00001C2A 260113                  		add [es:ebx + mhead.memsize],edx
  3407 00001C2D EB0D                    		jmp _free_90
  3408                                  
  3409                                  _free_70:
  3410 00001C2F 89D9                    		mov ecx,ebx
  3411 00001C31 26031B                  		add ebx,[es:ebx + mhead.memsize]
  3412 00001C34 3B1D[30000000]          		cmp ebx,[malloc.end]
  3413 00001C3A 72B1                    		jb _free_10
  3414                                  _free_90:
  3415 00001C3C C3                      		ret
  3416                                  
  3417                                  
  3418                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3419                                  ; Adjust memory size.
  3420                                  ;
  3421                                  ;  eax          linear address
  3422                                  ;  ecx		new size (ecx = 0 -> free)
  3423                                  ;
  3424                                  
  3425                                  		bits 32
  3426                                  
  3427                                  realloc:
  3428 00001C3D 09C9                    		or ecx,ecx
  3429 00001C3F 0F846BFFFFFF            		jz free
  3430                                  
  3431 00001C45 6631DB                  		xor bx,bx
  3432                                  
  3433                                  realloc10:
  3434 00001C48 678BAF[3400]            		mov ebp,[malloc.area + bx]
  3435 00001C4D 678B97[3800]            		mov edx,[malloc.area + 4 + bx]
  3436                                  
  3437 00001C52 39E8                    		cmp eax,ebp
  3438 00001C54 7212                    		jb realloc70
  3439 00001C56 39D0                    		cmp eax,edx
  3440 00001C58 730E                    		jae realloc70
  3441                                  
  3442 00001C5A 892D[2C000000]          		mov [malloc.start],ebp
  3443 00001C60 8915[30000000]          		mov [malloc.end],edx
  3444                                  
  3445 00001C66 EB0B                    		jmp _realloc
  3446                                  
  3447                                  realloc70:
  3448 00001C68 6683C308                		add bx,8
  3449 00001C6C 6683FB28                		cmp bx,malloc.areas * 8
  3450 00001C70 72D6                    		jb realloc10
  3451                                  realloc_90:
  3452 00001C72 C3                      		ret
  3453                                  
  3454                                  
  3455                                  _realloc:
  3456 00001C73 09C0                    		or eax,eax
  3457 00001C75 7472                    		jz _realloc_90
  3458                                  
  3459 00001C77 89CD                    		mov ebp,ecx
  3460 00001C79 83C509                  		add ebp,mhead.size			; new size
  3461 00001C7C 83E809                  		sub eax,mhead.size
  3462                                  
  3463 00001C7F 8B1D[2C000000]          		mov ebx,[malloc.start]
  3464                                  _realloc_10:
  3465 00001C85 39D8                    		cmp eax,ebx
  3466 00001C87 7555                    		jnz _realloc_70
  3467                                  
  3468 00001C89 26F6430880              		test byte [es:ebx + mhead.used],80h
  3469 00001C8E 7459                    		jz _realloc_90
  3470                                  
  3471 00001C90 263B2B                  		cmp ebp,[es:ebx + mhead.memsize]
  3472 00001C93 7754                    		ja _realloc_90				; we can only decrease
  3473                                  
  3474 00001C95 89D9                    		mov ecx,ebx
  3475 00001C97 26030B                  		add ecx,[es:ebx + mhead.memsize]
  3476                                  
  3477 00001C9A 3B0D[30000000]          		cmp ecx,[malloc.end]
  3478 00001CA0 730C                    		jae _realloc_30
  3479                                  
  3480 00001CA2 26F6410880              		test byte [es:ecx + mhead.used],80h
  3481 00001CA7 7505                    		jnz _realloc_30
  3482                                  
  3483                                  		; free block follows, just resize
  3484 00001CA9 260309                  		add ecx,[es:ecx + mhead.memsize]
  3485                                  		
  3486 00001CAC EB12                    		jmp _realloc_40
  3487                                  
  3488                                  _realloc_30:
  3489                                  		; used block or end: split
  3490 00001CAE 268B03                  		mov eax,[es:ebx + mhead.memsize]
  3491 00001CB1 29E8                    		sub eax,ebp
  3492 00001CB3 83F809                  		cmp eax,mhead.size
  3493 00001CB6 7708                    		ja _realloc_40
  3494                                  		; adjust excess count
  3495 00001CB8 0C80                    		or al,80h
  3496 00001CBA 26884308                		mov [es:ebx + mhead.rem],al
  3497 00001CBE EB29                    		jmp _realloc_90
  3498                                  
  3499                                  _realloc_40:
  3500                                  		; insert new free block
  3501                                  
  3502 00001CC0 26892B                  		mov [es:ebx + mhead.memsize],ebp
  3503 00001CC3 26C6430880              		mov byte [es:ebx + mhead.rem],80h
  3504                                  
  3505 00001CC8 01EB                    		add ebx,ebp
  3506 00001CCA 29D9                    		sub ecx,ebx
  3507 00001CCC 26890B                  		mov [es:ebx + mhead.memsize],ecx
  3508 00001CCF 26C7430400000000        		mov dword [es:ebx + mhead.ip],0
  3509 00001CD7 26C6430800              		mov byte [es:ebx + mhead.rem],0
  3510 00001CDC EB0B                    		jmp _realloc_90
  3511                                  
  3512                                  _realloc_70:
  3513 00001CDE 26031B                  		add ebx,[es:ebx + mhead.memsize]
  3514 00001CE1 3B1D[30000000]          		cmp ebx,[malloc.end]
  3515 00001CE7 729C                    		jb _realloc_10
  3516                                  _realloc_90:
  3517 00001CE9 C3                      		ret
  3518                                  
  3519                                  
  3520                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3521                                  ; Dump memory chain.
  3522                                  ;
  3523                                  
  3524                                  		bits 32
  3525                                  
  3526                                  dump_malloc:
  3527 00001CEA 60                      		pushad
  3528                                  
  3529 00001CEB 31D2                    		xor edx,edx
  3530 00001CED E8B20E0000              		call con_xy
  3531                                  
  3532 00001CF2 31DB                    		xor ebx,ebx
  3533 00001CF4 31ED                    		xor ebp,ebp
  3534                                  
  3535                                  dump_malloc_10:
  3536 00001CF6 678B8F[3400]            		mov ecx,[malloc.area + bx]
  3537 00001CFB 678B97[3800]            		mov edx,[malloc.area + 4 + bx]
  3538                                  
  3539 00001D00 890D[2C000000]          		mov [malloc.start],ecx
  3540 00001D06 8915[30000000]          		mov [malloc.end],edx
  3541                                  
  3542 00001D0C 39D1                    		cmp ecx,edx
  3543 00001D0E 7407                    		jz dump_malloc_70
  3544                                  
  3545 00001D10 53                      		push ebx
  3546 00001D11 E815000000              		call _dump_malloc
  3547 00001D16 5B                      		pop ebx
  3548                                  
  3549                                  dump_malloc_70:
  3550 00001D17 83C308                  		add ebx,8
  3551 00001D1A 83FB28                  		cmp ebx,malloc.areas * 8
  3552 00001D1D 72D7                    		jb dump_malloc_10
  3553                                  dump_malloc_90:
  3554 00001D1F BE[D80A0000]            		mov esi,dmsg_03a
  3555 00001D24 E880060000              		call printf
  3556                                  
  3557 00001D29 61                      		popad
  3558 00001D2A C3                      		ret
  3559                                  
  3560                                  _dump_malloc:
  3561 00001D2B 8B1D[2C000000]          		mov ebx,[malloc.start]
  3562                                  
  3563                                  _dump_malloc_30:
  3564 00001D31 89DE                    		mov esi,ebx
  3565 00001D33 268B0E                  		mov ecx,[es:esi + mhead.memsize]
  3566                                  
  3567 00001D36 60                      		pushad
  3568 00001D37 66B8[680B]              		mov ax,dmsg_07
  3569 00001D3B 26F6460880              		test byte [es:esi + mhead.used],80h
  3570 00001D40 7404                    		jz _dump_malloc_40
  3571 00001D42 66B8[6D0B]              		mov ax,dmsg_08
  3572                                  _dump_malloc_40:
  3573                                  		pf_arg_ushort 5,ax
  3574 00001D46 668325[65080000]00  <1>  and word [tmp_write_data + %1 * 4 + 2],byte 0
  3575 00001D4E 66A3[63080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  3576                                  		pf_arg_ushort 0,bp
  3577 00001D54 668325[51080000]00  <1>  and word [tmp_write_data + %1 * 4 + 2],byte 0
  3578 00001D5C 66892D[4F080000]    <1>  mov [tmp_write_data + %1 * 4],%2
  3579 00001D63 83E909                  		sub ecx,mhead.size
  3580 00001D66 260FB64608              		movzx eax,byte [es:esi + mhead.rem]
  3581 00001D6B 247F                    		and al,7fh
  3582 00001D6D 29C1                    		sub ecx,eax
  3583                                  		pf_arg_uint 1,ebx
  3584 00001D6F 891D[53080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  3585                                  		pf_arg_uint 2,ecx
  3586 00001D75 890D[57080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  3587                                  		pf_arg_uchar 3,al
  3588 00001D7B 8325[5B080000]00    <1>  and dword [tmp_write_data + %1 * 4],byte 0
  3589 00001D82 A2[5B080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  3590 00001D87 268B4604                		mov eax,[es:esi + mhead.ip]
  3591                                  		pf_arg_uint 4,eax
  3592 00001D8B A3[5F080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  3593 00001D90 BE[A70A0000]            		mov esi,dmsg_03
  3594                                  
  3595 00001D95 E80F060000              		call printf
  3596 00001D9A 61                      		popad
  3597                                  
  3598 00001D9B 45                      		inc ebp
  3599 00001D9C F7C51F000000            		test ebp,01fh
  3600 00001DA2 750E                    		jnz _dump_malloc_60
  3601 00001DA4 60                      		pushad
  3602 00001DA5 E8870A0000              		call get_key
  3603 00001DAA 31D2                    		xor edx,edx
  3604 00001DAC E8F30D0000              		call con_xy
  3605 00001DB1 61                      		popad
  3606                                  _dump_malloc_60:		
  3607                                  
  3608 00001DB2 BE[130B0000]            		mov esi,dmsg_04
  3609 00001DB7 83F909                  		cmp ecx,mhead.size
  3610 00001DBA 761B                    		jbe _dump_malloc_70
  3611                                  
  3612 00001DBC 01CB                    		add ebx,ecx
  3613 00001DBE 3B1D[30000000]          		cmp ebx,[malloc.end]
  3614 00001DC4 7424                    		jz _dump_malloc_90
  3615 00001DC6 0F8265FFFFFF            		jb _dump_malloc_30
  3616                                  
  3617 00001DCC 8B0D[30000000]          		mov ecx,[malloc.end]
  3618 00001DD2 BE[440B0000]            		mov esi,dmsg_04a
  3619                                  
  3620                                  _dump_malloc_70:
  3621                                  		pf_arg_uint 0,ebx
  3622 00001DD7 891D[4F080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  3623                                  		pf_arg_uint 1,ecx
  3624 00001DDD 890D[53080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  3625                                  
  3626 00001DE3 55                      		push ebp
  3627 00001DE4 E8C0050000              		call printf
  3628 00001DE9 5D                      		pop ebp
  3629                                  _dump_malloc_90:
  3630 00001DEA C3                      		ret
  3631                                  
  3632                                  
  3633                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3634                                  ; Get size of largest free block.
  3635                                  ;
  3636                                  ; return:
  3637                                  ;  eax		size of largest free block
  3638                                  ;
  3639                                  
  3640                                  maxmemsize:
  3641 00001DEB 31C0                    		xor eax,eax
  3642 00001DED 31D2                    		xor edx,edx
  3643                                  
  3644                                  maxmemsize_10:
  3645 00001DEF 50                      		push eax
  3646 00001DF0 52                      		push edx
  3647 00001DF1 E810000000              		call memsize
  3648 00001DF6 5A                      		pop edx
  3649 00001DF7 58                      		pop eax
  3650                                  
  3651 00001DF8 39D7                    		cmp edi,edx
  3652 00001DFA 7202                    		jb maxmemsize_20
  3653 00001DFC 89FA                    		mov edx,edi
  3654                                  maxmemsize_20:
  3655 00001DFE 40                      		inc eax
  3656 00001DFF 83F804                  		cmp eax,4
  3657 00001E02 72EB                    		jb maxmemsize_10
  3658                                  
  3659 00001E04 92                      		xchg eax,edx
  3660                                  
  3661 00001E05 C3                      		ret
  3662                                  
  3663                                  
  3664                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3665                                  ; Get memory size.
  3666                                  ;
  3667                                  ;  eax		memory area (0 ... malloc.areas - 1)
  3668                                  ;
  3669                                  ; return:
  3670                                  ;  ebp		total free memory
  3671                                  ;  edi		largest free block
  3672                                  ;
  3673                                  
  3674                                  		bits 32
  3675                                  
  3676                                  memsize:
  3677 00001E06 31ED                    		xor ebp,ebp
  3678 00001E08 31FF                    		xor edi,edi
  3679                                  
  3680 00001E0A 83F805                  		cmp eax,malloc.areas
  3681 00001E0D 7323                    		jae memsize_90
  3682                                  
  3683 00001E0F 666BD808                		imul bx,ax,8
  3684                                  
  3685 00001E13 678B8F[3400]            		mov ecx,[malloc.area + bx]
  3686 00001E18 678B97[3800]            		mov edx,[malloc.area + 4 + bx]
  3687                                  
  3688 00001E1D 890D[2C000000]          		mov [malloc.start],ecx
  3689 00001E23 8915[30000000]          		mov [malloc.end],edx
  3690                                  
  3691 00001E29 39D1                    		cmp ecx,edx
  3692 00001E2B 7405                    		jz memsize_90
  3693                                  
  3694 00001E2D E801000000              		call _memsize
  3695                                  
  3696                                  memsize_90:
  3697 00001E32 C3                      		ret
  3698                                  
  3699                                  
  3700                                  _memsize:
  3701 00001E33 8B1D[2C000000]          		mov ebx,[malloc.start]
  3702                                  _memsize_30:
  3703 00001E39 268B0B                  		mov ecx,[es:ebx + mhead.memsize]
  3704 00001E3C 83F909                  		cmp ecx,mhead.size
  3705 00001E3F 721E                    		jb _memsize_90
  3706                                  
  3707 00001E41 26F6430880              		test byte [es:ebx + mhead.used],80h
  3708 00001E46 750D                    		jnz _memsize_50
  3709                                  
  3710 00001E48 89C8                    		mov eax,ecx
  3711 00001E4A 83E809                  		sub eax,mhead.size
  3712 00001E4D 01C5                    		add ebp,eax
  3713 00001E4F 39F8                    		cmp eax,edi
  3714 00001E51 7202                    		jb _memsize_50
  3715 00001E53 89C7                    		mov edi,eax
  3716                                  _memsize_50:
  3717 00001E55 01CB                    		add ebx,ecx
  3718 00001E57 3B1D[30000000]          		cmp ebx,[malloc.end]
  3719 00001E5D 72DA                    		jb _memsize_30
  3720                                  _memsize_90:
  3721 00001E5F C3                      		ret
  3722                                  
  3723                                  
  3724                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3725                                  ; Calculate size of memory block.
  3726                                  ;
  3727                                  ; eax		address
  3728                                  ;
  3729                                  ; return:
  3730                                  ;  eax		size
  3731                                  ;
  3732                                  
  3733                                  		bits 32
  3734                                  
  3735                                  find_mem_size:
  3736 00001E60 E813000000              		call fms_code
  3737 00001E65 7310                    		jnc find_mem_size_90
  3738                                  
  3739 00001E67 E836000000              		call fms_malloc
  3740 00001E6C 7309                    		jnc find_mem_size_90
  3741                                  
  3742 00001E6E E8A8000000              		call fms_file
  3743 00001E73 7302                    		jnc find_mem_size_90
  3744                                  
  3745                                  		; some other area
  3746                                  
  3747 00001E75 31C0                    		xor eax,eax
  3748                                  
  3749                                  find_mem_size_90:
  3750 00001E77 C3                      		ret
  3751                                  
  3752                                  
  3753                                  ; string constants in ps code
  3754                                  fms_code:
  3755 00001E78 8B15[7E000000]          		mov edx,[pscode_start]
  3756 00001E7E 39D0                    		cmp eax,edx
  3757 00001E80 721F                    		jc fms_code_90
  3758 00001E82 0315[82000000]          		add edx,[pscode_size]
  3759 00001E88 39D0                    		cmp eax,edx
  3760 00001E8A F5                      		cmc
  3761 00001E8B 7214                    		jc fms_code_90
  3762                                  
  3763 00001E8D 89C7                    		mov edi,eax
  3764 00001E8F 31C9                    		xor ecx,ecx
  3765 00001E91 49                      		dec ecx
  3766 00001E92 29F9                    		sub ecx,edi
  3767 00001E94 89CA                    		mov edx,ecx
  3768 00001E96 31C0                    		xor eax,eax
  3769 00001E98 F2AE                    		repnz scasb
  3770 00001E9A 7504                    		jnz fms_code_80
  3771 00001E9C 29CA                    		sub edx,ecx
  3772 00001E9E 89D0                    		mov eax,edx
  3773                                  fms_code_80:
  3774 00001EA0 F8                      		clc
  3775                                  fms_code_90:
  3776 00001EA1 C3                      		ret
  3777                                  
  3778                                  
  3779                                  ; check malloc areas
  3780                                  fms_malloc:
  3781 00001EA2 31DB                    		xor ebx,ebx
  3782                                  fms_malloc_10:
  3783 00001EA4 678B8F[3400]            		mov ecx,[malloc.area + bx]
  3784 00001EA9 678B97[3800]            		mov edx,[malloc.area + 4 + bx]
  3785                                  
  3786 00001EAE 39C8                    		cmp eax,ecx
  3787 00001EB0 7212                    		jb fms_malloc_20
  3788 00001EB2 39D0                    		cmp eax,edx
  3789 00001EB4 730E                    		jae fms_malloc_20
  3790                                  
  3791 00001EB6 890D[2C000000]          		mov [malloc.start],ecx
  3792 00001EBC 8915[30000000]          		mov [malloc.end],edx
  3793                                  
  3794 00001EC2 EB0B                    		jmp fms_malloc_30
  3795                                  fms_malloc_20:
  3796 00001EC4 83C308                  		add ebx,8
  3797 00001EC7 83FB28                  		cmp ebx,malloc.areas * 8
  3798 00001ECA 72D8                    		jb fms_malloc_10
  3799                                  
  3800 00001ECC F9                      		stc
  3801                                  
  3802 00001ECD EB4B                    		jmp fms_malloc_90
  3803                                  
  3804                                  fms_malloc_30:
  3805                                  
  3806 00001ECF 3B05[2C000000]          		cmp eax,[malloc.start]
  3807 00001ED5 7243                    		jc fms_malloc_90
  3808 00001ED7 3B05[30000000]          		cmp eax,[malloc.end]
  3809 00001EDD F5                      		cmc
  3810 00001EDE 723A                    		jc fms_malloc_90
  3811                                  
  3812 00001EE0 8B1D[2C000000]          		mov ebx,[malloc.start]
  3813                                  
  3814                                  fms_malloc_40:
  3815 00001EE6 268B0B                  		mov ecx,[es:ebx + mhead.memsize]
  3816 00001EE9 8D140B                  		lea edx,[ebx+ecx]
  3817                                  
  3818 00001EEC 39D0                    		cmp eax,edx
  3819 00001EEE 731E                    		jae fms_malloc_50
  3820                                  
  3821 00001EF0 26F6430880              		test byte [es:ebx + mhead.used],80h
  3822 00001EF5 7421                    		jz fms_malloc_70		; free
  3823                                  
  3824 00001EF7 29D8                    		sub eax,ebx
  3825 00001EF9 83F809                  		cmp eax,mhead.size
  3826 00001EFC 721A                    		jb fms_malloc_70		; within header
  3827                                  
  3828 00001EFE 268A5308                		mov dl,[es:ebx + mhead.rem]
  3829 00001F02 83E27F                  		and edx,7fh
  3830                                  
  3831 00001F05 01D0                    		add eax,edx
  3832 00001F07 29C1                    		sub ecx,eax
  3833 00001F09 720D                    		jb fms_malloc_70		; in reserved area
  3834 00001F0B 91                      		xchg eax,ecx
  3835 00001F0C EB0C                    		jmp fms_malloc_90
  3836                                  
  3837                                  fms_malloc_50:
  3838 00001F0E 89D3                    		mov ebx,edx
  3839 00001F10 3B1D[30000000]          		cmp ebx,[malloc.end]
  3840 00001F16 72CE                    		jb fms_malloc_40
  3841                                  
  3842                                  fms_malloc_70:
  3843 00001F18 31C0                    		xor eax,eax
  3844                                  fms_malloc_90:
  3845 00001F1A C3                      		ret
  3846                                  
  3847                                  
  3848                                  ; some file in cpio archive
  3849                                  fms_file:
  3850 00001F1B 8B1D[1C000000]          		mov ebx,[archive.start]
  3851 00001F21 09DB                    		or ebx,ebx
  3852 00001F23 F9                      		stc
  3853 00001F24 747D                    		jz fms_file_90
  3854 00001F26 39D8                    		cmp eax,ebx
  3855 00001F28 7279                    		jc fms_file_90
  3856 00001F2A 3B05[20000000]          		cmp eax,[archive.end]
  3857 00001F30 F5                      		cmc
  3858 00001F31 7270                    		jc fms_file_90
  3859                                  
  3860                                  fms_file_10:
  3861 00001F33 8B0D[20000000]          		mov ecx,[archive.end]
  3862 00001F39 83E91A                  		sub ecx,26
  3863 00001F3C 39CB                    		cmp ebx,ecx
  3864 00001F3E 7361                    		jae fms_file_80
  3865                                  
  3866 00001F40 C605[A30B0000]00        		mov byte [fms_cpio_swab],0
  3867 00001F47 2666813BC771            		cmp word [es:ebx],71c7h
  3868 00001F4D 740F                    		jz fms_file_20			; normal cpio record
  3869 00001F4F 2666813B71C7            		cmp word [es:ebx],0c771h	; maybe byte-swapped?
  3870 00001F55 754A                    		jnz fms_file_80			; no cpio record
  3871 00001F57 C605[A30B0000]01        		mov byte [fms_cpio_swab],1
  3872                                  
  3873                                  fms_file_20:
  3874 00001F5E 50                      		push eax
  3875 00001F5F 26668B4314              		mov ax,[es:ebx+20]		; file name size
  3876 00001F64 E83B000000              		call cpio_swab
  3877 00001F69 0FB7C8                  		movzx ecx,ax
  3878 00001F6C 58                      		pop eax
  3879 00001F6D 41                      		inc ecx
  3880 00001F6E 83E1FE                  		and ecx,~1			; align
  3881                                  
  3882 00001F71 8D4C191A                		lea ecx,[ecx+ebx+26]		; data start
  3883                                  
  3884 00001F75 39C8                    		cmp eax,ecx
  3885 00001F77 7228                    		jb fms_file_80			; within header area
  3886                                  
  3887 00001F79 50                      		push eax
  3888 00001F7A 268B4316                		mov eax,[es:ebx+22]		; data size
  3889 00001F7E E821000000              		call cpio_swab
  3890 00001F83 C1C010                  		rol eax,16			; strange word order
  3891 00001F86 E819000000              		call cpio_swab
  3892 00001F8B 89C2                    		mov edx,eax
  3893 00001F8D 58                      		pop eax
  3894                                  
  3895 00001F8E 89D3                    		mov ebx,edx
  3896 00001F90 43                      		inc ebx
  3897 00001F91 83E3FE                  		and ebx,~1			; align
  3898 00001F94 01CB                    		add ebx,ecx			; next record
  3899                                  
  3900 00001F96 01D1                    		add ecx,edx
  3901                                  
  3902 00001F98 39D8                    		cmp eax,ebx
  3903 00001F9A 7397                    		jae fms_file_10
  3904                                  
  3905 00001F9C 29C1                    		sub ecx,eax
  3906 00001F9E 91                      		xchg eax,ecx
  3907                                  
  3908 00001F9F 7302                    		jnc fms_file_90			; not within alignment area
  3909                                  fms_file_80:
  3910 00001FA1 31C0                    		xor eax,eax
  3911                                  fms_file_90:
  3912 00001FA3 C3                      		ret
  3913                                  
  3914                                  
  3915                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3916                                  ; Byte-swap cpio data if appropriate.
  3917                                  ;
  3918                                  ;  ax:		word to swap
  3919                                  ;
  3920                                  ; return:
  3921                                  ;  ax:		swapped if [fms_cpio_swab], otherwise same as input
  3922                                  ;
  3923                                  
  3924                                  		bits 32
  3925                                  
  3926                                  cpio_swab:
  3927 00001FA4 803D[A30B0000]00        		cmp byte [fms_cpio_swab],0
  3928 00001FAB 7402                    		jz cpio_swab_90
  3929 00001FAD 86E0                    		xchg ah,al
  3930                                  cpio_swab_90:
  3931 00001FAF C3                      		ret
  3932                                  
  3933                                  
  3934                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  3935                                  ; Find (and load) file.
  3936                                  ;
  3937                                  ;  eax		file name
  3938                                  ;
  3939                                  ; return:
  3940                                  ;  eax		file start
  3941                                  ;   bl		0/1: file/symlink 
  3942                                  ;
  3943                                  ; Note: use find_mem_size to find out file size.
  3944                                  ;
  3945                                  
  3946                                  		bits 32
  3947                                  
  3948                                  find_file:
  3949 00001FB0 89C6                    		mov esi,eax
  3950 00001FB2 B000                    		mov al,0
  3951 00001FB4 8B2D[1C000000]          		mov ebp,[archive.start]
  3952 00001FBA 09ED                    		or ebp,ebp
  3953 00001FBC 0F8480000000            		jz find_file_80
  3954                                  find_file_20:
  3955 00001FC2 89EB                    		mov ebx,ebp
  3956                                  
  3957 00001FC4 C605[A30B0000]00        		mov byte [fms_cpio_swab],0
  3958 00001FCB 2666813BC771            		cmp word [es:ebx],71c7h		; little-endian archive
  3959 00001FD1 740F                    		jz find_file_30
  3960 00001FD3 2666813B71C7            		cmp word [es:ebx],0c771h	; big-endian
  3961 00001FD9 7567                    		jnz find_file_80
  3962 00001FDB C605[A30B0000]01        		mov byte [fms_cpio_swab],1
  3963                                  find_file_30:
  3964 00001FE2 268A4307                		mov al,[es:ebx+7]
  3965 00001FE6 24F0                    		and al,0f0h
  3966 00001FE8 3CA0                    		cmp al,0a0h
  3967 00001FEA 0F94C0                  		setz al
  3968 00001FED 50                      		push eax
  3969 00001FEE 26668B4314              		mov ax,[es:ebx+20]	; file name size (incl. final 0)
  3970 00001FF3 E8ACFFFFFF              		call cpio_swab
  3971 00001FF8 0FB7C8                  		movzx ecx,ax
  3972 00001FFB 58                      		pop eax
  3973 00001FFC 89CA                    		mov edx,ecx
  3974 00001FFE 42                      		inc edx
  3975 00001FFF 83E2FE                  		and edx,~1		; align
  3976 00002002 8D7B1A                  		lea edi,[ebx+26]
  3977 00002005 8D6C131A                		lea ebp,[ebx+edx+26]	; points to data start
  3978 00002009 09C9                    		or ecx,ecx
  3979 0000200B 740D                    		jz find_file_50
  3980 0000200D 56                      		push esi
  3981 0000200E F326A6                  		es rep cmpsb
  3982 00002011 5E                      		pop esi
  3983 00002012 7506                    		jnz find_file_50
  3984 00002014 88C3                    		mov bl,al
  3985 00002016 89E8                    		mov eax,ebp
  3986 00002018 EB2C                    		jmp find_file_90
  3987                                  find_file_50:
  3988 0000201A 50                      		push eax
  3989 0000201B 268B4316                		mov eax,[es:ebx+22]	; data size
  3990 0000201F E880FFFFFF              		call cpio_swab
  3991 00002024 C1C010                  		rol eax,16		; strange word order
  3992 00002027 E878FFFFFF              		call cpio_swab
  3993 0000202C 89C1                    		mov ecx,eax
  3994 0000202E 58                      		pop eax
  3995                                  
  3996 0000202F 41                      		inc ecx
  3997 00002030 83E1FE                  		and ecx,~1		; align
  3998 00002033 01CD                    		add ebp,ecx
  3999 00002035 89E9                    		mov ecx,ebp
  4000 00002037 83C11A                  		add ecx,26
  4001 0000203A 3B0D[20000000]          		cmp ecx,[archive.end]
  4002 00002040 7280                    		jb find_file_20
  4003                                  find_file_80:
  4004 00002042 31C0                    		xor eax,eax
  4005 00002044 88C3                    		mov bl,al
  4006                                  find_file_90:
  4007 00002046 C3                      		ret
  4008                                  
  4009                                  
  4010                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4011                                  ; Set graphics mode.
  4012                                  ;
  4013                                  ;  [gfx_mode]	graphics mode (either vbe or normal mode number)
  4014                                  ;  [vbe_buffer]	buffer for vbe info
  4015                                  ;
  4016                                  ; return:
  4017                                  ;  CF		error
  4018                                  ;
  4019                                  
  4020                                  		bits 32
  4021                                  
  4022                                  set_mode:
  4023 00002047 66A1[67010000]          		mov ax,[gfx_mode]
  4024 0000204D 84E4                    		test ah,ah
  4025 0000204F 7561                    		jnz set_mode_20
  4026 00002051 CD10                    		int 10h
  4027 00002053 66C705[6F010000]00-     		mov word [window_seg_w],0a000h
  4028 0000205B A0                 
  4029 0000205C 668325[71010000]00      		and word [window_seg_r],0
  4030 00002064 C605[74010000]00        		mov byte [mapped_window],0
  4031                                  
  4032 0000206B A0[67010000]            		mov al,[gfx_mode]
  4033 00002070 3C13                    		cmp al,13h
  4034 00002072 7538                    		jnz set_mode_10
  4035                                  		; 320x200, 8 bit
  4036 00002074 66C705[E5000000]40-     		mov word [screen_width],320
  4037 0000207C 01                 
  4038 0000207D 66C705[E7000000]C8-     		mov word [screen_height],200
  4039 00002085 00                 
  4040 00002086 66C705[E9000000]C8-     		mov word [screen_vheight],200
  4041 0000208E 00                 
  4042 0000208F C705[ED000000]4001-     		mov dword [screen_line_len],320
  4043 00002097 0000               
  4044 00002099 C605[69010000]08        		mov byte [pixel_bits],8
  4045 000020A0 C605[6B010000]01        		mov byte [pixel_bytes],1
  4046 000020A7 E8A3010000              		call mode_init
  4047                                  set_mode_10:
  4048 000020AC F8                      		clc
  4049 000020AD E99C010000              		jmp set_mode_90
  4050                                  set_mode_20:
  4051 000020B2 8B1D[5C000000]          		mov ebx,[vbe_buffer]
  4052 000020B8 26C70356424532          		mov dword [es:ebx],32454256h	; 'VBE2'
  4053                                  
  4054 000020BF 89D8                    		mov eax,ebx
  4055 000020C1 C1E804                  		shr eax,4
  4056 000020C4 66A3[0E0A0000]          		mov [rm_seg.es],ax
  4057 000020CA 89DF                    		mov edi,ebx
  4058 000020CC 83E70F                  		and edi,0fh
  4059                                  
  4060 000020CF 66B8004F                		mov ax,4f00h
  4061 000020D3 53                      		push ebx
  4062 000020D4 CD10                    		int 10h
  4063 000020D6 5B                      		pop ebx
  4064 000020D7 6683F84F                		cmp ax,4fh
  4065 000020DB 0F8564010000            		jnz set_mode_80
  4066 000020E1 66B8014F                		mov ax,4f01h
  4067 000020E5 668B0D[67010000]        		mov cx,[gfx_mode]
  4068 000020EC 53                      		push ebx
  4069 000020ED CD10                    		int 10h
  4070 000020EF 5F                      		pop edi
  4071 000020F0 6683F84F                		cmp ax,4fh
  4072 000020F4 0F854B010000            		jnz set_mode_80
  4073                                  
  4074 000020FA 260FB74710              		movzx eax,word [es:edi+10h]
  4075 000020FF A3[ED000000]            		mov [screen_line_len],eax
  4076                                  
  4077 00002104 2666FF7712              		push word [es:edi+12h]
  4078 00002109 668F05[E5000000]        		pop word [screen_width]
  4079 00002110 2666FF7714              		push word [es:edi+14h]
  4080 00002115 668F05[E7000000]        		pop word [screen_height]
  4081                                  
  4082 0000211C 260FB6471D              		movzx eax,byte [es:edi+1dh]
  4083 00002121 40                      		inc eax
  4084 00002122 0FB70D[E7000000]        		movzx ecx,word [screen_height]
  4085 00002129 F7E1                    		mul ecx
  4086 0000212B 3DFF7F0000              		cmp eax,7fffh
  4087 00002130 7605                    		jbe set_mode_25
  4088 00002132 B8FF7F0000              		mov eax,7fffh
  4089                                  set_mode_25:
  4090 00002137 66A3[E9000000]          		mov [screen_vheight],ax
  4091                                  
  4092 0000213D 268A471B                		mov al,[es:edi+1bh]		; color mode (aka memory model)
  4093 00002141 268A6719                		mov ah,[es:edi+19h]		; color depth
  4094 00002145 88E6                    		mov dh,ah
  4095 00002147 3C06                    		cmp al,6			; direct color
  4096 00002149 750E                    		jnz set_mode_30
  4097 0000214B 268A771F                		mov dh,[es:edi+1fh]		; red
  4098 0000214F 26027721                		add dh,[es:edi+21h]		; green
  4099 00002153 26027723                		add dh,[es:edi+23h]		; blue
  4100 00002157 EB0A                    		jmp set_mode_40
  4101                                  set_mode_30:
  4102 00002159 3C04                    		cmp al,4			; PL 8
  4103 0000215B B408                    		mov ah,8
  4104 0000215D 88E6                    		mov dh,ah
  4105 0000215F 7402                    		jz set_mode_40
  4106 00002161 B400                    		mov ah,0
  4107                                  set_mode_40:
  4108 00002163 80FC08                  		cmp ah,8
  4109 00002166 740E                    		jz set_mode_45
  4110 00002168 80FC10                  		cmp ah,16
  4111 0000216B 7409                    		jz set_mode_45
  4112 0000216D 80FC20                  		cmp ah,32
  4113 00002170 0F85CF000000            		jnz set_mode_80
  4114                                  set_mode_45:
  4115                                  
  4116 00002176 8825[69010000]          		mov [pixel_bits],ah
  4117 0000217C C0EC03                  		shr ah,3
  4118 0000217F 8825[6B010000]          		mov [pixel_bytes],ah
  4119 00002185 8835[6A010000]          		mov [color_bits],dh
  4120                                  
  4121                                  		; we check if win A is readable _and_ writable; if not, we want
  4122                                  		; at least a writable win A and a readable win B
  4123                                  		; other, even more silly variations are not supported
  4124                                  
  4125 0000218B 26668B4708              		mov ax,[es:edi+8]		; win seg A
  4126 00002190 26668B5F0A              		mov bx,[es:edi+10]		; win seg B
  4127                                  
  4128 00002195 6609C0                  		or ax,ax
  4129 00002198 0F84A7000000            		jz set_mode_80
  4130 0000219E 66A3[6F010000]          		mov [window_seg_w],ax
  4131 000021A4 668325[71010000]00      		and word [window_seg_r],byte 0
  4132 000021AC 26668B5702              		mov dx,[es:edi+2]		; win A/B attributes
  4133 000021B1 6681E20707              		and dx,707h
  4134 000021B6 80FA07                  		cmp dl,7
  4135 000021B9 7438                    		jz set_mode_50		; win A is rw
  4136                                  
  4137 000021BB 6609DB                  		or bx,bx
  4138 000021BE 0F8481000000            		jz set_mode_80
  4139 000021C4 66891D[71010000]        		mov [window_seg_r],bx
  4140 000021CB 6689D1                  		mov cx,dx
  4141 000021CE 6681E20503              		and dx,305h
  4142 000021D3 6681FA0503              		cmp dx,305h
  4143 000021D8 7419                    		jz set_mode_50		; win A is w, win B is r
  4144                                  
  4145 000021DA 6681E10305              		and cx,503h
  4146 000021DF 6681F90305              		cmp cx,503h
  4147 000021E4 755F                    		jnz set_mode_80
  4148                                  					; win A is r, win B is w
  4149 000021E6 66A3[71010000]          		mov [window_seg_r],ax
  4150 000021EC 66891D[6F010000]        		mov [window_seg_w],bx
  4151                                  set_mode_50:
  4152 000021F3 26668B4706              		mov ax,[es:edi+6]	; win size (in kb)
  4153 000021F8 6683F840                		cmp ax,64
  4154 000021FC 7247                    		jb set_mode_80		; at least 64k
  4155 000021FE 31D2                    		xor edx,edx
  4156 00002200 26668B5F04              		mov bx,[es:edi+4]	; granularity (in kb)
  4157 00002205 6609DB                  		or bx,bx
  4158 00002208 743B                    		jz set_mode_80
  4159 0000220A 66F7F3                  		div bx
  4160 0000220D 6609D2                  		or dx,dx
  4161 00002210 7533                    		jnz set_mode_80
  4162 00002212 6609C0                  		or ax,ax
  4163 00002215 742E                    		jz set_mode_80
  4164 00002217 A2[73010000]            		mov [window_inc],al
  4165 0000221C C605[74010000]FF        		mov byte [mapped_window],0ffh
  4166 00002223 66B8024F                		mov ax,4f02h
  4167 00002227 668B1D[67010000]        		mov bx,[gfx_mode]
  4168 0000222E CD10                    		int 10h
  4169 00002230 6683F84F                		cmp ax,4fh
  4170 00002234 750F                    		jnz set_mode_80
  4171 00002236 B000                    		mov al,0
  4172 00002238 E8FC360000              		call set_win
  4173                                  
  4174 0000223D E80D000000              		call mode_init
  4175                                  
  4176 00002242 F8                      		clc
  4177                                  
  4178 00002243 EB09                    		jmp set_mode_90
  4179                                  set_mode_80:
  4180 00002245 668325[67010000]00      		and word [gfx_mode],0
  4181 0000224D F9                      		stc
  4182                                  set_mode_90:
  4183 0000224E C3                      		ret
  4184                                  
  4185                                  mode_init:
  4186                                  		; graphics window selectors
  4187                                  
  4188 0000224F 0FB705[6F010000]        		movzx eax,word [window_seg_w]
  4189 00002256 C1E004                  		shl eax,4
  4190 00002259 66BE4000                		mov si,pm_seg.screen_w16
  4191 0000225D E803580000              		call set_gdt_base_pm
  4192                                  
  4193 00002262 0FB70D[71010000]        		movzx ecx,word [window_seg_r]
  4194 00002269 C1E104                  		shl ecx,4
  4195 0000226C 7402                    		jz mode_init_05
  4196 0000226E 89C8                    		mov eax,ecx
  4197                                  mode_init_05:
  4198 00002270 66BE3800                		mov si,pm_seg.screen_r16
  4199 00002274 E8EC570000              		call set_gdt_base_pm
  4200                                  
  4201                                  		; pixel get/set functions
  4202                                  
  4203 00002279 C705[F1000000]-         		mov dword [setpixel],setpixel_8
  4204 0000227F [465B0000]         
  4205 00002283 C705[F5000000]-         		mov dword [setpixel_a],setpixel_a_8
  4206 00002289 [4B5B0000]         
  4207 0000228D C705[F9000000]-         		mov dword [setpixel_t],setpixel_8
  4208 00002293 [465B0000]         
  4209 00002297 C705[FD000000]-         		mov dword [setpixel_ta],setpixel_a_8
  4210 0000229D [4B5B0000]         
  4211 000022A1 C705[01010000]-         		mov dword [getpixel],getpixel_8
  4212 000022A7 [025C0000]         
  4213 000022AB 803D[69010000]08        		cmp byte [pixel_bits],8
  4214 000022B2 7478                    		jz mode_init_90
  4215 000022B4 803D[69010000]10        		cmp  byte [pixel_bits],16
  4216 000022BB 7534                    		jnz mode_init_50
  4217 000022BD C705[F1000000]-         		mov dword [setpixel],setpixel_16
  4218 000022C3 [4F5B0000]         
  4219 000022C7 C705[F5000000]-         		mov dword [setpixel_a],setpixel_a_16
  4220 000022CD [555B0000]         
  4221 000022D1 C705[F9000000]-         		mov dword [setpixel_t],setpixel_t_16
  4222 000022D7 [635B0000]         
  4223 000022DB C705[FD000000]-         		mov dword [setpixel_ta],setpixel_ta_16
  4224 000022E1 [695B0000]         
  4225 000022E5 C705[01010000]-         		mov dword [getpixel],getpixel_16
  4226 000022EB [065C0000]         
  4227 000022EF EB3B                    		jmp mode_init_90
  4228                                  mode_init_50:
  4229 000022F1 803D[69010000]20        		cmp byte [pixel_bits],32
  4230 000022F8 7532                    		jnz mode_init_90
  4231 000022FA C705[F1000000]-         		mov dword [setpixel],setpixel_32
  4232 00002300 [5A5B0000]         
  4233 00002304 C705[F5000000]-         		mov dword [setpixel_a],setpixel_a_32
  4234 0000230A [5F5B0000]         
  4235 0000230E C705[F9000000]-         		mov dword [setpixel_t],setpixel_t_32
  4236 00002314 [935B0000]         
  4237 00002318 C705[FD000000]-         		mov dword [setpixel_ta],setpixel_ta_32
  4238 0000231E [985B0000]         
  4239 00002322 C705[01010000]-         		mov dword [getpixel],getpixel_32
  4240 00002328 [0B5C0000]         
  4241                                  mode_init_90:
  4242 0000232C C3                      		ret
  4243                                  
  4244                                  
  4245                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4246                                  ; Get VBE mode list.
  4247                                  ;
  4248                                  ;  [vbe_buffer]	buffer for vbe info
  4249                                  ;
  4250                                  ; return:
  4251                                  ;  [vbe_mode_list]	mode list, last entry is 0xffff
  4252                                  ;  [screen_mem]		video memory size
  4253                                  ;
  4254                                  
  4255                                  		bits 32
  4256                                  
  4257                                  get_vbe_modes:
  4258 0000232D 8B1D[60000000]          		mov ebx,[vbe_mode_list]
  4259 00002333 2666833B00              		cmp word [es:ebx],0
  4260 00002338 756E                    		jnz get_vbe_modes_90
  4261                                  
  4262 0000233A 8B15[5C000000]          		mov edx,[vbe_buffer]
  4263 00002340 26C70256424532          		mov dword [es:edx],32454256h	; 'VBE2'
  4264                                  
  4265 00002347 89D0                    		mov eax,edx
  4266 00002349 C1E804                  		shr eax,4
  4267 0000234C 66A3[0E0A0000]          		mov [rm_seg.es],ax
  4268 00002352 89D7                    		mov edi,edx
  4269 00002354 83E70F                  		and edi,0fh
  4270                                  
  4271 00002357 66B8004F                		mov ax,4f00h
  4272 0000235B 53                      		push ebx
  4273 0000235C 52                      		push edx
  4274 0000235D CD10                    		int 10h
  4275 0000235F 5A                      		pop edx
  4276 00002360 5B                      		pop ebx
  4277                                  
  4278 00002361 89DF                    		mov edi,ebx
  4279                                  
  4280 00002363 6683F84F                		cmp ax,4fh
  4281 00002367 752E                    		jnz get_vbe_modes_20
  4282                                  
  4283 00002369 2666FF7212              		push word [es:edx+12h]
  4284 0000236E 668F05[EB000000]        		pop word [screen_mem]
  4285                                  
  4286 00002375 260FB7720E              		movzx esi,word [es:edx+0eh]
  4287 0000237A 260FB74210              		movzx eax,word [es:edx+0eh+2]
  4288 0000237F C1E004                  		shl eax,4
  4289 00002382 01C6                    		add esi,eax
  4290                                  
  4291 00002384 B9FF000000              		mov ecx,0ffh
  4292                                  get_vbe_modes_10:
  4293 00002389 2666AD                  		es lodsw
  4294 0000238C 66AB                    		stosw
  4295 0000238E 6683F8FF                		cmp ax,0ffffh
  4296 00002392 7409                    		jz get_vbe_modes_30
  4297 00002394 49                      		dec ecx
  4298 00002395 75F2                    		jnz get_vbe_modes_10
  4299                                  get_vbe_modes_20:
  4300 00002397 2666C707FFFF            		mov word [es:edi],0ffffh
  4301                                  get_vbe_modes_30:
  4302 0000239D 2666833B00              		cmp word [es:ebx],0
  4303 000023A2 7504                    		jnz get_vbe_modes_90
  4304                                  		; make sure it's not 0; mode 1 is the same as mode 0
  4305 000023A4 2666FF06                		inc word [es:esi]
  4306                                  
  4307                                  get_vbe_modes_90:
  4308 000023A8 C3                      		ret
  4309                                  
  4310                                  
  4311                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4312                                  ; Write text to console.
  4313                                  ;
  4314                                  ;  esi		format string
  4315                                  ;  [pf_gfx]	use ds:esi (0) or es:esi (1) 
  4316                                  ;
  4317                                  
  4318                                  		bits 32
  4319                                  
  4320                                  printf:
  4321 000023A9 C605[94080000]00        		mov byte [tmp_write_cnt],0
  4322                                  printf_10:
  4323 000023B0 E818010000              		call pf_next_char
  4324 000023B5 09C0                    		or eax,eax
  4325 000023B7 0F840F010000            		jz printf_90
  4326 000023BD 3C25                    		cmp al,'%'
  4327 000023BF 0F85FD000000            		jnz printf_70
  4328 000023C5 C605[95080000]20        		mov byte [tmp_write_pad],' '
  4329 000023CC E8FC000000              		call pf_next_char
  4330 000023D1 4E                      		dec esi
  4331 000023D2 3C30                    		cmp al,'0'
  4332 000023D4 7505                    		jnz printf_20
  4333 000023D6 A2[95080000]            		mov [tmp_write_pad],al
  4334                                  printf_20:
  4335 000023DB E842020000              		call get_number
  4336 000023E0 890D[8F080000]          		mov [tmp_write_num],ecx
  4337 000023E6 E8E2000000              		call pf_next_char
  4338 000023EB 09C0                    		or eax,eax
  4339 000023ED 0F84D9000000            		jz printf_90
  4340 000023F3 3C25                    		cmp al,'%'
  4341 000023F5 0F84C7000000            		jz printf_70
  4342                                  
  4343 000023FB 3C53                    		cmp al,'S'
  4344 000023FD 7509                    		jnz printf_23
  4345 000023FF C605[97080000]01        		mov byte [pf_gfx_raw_char],1
  4346 00002406 EB04                    		jmp printf_24
  4347                                  printf_23:
  4348 00002408 3C73                    		cmp al,'s'
  4349 0000240A 7529                    		jnz printf_30
  4350                                  printf_24:
  4351 0000240C 56                      		push esi
  4352                                  
  4353 0000240D E8C9000000              		call pf_next_arg
  4354 00002412 89C6                    		mov esi,eax
  4355 00002414 E819010000              		call write_str
  4356                                  
  4357 00002419 2B0D[8F080000]          		sub ecx,[tmp_write_num]
  4358 0000241F F7D9                    		neg ecx
  4359 00002421 B020                    		mov al,' '
  4360 00002423 E82E010000              		call write_chars
  4361                                  
  4362 00002428 5E                      		pop esi
  4363                                  
  4364 00002429 C605[97080000]00        		mov byte [pf_gfx_raw_char],0
  4365 00002430 E97BFFFFFF              		jmp printf_10
  4366                                  
  4367                                  printf_30:		
  4368 00002435 3C75                    		cmp al,'u'
  4369 00002437 7548                    		jnz printf_35
  4370                                  
  4371 00002439 66BA0A00                		mov dx,10
  4372                                  printf_31:
  4373 0000243D 56                      		push esi
  4374                                  
  4375 0000243E E898000000              		call pf_next_arg
  4376 00002443 08F6                    		or dh,dh
  4377 00002445 740F                    		jz printf_34
  4378 00002447 85C0                    		test eax,eax
  4379 00002449 790B                    		jns printf_34
  4380 0000244B F7D8                    		neg eax
  4381 0000244D 50                      		push eax
  4382 0000244E B02D                    		mov al,'-'
  4383 00002450 E80F010000              		call write_char
  4384 00002455 58                      		pop eax
  4385                                  printf_34:
  4386 00002456 8A0D[8F080000]          		mov cl,[tmp_write_num]
  4387 0000245C 8A2D[95080000]          		mov ch,[tmp_write_pad]
  4388 00002462 E8DE010000              		call number
  4389 00002467 803D[96080000]00        		cmp byte [pf_gfx],0
  4390 0000246E 7406                    		jz printf_345
  4391 00002470 0335[140A0000]          		add esi,[prog.base]
  4392                                  printf_345:
  4393 00002476 E8B7000000              		call write_str
  4394                                  printf_347:
  4395 0000247B 5E                      		pop esi
  4396                                  
  4397 0000247C E92FFFFFFF              		jmp printf_10
  4398                                  
  4399                                  printf_35:
  4400 00002481 3C78                    		cmp al,'x'
  4401 00002483 7506                    		jnz printf_36
  4402                                  
  4403                                  printf_35a:
  4404 00002485 66BA1000                		mov dx,10h
  4405 00002489 EBB2                    		jmp printf_31
  4406                                  
  4407                                  printf_36:
  4408 0000248B 3C64                    		cmp al,'d'
  4409 0000248D 7506                    		jnz printf_37
  4410                                  printf_36a:
  4411 0000248F 66BA0A01                		mov dx,10ah
  4412 00002493 EBA8                    		jmp printf_31
  4413                                  
  4414                                  printf_37:
  4415 00002495 3C69                    		cmp al,'i'
  4416 00002497 74F6                    		jz printf_36a
  4417                                  
  4418 00002499 3C70                    		cmp al,'p'
  4419 0000249B 7510                    		jnz printf_40
  4420 0000249D B030                    		mov al,'0'
  4421 0000249F E8C0000000              		call write_char
  4422 000024A4 B078                    		mov al,'x'
  4423 000024A6 E8B9000000              		call write_char
  4424 000024AB EBD8                    		jmp printf_35a
  4425                                  
  4426                                  printf_40:
  4427 000024AD 3C63                    		cmp al,'c'
  4428 000024AF 7511                    		jnz printf_45
  4429                                  
  4430 000024B1 56                      		push esi
  4431 000024B2 E824000000              		call pf_next_arg
  4432 000024B7 E8A8000000              		call write_char
  4433 000024BC 5E                      		pop esi
  4434 000024BD E9EEFEFFFF              		jmp printf_10
  4435                                  printf_45:
  4436                                  
  4437                                  		; more ...
  4438                                  		
  4439                                  
  4440                                  printf_70:
  4441 000024C2 E89D000000              		call write_char
  4442 000024C7 E9E4FEFFFF              		jmp printf_10
  4443                                  printf_90:		
  4444 000024CC C3                      		ret
  4445                                  
  4446                                  
  4447                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4448                                  ; Get next char for printf.
  4449                                  ;
  4450                                  ; esi		string
  4451                                  ;  [pf_gfx]	use ds:esi (0) or es:esi (1) 
  4452                                  ;
  4453                                  ; return:
  4454                                  ;  eax		char
  4455                                  ;  esi		points to next char
  4456                                  ;
  4457                                  
  4458                                  		bits 32
  4459                                  
  4460                                  pf_next_char:
  4461 000024CD 31C0                    		xor eax,eax
  4462 000024CF 803D[96080000]00        		cmp byte [pf_gfx],0
  4463 000024D6 7401                    		jz pf_next_char_50
  4464 000024D8 26                      		es		; ok, this _is_ evil code...
  4465                                  pf_next_char_50:
  4466 000024D9 AC                      		lodsb
  4467 000024DA C3                      		ret
  4468                                  
  4469                                  
  4470                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4471                                  ; Get next printf arg.
  4472                                  ;
  4473                                  ;  [pf_gfx]	get arg from [tmp_write_data] (0) or pstack (1)
  4474                                  ;
  4475                                  ; return:
  4476                                  ;  eax		arg
  4477                                  ;
  4478                                  ; changes no regs
  4479                                  ;
  4480                                  
  4481                                  		bits 32
  4482                                  
  4483                                  pf_next_arg:
  4484 000024DB 803D[96080000]00        		cmp byte [pf_gfx],0
  4485 000024E2 7439                    		jz pf_next_arg_50
  4486 000024E4 60                      		pusha
  4487 000024E5 31C9                    		xor ecx,ecx
  4488 000024E7 E86DF4FFFF              		call get_pstack_tos
  4489 000024EC A3[4F080000]            		mov [tmp_write_data],eax
  4490 000024F1 731C                    		jnc pf_next_arg_20
  4491 000024F3 8325[4F080000]00        		and dword [tmp_write_data],0
  4492 000024FA 66833D[98080000]00      		cmp word [pf_gfx_err],0
  4493 00002502 750B                    		jnz pf_next_arg_20
  4494 00002504 66C705[98080000]03-     		mov word [pf_gfx_err],pserr_pstack_underflow
  4495 0000250C 00                 
  4496 0000250D EB06                    		jmp pf_next_arg_30
  4497                                  pf_next_arg_20:
  4498 0000250F FF0D[C4000000]          		dec dword [pstack.ptr]
  4499                                  pf_next_arg_30:
  4500 00002515 61                      		popa
  4501 00002516 A1[4F080000]            		mov eax,[tmp_write_data]
  4502 0000251B EB14                    		jmp pf_next_arg_90
  4503                                  pf_next_arg_50:
  4504 0000251D 0FB605[94080000]        		movzx eax,byte [tmp_write_cnt]
  4505 00002524 FE05[94080000]          		inc byte [tmp_write_cnt]
  4506 0000252A 8B0485[4F080000]        		mov eax,[tmp_write_data+4*eax]
  4507                                  pf_next_arg_90:
  4508 00002531 C3                      		ret
  4509                                  
  4510                                  
  4511                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4512                                  ; Write string.
  4513                                  ;
  4514                                  ;  esi		text
  4515                                  ;  [pf_gfx]	use ds:esi (0) or es:esi (1) 
  4516                                  ;
  4517                                  ; return:
  4518                                  ;  ecx		length
  4519                                  ;
  4520                                  
  4521                                  		bits 32
  4522                                  
  4523                                  write_str:
  4524 00002532 31C9                    		xor ecx,ecx
  4525                                  write_str_10:
  4526 00002534 E894FFFFFF              		call pf_next_char
  4527 00002539 803D[96080000]00        		cmp byte [pf_gfx],0
  4528 00002540 7407                    		jz write_str_40
  4529 00002542 E88B3A0000              		call is_eot
  4530 00002547 EB02                    		jmp write_str_50
  4531                                  write_str_40:
  4532 00002549 09C0                    		or eax,eax
  4533                                  write_str_50:
  4534 0000254B 7408                    		jz write_str_90
  4535 0000254D E812000000              		call write_char
  4536 00002552 41                      		inc ecx
  4537 00002553 EBDF                    		jmp write_str_10
  4538                                  write_str_90:
  4539 00002555 C3                      		ret
  4540                                  
  4541                                  
  4542                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4543                                  ; Write char multiple times.
  4544                                  ;
  4545                                  ;  al		char
  4546                                  ;  ecx		count (does nothing if count <= 0)
  4547                                  ;  [pf_gfx]	write to console (0) or [pf_gfx_buf] (1)
  4548                                  ;
  4549                                  
  4550                                  		bits 32
  4551                                  
  4552                                  write_chars:
  4553 00002556 83F900                  		cmp ecx,0
  4554 00002559 7E08                    		jle write_chars_90
  4555 0000255B E804000000              		call write_char
  4556 00002560 49                      		dec ecx
  4557 00002561 EBF3                    		jmp write_chars
  4558                                  write_chars_90:
  4559 00002563 C3                      		ret
  4560                                  
  4561                                  
  4562                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4563                                  ; Write single char.
  4564                                  ;
  4565                                  ;  al		char
  4566                                  ;  [pf_gfx]	write to console (0) or [pf_gfx_buf] (1)
  4567                                  ;
  4568                                  ; Changes no regs.
  4569                                  ;
  4570                                  
  4571                                  		bits 32
  4572                                  
  4573                                  write_char:
  4574 00002564 60                      		pusha
  4575 00002565 803D[96080000]00        		cmp byte [pf_gfx],0
  4576 0000256C 7424                    		jz write_char_50
  4577 0000256E 8B1D[A4080000]          		mov ebx,[pf_gfx_cnt]
  4578 00002574 43                      		inc ebx
  4579 00002575 3B1D[A0080000]          		cmp ebx,[pf_gfx_max]
  4580 0000257B 7330                    		jae write_char_90		; leave room for final 0!
  4581 0000257D 891D[A4080000]          		mov [pf_gfx_cnt],ebx
  4582 00002583 031D[9C080000]          		add ebx,[pf_gfx_buf]
  4583 00002589 4B                      		dec ebx
  4584 0000258A B400                    		mov ah,0
  4585 0000258C 26668903                		mov [es:ebx],ax
  4586 00002590 EB1B                    		jmp write_char_90
  4587                                  write_char_50:
  4588 00002592 803D[97080000]00        		cmp byte [pf_gfx_raw_char],0
  4589 00002599 750D                    		jnz write_char_60
  4590 0000259B 3C0A                    		cmp al,0ah
  4591 0000259D 7509                    		jnz write_char_60
  4592 0000259F 50                      		push eax
  4593 000025A0 B00D                    		mov al,0dh
  4594 000025A2 E808000000              		call write_cons_char
  4595 000025A7 58                      		pop eax
  4596                                  write_char_60:
  4597 000025A8 E802000000              		call write_cons_char
  4598                                  write_char_90:
  4599 000025AD 61                      		popa
  4600 000025AE C3                      		ret
  4601                                  
  4602                                  
  4603                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4604                                  ; Write char on text console.
  4605                                  ;
  4606                                  ;  al		char
  4607                                  ;
  4608                                  
  4609                                  		bits 32
  4610                                  
  4611                                  write_cons_char:
  4612                                  		; vesa mode?
  4613 000025AF 803D[68010000]00        		cmp byte [gfx_mode+1],0
  4614 000025B6 7527                    		jnz write_cons_char_20
  4615 000025B8 66BB0700                		mov bx,7
  4616 000025BC 803D[97080000]00        		cmp byte [pf_gfx_raw_char],0
  4617 000025C3 7414                    		jz write_cons_char_10
  4618 000025C5 B40A                    		mov ah,0ah
  4619 000025C7 66B90100                		mov cx,1
  4620 000025CB CD10                    		int 10h
  4621 000025CD B403                    		mov ah,3
  4622 000025CF CD10                    		int 10h
  4623 000025D1 FEC2                    		inc dl
  4624 000025D3 B402                    		mov ah,2
  4625 000025D5 CD10                    		int 10h
  4626 000025D7 EB48                    		jmp write_cons_char_90
  4627                                  write_cons_char_10:
  4628 000025D9 B40E                    		mov ah,0eh
  4629 000025DB CD10                    		int 10h
  4630 000025DD EB42                    		jmp write_cons_char_90
  4631                                  write_cons_char_20:
  4632 000025DF 803D[97080000]00        		cmp byte [pf_gfx_raw_char],0
  4633 000025E6 7522                    		jnz write_cons_char_40
  4634 000025E8 3C0A                    		cmp al,0ah
  4635 000025EA 7510                    		jnz write_cons_char_30
  4636 000025EC 668B0D[20010000]        		mov cx,[cfont_height]
  4637 000025F3 66010D[26010000]        		add [con_y],cx
  4638 000025FA EB25                    		jmp write_cons_char_90
  4639                                  write_cons_char_30:
  4640 000025FC 3C0D                    		cmp al,0dh
  4641 000025FE 750A                    		jnz write_cons_char_40
  4642 00002600 668325[24010000]00      		and word [con_x],0
  4643 00002608 EB17                    		jmp write_cons_char_90
  4644                                  write_cons_char_40:
  4645 0000260A F9                      		stc
  4646 0000260B 19DB                    		sbb ebx,ebx		; -1
  4647 0000260D 803D[69010000]08        		cmp byte [pixel_bits],8
  4648 00002614 7706                    		ja write_cons_char_50
  4649 00002616 8A1D[E5010000]          		mov bl,[textmode_color]
  4650                                  write_cons_char_50:
  4651 0000261C E8B03F0000              		call con_char_xy
  4652                                  write_cons_char_90:
  4653 00002621 C3                      		ret
  4654                                  
  4655                                  
  4656                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4657                                  ; Convert string to number.
  4658                                  ;
  4659                                  ;  esi		string
  4660                                  ;  [pf_gfx]	use ds:esi (0) or es:esi (1) 
  4661                                  ;
  4662                                  ; return:
  4663                                  ;  ecx		number
  4664                                  ;  esi		points past number
  4665                                  ;  CF		not a number
  4666                                  ;
  4667                                  
  4668                                  		bits 32
  4669                                  
  4670                                  get_number:
  4671                                  
  4672 00002622 31C9                    		xor ecx,ecx
  4673 00002624 B401                    		mov ah,1
  4674                                  get_number_10:
  4675 00002626 E8A2FEFFFF              		call pf_next_char
  4676 0000262B 08C0                    		or al,al
  4677 0000262D 7412                    		jz get_number_90
  4678 0000262F 2C30                    		sub al,'0'
  4679 00002631 720E                    		jb get_number_90
  4680 00002633 3C09                    		cmp al,9
  4681 00002635 770A                    		ja get_number_90
  4682 00002637 0FB6C0                  		movzx eax,al
  4683 0000263A 6BC90A                  		imul ecx,ecx,10
  4684 0000263D 01C1                    		add ecx,eax
  4685 0000263F EBE5                    		jmp get_number_10
  4686                                  get_number_90:
  4687 00002641 4E                      		dec esi
  4688 00002642 D0EC                    		shr ah,1
  4689 00002644 C3                      		ret
  4690                                  
  4691                                  
  4692                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4693                                  ; Convert a number to string.
  4694                                  ;
  4695                                  ;  eax		number
  4696                                  ;  cl		field size
  4697                                  ;  ch		padding char
  4698                                  ;  dl		base
  4699                                  ;
  4700                                  ; return:
  4701                                  ;  ds:esi	string
  4702                                  ;
  4703                                  ; Note: esi is relative to [prog.base], not 0!
  4704                                  ;
  4705                                  
  4706                                  		bits 32
  4707                                  
  4708                                  number:
  4709 00002645 BF[2B080000]            		mov edi,num_buf
  4710 0000264A 033D[140A0000]          		add edi,[prog.base]
  4711 00002650 50                      		push eax
  4712 00002651 51                      		push ecx
  4713 00002652 88E8                    		mov al,ch
  4714 00002654 B923000000              		mov ecx,num_buf_end - num_buf
  4715 00002659 F3AA                    		rep stosb
  4716 0000265B 59                      		pop ecx
  4717 0000265C 58                      		pop eax
  4718 0000265D 0FB6C9                  		movzx ecx,cl
  4719 00002660 0FB6DA                  		movzx ebx,dl
  4720 00002663 2B3D[140A0000]          		sub edi,[prog.base]
  4721                                  number_10:
  4722 00002669 31D2                    		xor edx,edx
  4723 0000266B F7F3                    		div ebx
  4724 0000266D 80FA09                  		cmp dl,9
  4725 00002670 7603                    		jbe number_20
  4726 00002672 80C227                  		add dl,27h
  4727                                  number_20:
  4728 00002675 80C230                  		add dl,'0'
  4729 00002678 4F                      		dec edi
  4730 00002679 8817                    		mov [edi],dl
  4731 0000267B 09C0                    		or eax,eax
  4732 0000267D 7408                    		jz number_30
  4733 0000267F 81FF[2B080000]          		cmp edi,num_buf
  4734 00002685 77E2                    		ja number_10
  4735                                  number_30:
  4736 00002687 89FE                    		mov esi,edi
  4737 00002689 09C9                    		or ecx,ecx
  4738 0000268B 740C                    		jz number_90
  4739 0000268D 83F923                  		cmp ecx,num_buf_end - num_buf
  4740 00002690 7307                    		jae number_90
  4741 00002692 BE[4E080000]            		mov esi,num_buf_end
  4742 00002697 29CE                    		sub esi,ecx
  4743                                  number_90:
  4744 00002699 C3                      		ret
  4745                                  
  4746                                  
  4747                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4748                                  ; Print status/debug info window on console.
  4749                                  ;
  4750                                  
  4751                                  		bits 32
  4752                                  
  4753                                  ps_status_info:
  4754 0000269A 31D2                    		xor edx,edx
  4755 0000269C E803050000              		call con_xy
  4756                                  
  4757 000026A1 BE[FC0B0000]            		mov esi,msg_13
  4758 000026A6 E8FEFCFFFF              		call printf
  4759                                  
  4760 000026AB B907000000              		mov ecx,7
  4761                                  ps_status_info_10:
  4762 000026B0 51                      		push ecx
  4763                                  
  4764 000026B1 E8A3F2FFFF              		call get_pstack_tos
  4765 000026B6 721F                    		jc ps_status_info_20
  4766                                  		pf_arg_uint 0,ecx
  4767 000026B8 890D[4F080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  4768                                  		pf_arg_uchar 2,dl
  4769 000026BE 8325[57080000]00    <1>  and dword [tmp_write_data + %1 * 4],byte 0
  4770 000026C5 8815[57080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  4771                                  		pf_arg_uint 1,eax
  4772 000026CB A3[53080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4773 000026D0 BE[DD0B0000]            		mov esi,msg_11
  4774 000026D5 EB05                    		jmp ps_status_info_30
  4775                                  ps_status_info_20:
  4776 000026D7 BE[EB0B0000]            		mov esi,msg_12
  4777                                  ps_status_info_30:
  4778 000026DC E8C8FCFFFF              		call printf
  4779                                  
  4780 000026E1 59                      		pop ecx
  4781 000026E2 51                      		push ecx
  4782                                  
  4783 000026E3 E8D5F2FFFF              		call get_rstack_tos
  4784 000026E8 721F                    		jc ps_status_info_40
  4785                                  		pf_arg_uint 0,ecx
  4786 000026EA 890D[4F080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  4787                                  		pf_arg_uchar 2,dl
  4788 000026F0 8325[57080000]00    <1>  and dword [tmp_write_data + %1 * 4],byte 0
  4789 000026F7 8815[57080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  4790                                  		pf_arg_uint 1,eax
  4791 000026FD A3[53080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4792 00002702 BE[DD0B0000]            		mov esi,msg_11
  4793 00002707 EB05                    		jmp ps_status_info_50
  4794                                  ps_status_info_40:
  4795 00002709 BE[EB0B0000]            		mov esi,msg_12
  4796                                  ps_status_info_50:
  4797 0000270E E896FCFFFF              		call printf
  4798                                  
  4799 00002713 BE[650C0000]            		mov esi,msg_16
  4800 00002718 E88CFCFFFF              		call printf
  4801                                  
  4802 0000271D 59                      		pop ecx
  4803 0000271E 49                      		dec ecx
  4804 0000271F 7D8F                    		jge ps_status_info_10
  4805                                  
  4806 00002721 BE[1F0C0000]            		mov esi,msg_14
  4807 00002726 E87EFCFFFF              		call printf
  4808                                  
  4809 0000272B A1[96000000]            		mov eax,[pscode_error_arg_0]
  4810                                  		pf_arg_uint 1,eax
  4811 00002730 A3[53080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4812 00002735 A1[9A000000]            		mov eax,[pscode_error_arg_1]
  4813                                  		pf_arg_uint 2,eax
  4814 0000273A A3[57080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4815 0000273F 66A1[A2000000]          		mov ax,[pscode_error]
  4816                                  		pf_arg_ushort 0,ax
  4817 00002745 668325[51080000]00  <1>  and word [tmp_write_data + %1 * 4 + 2],byte 0
  4818 0000274D 66A3[4F080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  4819 00002753 BE[680C0000]            		mov esi,msg_17
  4820 00002758 663D0001                		cmp ax,100h
  4821 0000275C 7210                    		jb ps_status_info_60
  4822 0000275E BE[8B0C0000]            		mov esi,msg_18
  4823 00002763 663D0002                		cmp ax,200h
  4824 00002767 7205                    		jb ps_status_info_60
  4825 00002769 BE[A90C0000]            		mov esi,msg_19
  4826                                  ps_status_info_60:
  4827 0000276E E836FCFFFF              		call printf
  4828                                  
  4829 00002773 A1[86000000]            		mov eax,[pscode_instr]
  4830                                  		pf_arg_uint 0,eax
  4831 00002778 A3[4F080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4832 0000277D A1[9E000000]            		mov eax,[pscode_arg]
  4833                                  		pf_arg_uint 1,eax
  4834 00002782 A3[53080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4835 00002787 A1[96000000]            		mov eax,[pscode_error_arg_0]
  4836                                  		pf_arg_uint 3,eax
  4837 0000278C A3[5B080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4838 00002791 A1[9A000000]            		mov eax,[pscode_error_arg_1]
  4839                                  		pf_arg_uint 4,eax
  4840 00002796 A3[5F080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4841 0000279B A0[A4000000]            		mov al,[pscode_type]
  4842                                  		pf_arg_uchar 2,al
  4843 000027A0 8325[57080000]00    <1>  and dword [tmp_write_data + %1 * 4],byte 0
  4844 000027A7 A2[57080000]        <1>  mov [tmp_write_data + %1 * 4],%2
  4845                                  
  4846 000027AC BE[BF0B0000]            		mov esi,msg_10
  4847 000027B1 3C08                    		cmp al,t_sec
  4848 000027B3 7505                    		jnz ps_status_info_70
  4849 000027B5 BE[C20C0000]            		mov esi,msg_20
  4850                                  ps_status_info_70:
  4851 000027BA E8EAFBFFFF              		call printf
  4852                                  
  4853 000027BF 31C9                    		xor ecx,ecx
  4854 000027C1 E893F1FFFF              		call get_pstack_tos
  4855 000027C6 7304                    		jnc ps_status_info_71
  4856 000027C8 B200                    		mov dl,t_none
  4857 000027CA 31C0                    		xor eax,eax
  4858                                  ps_status_info_71:
  4859 000027CC 8B2D[140A0000]          		mov ebp,[prog.base]
  4860 000027D2 50                      		push eax
  4861 000027D3 B020                    		mov al,' '
  4862 000027D5 8DBD[2B080000]          		lea edi,[num_buf+ebp]
  4863 000027DB B91F000000              		mov ecx,1fh		; watch num_buf_end
  4864 000027E0 F3AA                    		rep stosb
  4865 000027E2 26880F                  		mov [es:edi],cl
  4866 000027E5 58                      		pop eax
  4867                                  
  4868 000027E6 80FA04                  		cmp dl,t_string
  4869 000027E9 7526                    		jnz ps_status_info_79
  4870                                  
  4871 000027EB 89C6                    		mov esi,eax
  4872                                  
  4873 000027ED 8DBD[2B080000]          		lea edi,[num_buf+ebp]
  4874 000027F3 B0AF                    		mov al,0afh
  4875 000027F5 AA                      		stosb
  4876                                  ps_status_info_72:
  4877 000027F6 26AC                    		es lodsb
  4878 000027F8 08C0                    		or al,al
  4879 000027FA 740E                    		jz ps_status_info_73
  4880 000027FC AA                      		stosb
  4881 000027FD 26807F0100              		cmp byte [es:edi+1],0
  4882 00002802 75F2                    		jnz ps_status_info_72
  4883 00002804 26803E00                		cmp byte [es:esi],0
  4884 00002808 7504                    		jnz ps_status_info_74
  4885                                  ps_status_info_73:		
  4886 0000280A B0AE                    		mov al,0aeh
  4887 0000280C EB02                    		jmp ps_status_info_75
  4888                                  ps_status_info_74:
  4889 0000280E B0AF                    		mov al,0afh
  4890                                  ps_status_info_75:
  4891 00002810 AA                      		stosb
  4892                                  
  4893                                  ps_status_info_79:
  4894 00002811 BE[2B080000]            		mov esi,num_buf
  4895                                  		pf_arg_uint 0,esi
  4896 00002816 8935[4F080000]      <1>  mov [tmp_write_data + %1 * 4],%2
  4897 0000281C BE[DC0C0000]            		mov esi,msg_21
  4898 00002821 E883FBFFFF              		call printf
  4899                                  
  4900                                  ps_status_info_80:
  4901 00002826 BE[420C0000]            		mov esi,msg_15
  4902 0000282B E879FBFFFF              		call printf
  4903                                  
  4904 00002830 C3                      		ret
  4905                                  
  4906                                  
  4907                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4908                                  ; Read a key (blocking).
  4909                                  ;
  4910                                  ; return:
  4911                                  ;  eax		key
  4912                                  ;
  4913                                  
  4914                                  		bits 32
  4915                                  
  4916                                  get_key:
  4917 00002831 31C0                    		xor eax,eax
  4918 00002833 8705[11090000]          		xchg eax,[serial.key]
  4919 00002839 09C0                    		or eax,eax
  4920 0000283B 7515                    		jnz get_key_90
  4921                                  get_key_30:
  4922 0000283D B410                    		mov ah,10h
  4923 0000283F CD16                    		int 16h
  4924                                  get_key_80:
  4925 00002841 25FFFF0000              		and eax,0ffffh
  4926 00002846 268B0D15040000          		mov ecx,[es:417h-2]
  4927 0000284D 6631C9                  		xor cx,cx
  4928 00002850 01C8                    		add eax,ecx
  4929                                  get_key_90:
  4930 00002852 C3                      		ret
  4931                                  
  4932                                  
  4933                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  4934                                  ; Read a key, return 0 if timed out
  4935                                  ;
  4936                                  ; return:
  4937                                  ;  eax		key (or 0)
  4938                                  ;
  4939                                  
  4940                                  		bits 32
  4941                                  
  4942                                  get_key_to:
  4943 00002853 E8F4020000              		call get_time
  4944 00002858 92                      		xchg eax,edx
  4945                                  get_key_to_20:
  4946 00002859 B411                    		mov ah,11h
  4947 0000285B CD16                    		int 16h
  4948 0000285D 7574                    		jnz get_key_to_60
  4949 0000285F 803D[F4010000]00        		cmp byte [idle.run],0
  4950 00002866 7405                    		jz get_key_to_25
  4951 00002868 E845030000              		call idle
  4952                                  get_key_to_25:
  4953 0000286D 2666A117040000          		mov ax,[es:417h]
  4954 00002874 663B05[E0080000]        		cmp ax,[kbd_status]
  4955 0000287B 66A3[E0080000]          		mov [kbd_status],ax
  4956 00002881 7405                    		jz get_key_to_30
  4957 00002883 6631C0                  		xor ax,ax
  4958 00002886 EB4B                    		jmp get_key_to_60
  4959                                  
  4960                                  get_key_to_30:
  4961 00002888 BE[E2080000]            		mov esi,serial.lines
  4962                                  get_key_to_35:
  4963 0000288D F6460501                		test byte [esi+sl.status],1
  4964 00002891 7407                    		jz get_key_to_40
  4965                                  
  4966 00002893 E86E000000              		call serial_get_byte
  4967 00002898 7539                    		jnz get_key_to_60
  4968                                  
  4969                                  get_key_to_40:
  4970 0000289A 83C609                  		add esi,sl.size
  4971 0000289D 81FE[0F090000]          		cmp esi,serial.lines + serial.lines.max * sl.size
  4972 000028A3 72E8                    		jb get_key_to_35
  4973                                  
  4974                                  get_key_to_50:
  4975 000028A5 E8A2020000              		call get_time
  4976 000028AA 39C2                    		cmp edx,eax
  4977 000028AC 74AB                    		jz get_key_to_20
  4978                                  
  4979 000028AE 50                      		push eax
  4980 000028AF E84FEFFFFF              		call timer
  4981 000028B4 5A                      		pop edx
  4982                                  
  4983 000028B5 A1[B0080000]            		mov eax,[input_timeout]
  4984 000028BA 09C0                    		or eax,eax
  4985 000028BC 749B                    		jz get_key_to_20
  4986                                  
  4987 000028BE FF0D[B0080000]          		dec dword [input_timeout]
  4988 000028C4 9C                      		pushf
  4989 000028C5 52                      		push edx
  4990 000028C6 E8D2EEFFFF              		call timeout
  4991 000028CB 5A                      		pop edx
  4992 000028CC 9D                      		popf
  4993 000028CD 758A                    		jnz get_key_to_20
  4994                                  
  4995 000028CF 31C0                    		xor eax,eax
  4996 000028D1 EB2B                    		jmp get_key_to_90
  4997                                  
  4998                                  get_key_to_60:
  4999 000028D3 9C                      		pushf
  5000 000028D4 833D[B0080000]00        		cmp dword [input_timeout],0
  5001 000028DB 740C                    		jz get_key_to_70
  5002 000028DD 8325[B0080000]00        		and dword [input_timeout],0
  5003 000028E4 E8B4EEFFFF              		call timeout
  5004                                  get_key_to_70:
  5005 000028E9 9D                      		popf
  5006 000028EA 750D                    		jnz get_key_to_80
  5007 000028EC 66A1[E0080000]          		mov ax,[kbd_status]
  5008 000028F2 C1E010                  		shl eax,16
  5009 000028F5 B4FF                    		mov ah,0ffh
  5010 000028F7 EB05                    		jmp get_key_to_90
  5011                                  get_key_to_80:
  5012 000028F9 E833FFFFFF              		call get_key
  5013                                  get_key_to_90:
  5014 000028FE C605[F5010000]01        		mov byte [idle.invalid],1
  5015 00002905 C3                      		ret
  5016                                  
  5017                                  
  5018                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5019                                  ; Read serial line input.
  5020                                  ;
  5021                                  ;  [esi]	serial info struct
  5022                                  ;
  5023                                  ; return:
  5024                                  ;  ZF		0: ok, key in [serial.key]
  5025                                  ;		1: no key
  5026                                  ;
  5027                                  
  5028                                  serial_get_byte:
  5029 00002906 60                      		pusha
  5030 00002907 668B16                  		mov dx,[esi+sl.port]
  5031 0000290A 6683C205                		add dx,5
  5032 0000290E EC                      		in al,dx
  5033 0000290F A801                    		test al,1
  5034 00002911 0F849E000000            		jz serial_gb_80
  5035 00002917 88C4                    		mov ah,al
  5036 00002919 6683EA05                		sub dx,5
  5037 0000291D EC                      		in al,dx
  5038 0000291E F6460504                		test byte [esi+sl.status],4		; autodetect?
  5039 00002922 747E                    		jz serial_gb_70				; no
  5040 00002924 8A5E07                  		mov bl,[esi+sl.recv_cnt]
  5041 00002927 FEC3                    		inc bl
  5042 00002929 885E07                  		mov [esi+sl.recv_cnt],bl
  5043 0000292C 8A7E06                  		mov bh,[esi+sl.recv_mask]
  5044 0000292F 66A98018                		test ax,1880h
  5045 00002933 7401                    		jz serial_gb_50
  5046 00002935 F9                      		stc
  5047                                  serial_gb_50:
  5048 00002936 10FF                    		adc bh,bh
  5049 00002938 887E06                  		mov [esi+sl.recv_mask],bh
  5050                                  
  5051 0000293B 80FB01                  		cmp bl,1
  5052 0000293E 7707                    		ja serial_gb_62
  5053                                  		; 1 char
  5054                                  		; if ok, return it, else skip
  5055 00002940 F6C701                  		test bh,1
  5056 00002943 745D                    		jz serial_gb_70
  5057 00002945 EB6E                    		jmp serial_gb_80
  5058                                  serial_gb_62:
  5059 00002947 80FB02                  		cmp bl,2
  5060 0000294A 7707                    		ja serial_gb_63
  5061                                  		; 2 chars
  5062                                  		; if last 2 were ok, return it, else skip
  5063 0000294C F6C703                  		test bh,3
  5064 0000294F 7451                    		jz serial_gb_70
  5065 00002951 EB62                    		jmp serial_gb_80
  5066                                  serial_gb_63:
  5067 00002953 80FB03                  		cmp bl,3
  5068 00002956 7714                    		ja serial_gb_64
  5069                                  		; 3 chars
  5070                                  		; if last 2 were ok, return it
  5071                                  		; if last 2 broken: choose new freq
  5072 00002958 F6C703                  		test bh,3
  5073 0000295B 7445                    		jz serial_gb_70
  5074 0000295D 80E703                  		and bh,3
  5075 00002960 80FF03                  		cmp bh,3
  5076 00002963 7550                    		jnz serial_gb_80
  5077 00002965 E850000000              		call serial_new_baud
  5078 0000296A EB49                    		jmp serial_gb_80
  5079                                  serial_gb_64:
  5080 0000296C 80FB04                  		cmp bl,4
  5081 0000296F 7714                    		ja serial_gb_65
  5082                                  		; 4 chars
  5083                                  		; if last 2 were ok, return it
  5084                                  		; if last 2 broken: choose new freq
  5085 00002971 F6C703                  		test bh,3
  5086 00002974 742C                    		jz serial_gb_70
  5087 00002976 80E703                  		and bh,3
  5088 00002979 80FF03                  		cmp bh,3
  5089 0000297C 7537                    		jnz serial_gb_80
  5090 0000297E E837000000              		call serial_new_baud
  5091 00002983 EB30                    		jmp serial_gb_80
  5092                                  serial_gb_65:
  5093                                  		; 5 chars & more
  5094                                  		; if last 4 ok, return it & turn off autodetect
  5095                                  		; if last 2 were ok, return it
  5096                                  		; if last 2 broken: choose new freq
  5097 00002985 F6C70F                  		test bh,0fh
  5098 00002988 7504                    		jnz serial_gb_66
  5099 0000298A 806605FB                		and byte [esi+sl.status],~4
  5100                                  serial_gb_66:
  5101 0000298E F6C703                  		test bh,3
  5102 00002991 740F                    		jz serial_gb_70
  5103 00002993 80E703                  		and bh,3
  5104 00002996 80FF03                  		cmp bh,3
  5105 00002999 751A                    		jnz serial_gb_80
  5106 0000299B E81A000000              		call serial_new_baud
  5107 000029A0 EB13                    		jmp serial_gb_80
  5108                                  
  5109                                  serial_gb_70:
  5110 000029A2 25FF000000              		and eax,0ffh
  5111 000029A7 8A6604                  		mov ah,[esi+sl.scancode]
  5112 000029AA A3[11090000]            		mov [serial.key],eax
  5113                                  		; ZF = 0
  5114 000029AF 804E0502                		or byte [esi+sl.status],2
  5115 000029B3 EB03                    		jmp serial_gb_90
  5116                                  serial_gb_80:
  5117                                  		; ZF = 1
  5118 000029B5 6631C0                  		xor ax,ax
  5119                                  serial_gb_90:
  5120 000029B8 61                      		popa
  5121 000029B9 C3                      		ret
  5122                                  
  5123                                  
  5124                                  serial_new_baud:
  5125 000029BA 0FB65E08                		movzx ebx,byte [esi+sl.baud_idx]
  5126 000029BE 43                      		inc ebx
  5127 000029BF 8A83[15090000]          		mov al,[serial.baud_tab+ebx]
  5128 000029C5 08C0                    		or al,al
  5129 000029C7 7507                    		jnz serial_nb_20
  5130 000029C9 31DB                    		xor ebx,ebx
  5131 000029CB A0[15090000]            		mov al,[serial.baud_tab]
  5132                                  serial_nb_20:
  5133 000029D0 885E08                  		mov [esi+sl.baud_idx],bl
  5134 000029D3 884602                  		mov [esi+sl.baud],al
  5135                                  
  5136 000029D6 668B16                  		mov dx,[esi+sl.port]
  5137 000029D9 6683C203                		add dx,3
  5138 000029DD B083                    		mov al,83h
  5139 000029DF E811010000              		call slow_out
  5140 000029E4 6683EA03                		sub dx,3
  5141 000029E8 8A4602                  		mov al,[esi+sl.baud]
  5142 000029EB E805010000              		call slow_out
  5143 000029F0 6642                    		inc dx
  5144 000029F2 8A4603                  		mov al,[esi+sl.baud+1]
  5145 000029F5 E8FB000000              		call slow_out
  5146 000029FA B003                    		mov al,03h
  5147 000029FC 6683C202                		add dx,2
  5148 00002A00 E8F0000000              		call slow_out
  5149                                  
  5150 00002A05 31C0                    		xor eax,eax
  5151 00002A07 884606                  		mov [esi+sl.recv_mask],al
  5152 00002A0A 884607                  		mov [esi+sl.recv_cnt],al
  5153                                  
  5154                                  serial_nb_80:
  5155 00002A0D 668B16                  		mov dx,[esi+sl.port]
  5156 00002A10 6683C205                		add dx,5
  5157 00002A14 EC                      		in al,dx
  5158 00002A15 A801                    		test al,1
  5159 00002A17 7407                    		jz serial_nb_90
  5160 00002A19 6683EA05                		sub dx,5
  5161 00002A1D EC                      		in al,dx
  5162 00002A1E EBED                    		jmp serial_nb_80
  5163                                  
  5164                                  serial_nb_90:
  5165 00002A20 C3                      		ret
  5166                                  
  5167                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5168                                  ; Clear keyboard input buffer.
  5169                                  ;
  5170                                  
  5171                                  		bits 32
  5172                                  
  5173                                  clear_kbd_queue:
  5174 00002A21 B411                    		mov ah,11h
  5175 00002A23 CD16                    		int 16h
  5176 00002A25 7406                    		jz clear_kbd_queue_90
  5177 00002A27 B410                    		mov ah,10h
  5178 00002A29 CD16                    		int 16h
  5179 00002A2B EBF4                    		jmp clear_kbd_queue
  5180                                  clear_kbd_queue_90:
  5181 00002A2D C3                      		ret
  5182                                  
  5183                                  
  5184                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5185                                  ; Setup serial lines.
  5186                                  ;
  5187                                  
  5188                                  		bits 32
  5189                                  
  5190                                  serial_setup:
  5191 00002A2E BE[E2080000]            		mov esi,serial.lines
  5192                                  
  5193                                  		; add bootloader configured port to end of our list
  5194 00002A33 66A1[0F090000]          		mov ax,[serial.port_noinit]
  5195 00002A39 6609C0                  		or ax,ax
  5196 00002A3C 740C                    		jz serial_setup_10
  5197 00002A3E 66894624                		mov [esi + (serial.lines.max - 1) * sl.size + sl.port],ax
  5198 00002A42 C64628F4                		mov byte [esi + (serial.lines.max - 1) * sl.size + sl.scancode],0xf0 + serial.lines.max - 1
  5199 00002A46 C6462901                		mov byte [esi + (serial.lines.max - 1) * sl.size + sl.status],1
  5200                                  
  5201                                  		; ensure every port is listed only once
  5202                                  
  5203                                  serial_setup_10:
  5204 00002A4A F6460501                		test byte [esi+sl.status],1
  5205 00002A4E 7420                    		jz serial_setup_40
  5206 00002A50 668B06                  		mov ax,[esi+sl.port]
  5207 00002A53 8D7E09                  		lea edi,[esi+sl.size]
  5208                                  serial_setup_20:
  5209 00002A56 F6470501                		test byte [edi+sl.status],1
  5210 00002A5A 7409                    		jz serial_setup_30
  5211 00002A5C 663B07                  		cmp ax,[edi+sl.port]
  5212 00002A5F 7504                    		jnz serial_setup_30
  5213 00002A61 C6470500                		mov byte [edi+sl.status],0
  5214                                  serial_setup_30:
  5215 00002A65 83C709                  		add edi,sl.size
  5216 00002A68 81FF[0F090000]          		cmp edi,serial.lines + serial.lines.max * sl.size
  5217 00002A6E 72E6                    		jb serial_setup_20
  5218                                  
  5219                                  serial_setup_40:
  5220 00002A70 83C609                  		add esi,sl.size
  5221 00002A73 81FE[06090000]          		cmp esi,serial.lines + (serial.lines.max - 1) * sl.size
  5222 00002A79 72CF                    		jb serial_setup_10
  5223                                  
  5224                                  		; set them up
  5225                                  
  5226 00002A7B BE[E2080000]            		mov esi,serial.lines
  5227                                  serial_setup_50:
  5228 00002A80 F6460501                		test byte [esi+sl.status],1
  5229 00002A84 7463                    		jz serial_setup_70
  5230                                  
  5231 00002A86 668B06                  		mov ax,[esi+sl.port]
  5232 00002A89 663B05[0F090000]        		cmp ax,[serial.port_noinit]
  5233 00002A90 7457                    		jz serial_setup_70
  5234                                  
  5235                                  		; serial port init taken from syslinux
  5236 00002A92 8D5003                  		lea edx,[eax+3]			; DX -> LCR
  5237 00002A95 B083                    		mov al,83h			; Enable DLAB
  5238 00002A97 E859000000              		call slow_out
  5239 00002A9C 6683EA03                		sub dx,3			; DX -> LS
  5240 00002AA0 8A4602                  		mov al,[esi+sl.baud]		; Divisor, low
  5241 00002AA3 E84D000000              		call slow_out
  5242 00002AA8 6642                    		inc dx				; DX -> MS
  5243 00002AAA 8A4603                  		mov al,[esi+sl.baud+1]		; Divisor, high
  5244 00002AAD E843000000              		call slow_out
  5245 00002AB2 B003                    		mov al,03h			; Disable DLAB
  5246 00002AB4 6642                    		inc dx				; DX -> LCR
  5247 00002AB6 6642                    		inc dx
  5248 00002AB8 E838000000              		call slow_out
  5249 00002ABD EC                      		in al,dx			; Read back LCR (detect missing hw)
  5250 00002ABE 3C03                    		cmp al,03h			; If nothing here we'll read 00 or FF
  5251 00002AC0 7406                    		jz serial_setup_60
  5252 00002AC2 C6460500                		mov byte [esi+sl.status],0
  5253 00002AC6 EB21                    		jmp serial_setup_70
  5254                                  serial_setup_60:
  5255 00002AC8 664A                    		dec dx
  5256 00002ACA 664A                    		dec dx				; DX -> IER
  5257 00002ACC 30C0                    		xor al,al			; IRQ disable
  5258 00002ACE E822000000              		call slow_out
  5259 00002AD3 6642                    		inc dx				; DX -> FCR/IIR
  5260 00002AD5 B001                    		mov al,01h
  5261 00002AD7 E819000000              		call slow_out			; Enable FIFOs if present
  5262 00002ADC EC                      		in al,dx
  5263 00002ADD 3CC0                    		cmp al,0C0h			; FIFOs enabled and usable?
  5264 00002ADF 7308                    		jae serial_setup_70
  5265 00002AE1 6631C0                  		xor ax,ax			; Disable FIFO if unusable
  5266 00002AE4 E80C000000              		call slow_out
  5267                                  
  5268                                  serial_setup_70:
  5269 00002AE9 83C609                  		add esi,sl.size
  5270 00002AEC 81FE[06090000]          		cmp esi,serial.lines + (serial.lines.max - 1) * sl.size
  5271 00002AF2 728C                    		jb serial_setup_50
  5272                                  
  5273                                  serial_setup_90:
  5274 00002AF4 C3                      		ret
  5275                                  
  5276                                  
  5277                                  slow_out:
  5278 00002AF5 EE                      		out dx,al
  5279                                  
  5280 00002AF6 E680                    		out 80h,al
  5281 00002AF8 E680                    		out 80h,al
  5282 00002AFA C3                      		ret
  5283                                  
  5284                                  
  5285                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5286                                  ; Setup serial lines.
  5287                                  ;
  5288                                  ;  eax		char
  5289                                  ;
  5290                                  
  5291                                  		bits 32
  5292                                  
  5293                                  serial_putc:
  5294 00002AFB 89C3                    		mov ebx,eax
  5295 00002AFD 88C4                    		mov ah,al
  5296 00002AFF BE[E2080000]            		mov esi,serial.lines
  5297 00002B04 C1EB18                  		shr ebx,24
  5298                                  serial_putc_20:
  5299 00002B07 F6460502                		test byte [esi+sl.status],2
  5300 00002B0B 7433                    		jz serial_putc_70
  5301                                  
  5302 00002B0D 08DB                    		or bl,bl
  5303 00002B0F 7405                    		jz serial_putc_30
  5304 00002B11 3A5E04                  		cmp bl,[esi+sl.scancode]
  5305 00002B14 752A                    		jnz serial_putc_70
  5306                                  serial_putc_30:
  5307 00002B16 668B16                  		mov dx,[esi+sl.port]
  5308                                  
  5309 00002B19 6683C205                		add dx,5
  5310 00002B1D 268B3D6C040000          		mov edi,[es:46ch]
  5311 00002B24 83C703                  		add edi,3
  5312                                  serial_putc_50:
  5313                                  		; wait until output reg ready (about 1/10s)
  5314 00002B27 263B3D6C040000          		cmp edi,[es:46ch]
  5315 00002B2E 7210                    		jb serial_putc_70
  5316                                  
  5317 00002B30 EC                      		in al,dx
  5318 00002B31 A820                    		test al,20h
  5319 00002B33 74F2                    		jz serial_putc_50
  5320 00002B35 6683EA05                		sub dx,5
  5321 00002B39 88E0                    		mov al,ah
  5322 00002B3B E8B5FFFFFF              		call slow_out
  5323                                  
  5324                                  serial_putc_70:
  5325 00002B40 83C609                  		add esi,sl.size
  5326 00002B43 81FE[0F090000]          		cmp esi,serial.lines + serial.lines.max * sl.size
  5327 00002B49 72BC                    		jb serial_putc_20
  5328                                  
  5329                                  serial_putc_90:
  5330 00002B4B C3                      		ret
  5331                                  
  5332                                  
  5333                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5334                                  ; Get system time.
  5335                                  ;
  5336                                  ; return:
  5337                                  ;  eax		clock ticks since midnight (18.2/s)
  5338                                  ;
  5339                                  
  5340                                  		bits 32
  5341                                  
  5342                                  get_time:
  5343 00002B4C 51                      		push ecx
  5344 00002B4D 52                      		push edx
  5345 00002B4E 31C0                    		xor eax,eax
  5346 00002B50 CD1A                    		int 1ah
  5347 00002B52 6651                    		push cx
  5348 00002B54 6652                    		push dx
  5349 00002B56 58                      		pop eax
  5350 00002B57 5A                      		pop edx
  5351 00002B58 59                      		pop ecx
  5352 00002B59 C3                      		ret
  5353                                  
  5354                                  
  5355                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5356                                  ; Convert 8 bit bcd to binary.
  5357                                  ;
  5358                                  ;  al		bcd
  5359                                  ;
  5360                                  ; return
  5361                                  ;  ax		binary
  5362                                  ;
  5363                                  
  5364                                  		bits 32
  5365                                  
  5366                                  bcd2bin:
  5367 00002B5A 52                      		push edx
  5368 00002B5B 88C2                    		mov dl,al
  5369 00002B5D C0E804                  		shr al,4
  5370 00002B60 80E20F                  		and dl,0fh
  5371 00002B63 B40A                    		mov ah,10
  5372 00002B65 F6E4                    		mul ah
  5373 00002B67 00D0                    		add al,dl
  5374 00002B69 5A                      		pop edx
  5375 00002B6A C3                      		ret
  5376                                  
  5377                                  
  5378                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5379                                  ; Get date.
  5380                                  ;
  5381                                  ; return:
  5382                                  ;  eax		date (year:16, month:8, day:8)
  5383                                  ;
  5384                                  
  5385                                  		bits 32
  5386                                  
  5387                                  get_date:
  5388 00002B6B F8                      		clc
  5389 00002B6C B404                    		mov ah,4
  5390 00002B6E CD1A                    		int 1ah
  5391 00002B70 7304                    		jnc get_date_10
  5392 00002B72 31D2                    		xor edx,edx
  5393 00002B74 31C9                    		xor ecx,ecx
  5394                                  get_date_10:
  5395 00002B76 88E8                    		mov al,ch
  5396 00002B78 E8DDFFFFFF              		call bcd2bin
  5397 00002B7D 666BD864                		imul bx,ax,100
  5398 00002B81 88C8                    		mov al,cl
  5399 00002B83 E8D2FFFFFF              		call bcd2bin
  5400 00002B88 6601C3                  		add bx,ax
  5401 00002B8B C1E310                  		shl ebx,16
  5402 00002B8E 88F0                    		mov al,dh
  5403 00002B90 E8C5FFFFFF              		call bcd2bin
  5404 00002B95 88C7                    		mov bh,al
  5405 00002B97 88D0                    		mov al,dl
  5406 00002B99 E8BCFFFFFF              		call bcd2bin
  5407 00002B9E 6601C3                  		add bx,ax
  5408 00002BA1 89D8                    		mov eax,ebx
  5409 00002BA3 C3                      		ret
  5410                                  
  5411                                  
  5412                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5413                                  ; Set console cursor position.
  5414                                  ;
  5415                                  ;  dh		row
  5416                                  ;  dl		column
  5417                                  ;
  5418                                  ; return:
  5419                                  ;
  5420                                  
  5421                                  		bits 32
  5422                                  
  5423                                  con_xy:
  5424 00002BA4 B700                    		mov bh,0
  5425 00002BA6 B402                    		mov ah,2
  5426 00002BA8 CD10                    		int 10h
  5427 00002BAA 8325[24010000]00        		and dword [con_x],0
  5428 00002BB1 C3                      		ret
  5429                                  
  5430                                  
  5431                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5432                                  ; Idle task.
  5433                                  ;
  5434                                  ; Run when we are waiting for keyboard input.
  5435                                  ;
  5436                                  
  5437                                  		bits 32
  5438                                  
  5439                                  idle:
  5440 00002BB2 60                      		pusha
  5441                                  
  5442 00002BB3 8B3D[E8010000]          		mov edi,[idle.draw_buffer]
  5443 00002BB9 09FF                    		or edi,edi
  5444 00002BBB 7478                    		jz idle_90
  5445                                  
  5446 00002BBD FF35[75010000]          		push dword [gfx_cur]
  5447                                  
  5448 00002BC3 66A1[E5000000]          		mov ax,[screen_width]
  5449 00002BC9 662D0802                		sub ax,kroete.width
  5450 00002BCD 66D1E8                  		shr ax,1
  5451 00002BD0 66A3[75010000]          		mov [gfx_cur_x],ax
  5452                                  
  5453 00002BD6 66A1[E7000000]          		mov ax,[screen_height]
  5454 00002BDC 662DEC00                		sub ax,kroete.height
  5455 00002BE0 66D1E8                  		shr ax,1
  5456 00002BE3 66A3[77010000]          		mov [gfx_cur_y],ax
  5457                                  
  5458 00002BE9 803D[F5010000]00        		cmp byte [idle.invalid],0
  5459 00002BF0 741A                    		jz idle_10
  5460 00002BF2 57                      		push edi
  5461 00002BF3 26668B17                		mov dx,[es:edi]
  5462 00002BF7 26668B4F02              		mov cx,[es:edi+2]
  5463 00002BFC 83C704                  		add edi,4
  5464 00002BFF E8C53B0000              		call save_bg
  5465 00002C04 5F                      		pop edi
  5466 00002C05 C605[F5010000]00        		mov byte [idle.invalid],0
  5467                                  idle_10:
  5468                                  
  5469 00002C0C 8B35[EC010000]          		mov esi,[idle.data1]
  5470 00002C12 57                      		push edi
  5471 00002C13 E8B0500000              		call kroete
  5472 00002C18 5F                      		pop edi
  5473                                  
  5474 00002C19 26668B17                		mov dx,[es:edi]
  5475 00002C1D 26668B4F02              		mov cx,[es:edi+2]
  5476 00002C22 83C704                  		add edi,4
  5477 00002C25 6689D3                  		mov bx,dx
  5478 00002C28 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
  5479 00002C30 E8443C0000              		call restore_bg
  5480                                  
  5481                                  idle_90:
  5482 00002C35 8F05[75010000]          		pop dword [gfx_cur]
  5483                                  
  5484 00002C3B 61                      		popa
  5485 00002C3C C3                      		ret
  5486                                  
  5487                                  
  5488                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5489                                  ; Execute bytecode.
  5490                                  ;
  5491                                  ;  eax		start address, relative to [pscode_start]
  5492                                  ;
  5493                                  ; return:
  5494                                  ;  CF		error
  5495                                  ;
  5496                                  
  5497                                  		bits 32
  5498                                  
  5499                                  run_pscode:
  5500 00002C3D A3[86000000]            		mov [pscode_instr],eax
  5501 00002C42 A3[8A000000]            		mov [pscode_next_instr],eax
  5502 00002C47 C705[8E000000]FFFF-     		mov dword [pscode_next_break],-1
  5503 00002C4F FFFF               
  5504 00002C51 668325[A2000000]00      		and word [pscode_error],byte 0
  5505 00002C59 C705[92000000]FFFF-     		mov dword [pscode_eval],-1
  5506 00002C61 FFFF               
  5507                                  
  5508 00002C63 3905[82000000]          		cmp [pscode_size],eax
  5509 00002C69 66BD0100                		mov bp,pserr_nocode
  5510 00002C6D 0F823E040000            		jb run_pscode_90
  5511                                  run_pscode_10:
  5512 00002C73 A1[8A000000]            		mov eax,[pscode_next_instr]
  5513 00002C78 A3[86000000]            		mov [pscode_instr],eax
  5514 00002C7D 83F8FF                  		cmp eax,-1		; -1 is special: stop there
  5515 00002C80 66BD0000                		mov bp,pserr_ok
  5516 00002C84 0F8427040000            		jz run_pscode_90
  5517 00002C8A B9FFFFFFFF              		mov ecx,-1
  5518 00002C8F 870D[92000000]          		xchg ecx,[pscode_eval]
  5519 00002C95 3B0D[92000000]          		cmp ecx,[pscode_eval]
  5520 00002C9B 740B                    		jz run_pscode_15
  5521                                  		; run opcode from exec instruction
  5522 00002C9D 89C3                    		mov ebx,eax
  5523 00002C9F B208                    		mov dl,t_sec
  5524 00002CA1 89C8                    		mov eax,ecx
  5525 00002CA3 E985000000              		jmp run_pscode_455
  5526                                  run_pscode_15:
  5527 00002CA8 89C3                    		mov ebx,eax
  5528 00002CAA 0305[7E000000]          		add eax,[pscode_start]
  5529 00002CB0 89C6                    		mov esi,eax
  5530 00002CB2 26AC                    		es lodsb
  5531 00002CB4 31C9                    		xor ecx,ecx
  5532 00002CB6 88C1                    		mov cl,al
  5533 00002CB8 240F                    		and al,0fh
  5534 00002CBA C0E904                  		shr cl,4
  5535 00002CBD 88CC                    		mov ah,cl
  5536                                  
  5537 00002CBF 80E107                  		and cl,7
  5538 00002CC2 31D2                    		xor edx,edx
  5539                                  
  5540 00002CC4 80F900                  		cmp cl,0
  5541 00002CC7 7422                    		jz run_pscode_20
  5542                                  
  5543 00002CC9 268A16                  		mov dl,[es:esi]
  5544 00002CCC 80F901                  		cmp cl,1
  5545 00002CCF 741A                    		jz run_pscode_20
  5546                                  
  5547 00002CD1 26668B16                		mov dx,[es:esi]
  5548 00002CD5 80F902                  		cmp cl,2
  5549 00002CD8 7411                    		jz run_pscode_20
  5550                                  
  5551 00002CDA 268B16                  		mov edx,[es:esi]
  5552 00002CDD 81E2FFFFFF00            		and edx,0ffffffh
  5553 00002CE3 80F903                  		cmp cl,3
  5554 00002CE6 7403                    		jz run_pscode_20
  5555                                  
  5556 00002CE8 268B16                  		mov edx,[es:esi]
  5557                                  run_pscode_20:		
  5558 00002CEB F9                      		stc
  5559 00002CEC 11CB                    		adc ebx,ecx		; ebx+ecx+1
  5560 00002CEE 89DF                    		mov edi,ebx
  5561 00002CF0 033D[7E000000]          		add edi,[pscode_start]
  5562                                  
  5563 00002CF6 F6C408                  		test ah,8
  5564 00002CF9 7402                    		jz run_pscode_30
  5565 00002CFB 01D3                    		add ebx,edx
  5566                                  run_pscode_30:
  5567 00002CFD 391D[82000000]          		cmp [pscode_size],ebx
  5568 00002D03 66BD0100                		mov bp,pserr_nocode
  5569 00002D07 0F82A4030000            		jb run_pscode_90
  5570                                  
  5571                                  		; fix up signed integer
  5572 00002D0D 3C01                    		cmp al,t_int
  5573 00002D0F 7515                    		jnz run_pscode_40
  5574 00002D11 80FC00                  		cmp ah,0
  5575 00002D14 7410                    		jz run_pscode_40
  5576 00002D16 80FC04                  		cmp ah,4
  5577 00002D19 730B                    		jae run_pscode_40
  5578 00002D1B C0E403                  		shl ah,3
  5579 00002D1E B120                    		mov cl,20h
  5580 00002D20 28E1                    		sub cl,ah
  5581 00002D22 D3E2                    		shl edx,cl
  5582 00002D24 D3FA                    		sar edx,cl
  5583                                  run_pscode_40:
  5584                                  
  5585 00002D26 3C04                    		cmp al,t_string
  5586 00002D28 7502                    		jnz run_pscode_45
  5587 00002D2A 89FA                    		mov edx,edi
  5588                                  run_pscode_45:
  5589 00002D2C 92                      		xchg eax,edx
  5590                                  
  5591                                  run_pscode_455:
  5592                                  
  5593                                  		; dl:  opcode
  5594                                  		; eax: instr arg
  5595                                  		; ebx: next instruction
  5596                                  
  5597                                  		; remember them
  5598 00002D2D 8815[A4000000]          		mov [pscode_type],dl
  5599 00002D33 A3[9E000000]            		mov [pscode_arg],eax
  5600 00002D38 891D[8A000000]          		mov [pscode_next_instr],ebx
  5601                                  
  5602 00002D3E 80FA08                  		cmp dl,t_sec
  5603 00002D41 751F                    		jnz run_pscode_46
  5604                                  
  5605                                  		; look it up in the dictionary, then continue
  5606 00002D43 89C1                    		mov ecx,eax
  5607 00002D45 E82BEDFFFF              		call get_dict_entry
  5608 00002D4A 66BD0700                		mov bp,pserr_invalid_dict
  5609 00002D4E 0F825D030000            		jc run_pscode_90
  5610                                  
  5611 00002D54 0FB6D2                  		movzx edx,dl
  5612 00002D57 A3[96000000]            		mov [pscode_error_arg_0],eax
  5613 00002D5C 8915[9A000000]          		mov [pscode_error_arg_1],edx
  5614                                  
  5615                                  run_pscode_46:
  5616 00002D62 60                      		pusha
  5617 00002D63 803D[A10B0000]00        		cmp byte [show_debug_info],0
  5618 00002D6A 7405                    		jz run_pscode_47
  5619 00002D6C E829F9FFFF              		call ps_status_info
  5620                                  run_pscode_47:
  5621 00002D71 A1[8E000000]            		mov eax,[pscode_next_break]
  5622 00002D76 3B05[86000000]          		cmp eax,[pscode_instr]
  5623 00002D7C 7409                    		jz run_pscode_475
  5624 00002D7E 803D[A00B0000]00        		cmp byte [single_step],0
  5625 00002D85 7437                    		jz run_pscode_48
  5626                                  run_pscode_475:
  5627 00002D87 C605[A00B0000]01        		mov byte [single_step],1
  5628 00002D8E E89EFAFFFF              		call get_key
  5629 00002D93 80FC01                  		cmp ah,1		; ESC
  5630 00002D96 7510                    		jnz run_pscode_477
  5631 00002D98 C605[A00B0000]00        		mov byte [single_step],0
  5632 00002D9F C605[A10B0000]00        		mov byte [show_debug_info],0
  5633 00002DA6 EB16                    		jmp run_pscode_48
  5634                                  run_pscode_477:
  5635 00002DA8 80FC0F                  		cmp ah,0fh		; Tab
  5636 00002DAB 7511                    		jnz run_pscode_48
  5637 00002DAD C605[A00B0000]00        		mov byte [single_step],0
  5638 00002DB4 A1[8A000000]            		mov eax,[pscode_next_instr]
  5639 00002DB9 A3[8E000000]            		mov [pscode_next_break],eax
  5640                                  run_pscode_48:
  5641 00002DBE 61                      		popa
  5642                                  
  5643                                  		; actually do something
  5644 00002DBF 80FA00                  		cmp dl,t_none
  5645 00002DC2 7423                    		jz run_pscode_50
  5646 00002DC4 80FA01                  		cmp dl,t_int
  5647 00002DC7 741E                    		jz run_pscode_50
  5648 00002DC9 80FA02                  		cmp dl,t_unsigned
  5649 00002DCC 7419                    		jz run_pscode_50
  5650 00002DCE 80FA03                  		cmp dl,t_bool
  5651 00002DD1 7414                    		jz run_pscode_50
  5652 00002DD3 80FA04                  		cmp dl,t_string
  5653 00002DD6 740F                    		jz run_pscode_50
  5654 00002DD8 80FA09                  		cmp dl,t_dict_idx
  5655 00002DDB 740A                    		jz run_pscode_50
  5656 00002DDD 80FA0C                  		cmp dl,t_ptr
  5657 00002DE0 7405                    		jz run_pscode_50
  5658 00002DE2 80FA0A                  		cmp dl,t_array
  5659 00002DE5 7535                    		jnz run_pscode_52
  5660                                  run_pscode_50:
  5661                                  		; t_none, t_int, t_bool, t_unsigned, t_string, t_code, t_dict_idx, t_array, t_ptr
  5662                                  
  5663 00002DE7 80FA02                  		cmp dl,t_unsigned
  5664 00002DEA 7502                    		jnz run_pscode_51
  5665 00002DEC B201                    		mov dl,t_int		; always use t_int
  5666                                  run_pscode_51:
  5667 00002DEE 8B0D[C4000000]          		mov ecx,[pstack.ptr]
  5668 00002DF4 3B0D[C0000000]          		cmp ecx,[pstack.size]
  5669 00002DFA 66BD0400                		mov bp,pserr_pstack_overflow
  5670 00002DFE 0F83AC020000            		jae run_pscode_80
  5671 00002E04 FF05[C4000000]          		inc dword [pstack.ptr]
  5672                                  
  5673 00002E0A 31C9                    		xor ecx,ecx
  5674 00002E0C E85DEBFFFF              		call set_pstack_tos
  5675 00002E11 0F829A020000            		jc run_pscode_90
  5676 00002E17 E957FEFFFF              		jmp run_pscode_10
  5677                                  
  5678                                  run_pscode_52:
  5679 00002E1C 80FA07                  		cmp dl,t_prim
  5680 00002E1F 752C                    		jnz run_pscode_53
  5681                                  
  5682 00002E21 3DAD000000              		cmp eax,prim_functions
  5683 00002E26 66BD0102                		mov bp,pserr_invalid_prim
  5684 00002E2A 0F8380020000            		jae run_pscode_80
  5685 00002E30 0FB78400[E20C0000]      		movzx eax,word [jt_p_none+2*eax]
  5686 00002E38 09C0                    		or eax,eax		; implemented?
  5687 00002E3A 0F8470020000            		jz run_pscode_80
  5688 00002E40 FFD0                    		call eax
  5689 00002E42 0F8269020000            		jc run_pscode_90
  5690 00002E48 E926FEFFFF              		jmp run_pscode_10
  5691                                  
  5692                                  run_pscode_53:
  5693 00002E4D 80FA05                  		cmp dl,t_code
  5694 00002E50 753D                    		jnz run_pscode_54
  5695                                  
  5696                                  		; branch
  5697 00002E52 8705[8A000000]          		xchg eax,[pscode_next_instr]
  5698                                  
  5699                                  		; Check if we should just leave a mark on the
  5700                                  		; pstack or actually execute the code.
  5701                                  		; Maybe 2 different types (say: t_code, t_mark) would be better?
  5702 00002E58 803D[A4000000]08        		cmp byte [pscode_type],t_sec
  5703 00002E5F 7586                    		jnz run_pscode_50
  5704                                  
  5705 00002E61 8B0D[D0000000]          		mov ecx,[rstack.ptr]
  5706 00002E67 3B0D[CC000000]          		cmp ecx,[rstack.size]
  5707 00002E6D 66BD0600                		mov bp,pserr_rstack_overflow
  5708 00002E71 0F8339020000            		jae run_pscode_80
  5709 00002E77 FF05[D0000000]          		inc dword [rstack.ptr]
  5710                                  
  5711 00002E7D 31C9                    		xor ecx,ecx
  5712 00002E7F E84EEBFFFF              		call set_rstack_tos
  5713 00002E84 0F8227020000            		jc run_pscode_90
  5714 00002E8A E9E4FDFFFF              		jmp run_pscode_10
  5715                                  
  5716                                  run_pscode_54:
  5717 00002E8F 80FA06                  		cmp dl,t_ret
  5718 00002E92 0F8502020000            		jnz run_pscode_70
  5719                                  
  5720 00002E98 31C9                    		xor ecx,ecx
  5721 00002E9A E81EEBFFFF              		call get_rstack_tos
  5722 00002E9F 730A                    		jnc run_pscode_55
  5723 00002EA1 66BD0500                		mov bp,pserr_rstack_underflow
  5724 00002EA5 0F8206020000            		jc run_pscode_90
  5725                                  ; 		; treat this case as 'end'
  5726                                  ;		mov bp,pserr_ok
  5727                                  ;		clc
  5728                                  ;		jmp run_pscode_90
  5729                                  run_pscode_55:
  5730 00002EAB 66BD0A00                		mov bp,pserr_invalid_rstack_entry
  5731 00002EAF 80FA05                  		cmp dl,t_code
  5732 00002EB2 0F84D2010000            		jz run_pscode_68
  5733 00002EB8 80FA15                  		cmp dl,t_if			; if
  5734 00002EBB 0F84C9010000            		jz run_pscode_68
  5735 00002EC1 80FA25                  		cmp dl,t_loop			; loop
  5736 00002EC4 0F84C6010000            		jz run_pscode_69
  5737 00002ECA 80FA35                  		cmp dl,t_repeat			; repeat
  5738 00002ECD 0F8473010000            		jz run_pscode_65
  5739 00002ED3 80FA45                  		cmp dl,t_for			; for
  5740 00002ED6 0F84C2000000            		jz run_pscode_62
  5741 00002EDC 80FA55                  		cmp dl,t_forall			; forall
  5742 00002EDF 0F85CB010000            		jnz run_pscode_80
  5743                                  
  5744                                  		; forall
  5745 00002EE5 833D[D0000000]05        		cmp dword [rstack.ptr],5
  5746 00002EEC 66BD0500                		mov bp,pserr_rstack_underflow
  5747 00002EF0 0F82BB010000            		jc run_pscode_90
  5748                                  
  5749 00002EF6 B901000000              		mov ecx,1
  5750 00002EFB E8BDEAFFFF              		call get_rstack_tos		; count
  5751 00002F00 80FA01                  		cmp dl,t_int
  5752 00002F03 0F8559010000            		jnz run_pscode_66
  5753                                  
  5754 00002F09 B902000000              		mov ecx,2
  5755 00002F0E 50                      		push eax
  5756 00002F0F E8A9EAFFFF              		call get_rstack_tos		; length
  5757 00002F14 5E                      		pop esi
  5758 00002F15 80FA01                  		cmp dl,t_int
  5759 00002F18 0F8544010000            		jnz run_pscode_66
  5760                                  
  5761 00002F1E B903000000              		mov ecx,3
  5762 00002F23 50                      		push eax
  5763 00002F24 56                      		push esi
  5764 00002F25 E893EAFFFF              		call get_rstack_tos		; string/array
  5765 00002F2A 5E                      		pop esi
  5766 00002F2B 59                      		pop ecx
  5767 00002F2C 80FA0A                  		cmp dl,t_array
  5768 00002F2F 740E                    		jz run_pscode_57
  5769 00002F31 80FA04                  		cmp dl,t_string
  5770 00002F34 7409                    		jz run_pscode_57
  5771 00002F36 80FA0C                  		cmp dl,t_ptr
  5772 00002F39 0F8523010000            		jnz run_pscode_66
  5773                                  
  5774                                  run_pscode_57:
  5775                                  		; dl,eax: string/array
  5776                                  		; esi: count
  5777                                  		; ecx: length
  5778                                  
  5779 00002F3F 46                      		inc esi
  5780 00002F40 39CE                    		cmp esi,ecx
  5781 00002F42 0F83EB000000            		jae run_pscode_64
  5782                                  
  5783 00002F48 52                      		push edx
  5784 00002F49 B901000000              		mov ecx,1
  5785 00002F4E B201                    		mov dl,t_int
  5786 00002F50 50                      		push eax
  5787 00002F51 56                      		push esi
  5788 00002F52 89F0                    		mov eax,esi
  5789 00002F54 E879EAFFFF              		call set_rstack_tos
  5790 00002F59 58                      		pop eax
  5791 00002F5A 59                      		pop ecx
  5792 00002F5B 5A                      		pop edx
  5793                                  
  5794 00002F5C 86D6                    		xchg dl,dh
  5795 00002F5E E8C0010000              		call p_get
  5796 00002F63 66BD0B00                		mov bp,pserr_invalid_range
  5797 00002F67 0F8243010000            		jc run_pscode_80
  5798                                  
  5799 00002F6D 8B0D[C4000000]          		mov ecx,[pstack.ptr]
  5800 00002F73 3B0D[C0000000]          		cmp ecx,[pstack.size]
  5801 00002F79 0F8331010000            		jae run_pscode_80
  5802 00002F7F FF05[C4000000]          		inc dword [pstack.ptr]
  5803 00002F85 31C9                    		xor ecx,ecx
  5804 00002F87 E8E2E9FFFF              		call set_pstack_tos
  5805 00002F8C 0F821F010000            		jc run_pscode_90
  5806                                  
  5807 00002F92 31C9                    		xor ecx,ecx
  5808 00002F94 E824EAFFFF              		call get_rstack_tos
  5809 00002F99 E9F2000000              		jmp run_pscode_69
  5810                                  
  5811                                  
  5812                                  run_pscode_62:
  5813                                  		; for
  5814 00002F9E 833D[D0000000]05        		cmp dword [rstack.ptr],5
  5815 00002FA5 66BD0500                		mov bp,pserr_rstack_underflow
  5816 00002FA9 0F8202010000            		jc run_pscode_90
  5817                                  
  5818 00002FAF B902000000              		mov ecx,2
  5819 00002FB4 E804EAFFFF              		call get_rstack_tos		; step
  5820 00002FB9 80FA01                  		cmp dl,t_int
  5821 00002FBC 0F85A0000000            		jnz run_pscode_66
  5822 00002FC2 B901000000              		mov ecx,1
  5823 00002FC7 50                      		push eax
  5824 00002FC8 E8F0E9FFFF              		call get_rstack_tos		; limit
  5825 00002FCD 5E                      		pop esi
  5826 00002FCE 80FA01                  		cmp dl,t_int
  5827 00002FD1 0F858B000000            		jnz run_pscode_66
  5828 00002FD7 50                      		push eax
  5829 00002FD8 B903000000              		mov ecx,3
  5830 00002FDD 56                      		push esi
  5831 00002FDE E8DAE9FFFF              		call get_rstack_tos		; counter
  5832 00002FE3 5E                      		pop esi
  5833 00002FE4 80FA01                  		cmp dl,t_int
  5834 00002FE7 59                      		pop ecx
  5835 00002FE8 7578                    		jnz run_pscode_66
  5836 00002FEA 01F0                    		add eax,esi
  5837 00002FEC 09F6                    		or esi,esi
  5838 00002FEE 50                      		push eax
  5839 00002FEF 7801                    		js run_pscode_63
  5840 00002FF1 91                      		xchg eax,ecx
  5841                                  run_pscode_63:
  5842 00002FF2 39C8                    		cmp eax,ecx
  5843 00002FF4 58                      		pop eax
  5844 00002FF5 7C3C                    		jl run_pscode_64
  5845                                  
  5846 00002FF7 B903000000              		mov ecx,3
  5847 00002FFC 50                      		push eax
  5848 00002FFD E8D0E9FFFF              		call set_rstack_tos
  5849 00003002 58                      		pop eax
  5850 00003003 8B0D[C4000000]          		mov ecx,[pstack.ptr]
  5851 00003009 3B0D[C0000000]          		cmp ecx,[pstack.size]
  5852 0000300F 0F839B000000            		jae run_pscode_80
  5853 00003015 FF05[C4000000]          		inc dword [pstack.ptr]
  5854 0000301B 31C9                    		xor ecx,ecx
  5855 0000301D B201                    		mov dl,t_int
  5856 0000301F E84AE9FFFF              		call set_pstack_tos
  5857 00003024 0F8287000000            		jc run_pscode_90
  5858 0000302A 31C9                    		xor ecx,ecx
  5859 0000302C E88CE9FFFF              		call get_rstack_tos
  5860 00003031 EB5D                    		jmp run_pscode_69
  5861                                  run_pscode_64:
  5862 00003033 B904000000              		mov ecx,4
  5863 00003038 E880E9FFFF              		call get_rstack_tos
  5864 0000303D 832D[D0000000]05        		sub dword [rstack.ptr],5
  5865 00003044 EB4A                    		jmp run_pscode_69
  5866                                  
  5867                                  
  5868                                  run_pscode_65:
  5869                                  		; repeat
  5870 00003046 833D[D0000000]03        		cmp dword [rstack.ptr],3
  5871 0000304D 66BD0500                		mov bp,pserr_rstack_underflow
  5872 00003051 725E                    		jc run_pscode_90
  5873 00003053 50                      		push eax
  5874 00003054 B901000000              		mov ecx,1
  5875 00003059 E85FE9FFFF              		call get_rstack_tos
  5876 0000305E 5B                      		pop ebx
  5877 0000305F 80FA01                  		cmp dl,t_int
  5878                                  run_pscode_66:
  5879 00003062 66BD0A00                		mov bp,pserr_invalid_rstack_entry
  5880 00003066 7548                    		jnz run_pscode_80
  5881 00003068 48                      		dec eax
  5882 00003069 740E                    		jz run_pscode_67
  5883 0000306B B901000000              		mov ecx,1
  5884 00003070 53                      		push ebx
  5885 00003071 E85CE9FFFF              		call set_rstack_tos
  5886 00003076 58                      		pop eax
  5887 00003077 EB17                    		jmp run_pscode_69
  5888                                  run_pscode_67:
  5889 00003079 B902000000              		mov ecx,2
  5890 0000307E E83AE9FFFF              		call get_rstack_tos
  5891 00003083 832D[D0000000]02        		sub dword [rstack.ptr],2
  5892                                  
  5893                                  run_pscode_68:
  5894 0000308A FF0D[D0000000]          		dec dword [rstack.ptr]
  5895                                  run_pscode_69:
  5896 00003090 A3[8A000000]            		mov [pscode_next_instr],eax
  5897                                  
  5898 00003095 E9D9FBFFFF              		jmp run_pscode_10
  5899                                  
  5900                                  run_pscode_70:
  5901                                  
  5902                                  %if 0
  5903                                  ; Using undefined values has been legalized.
  5904                                  ; See run_pscode_51 above...
  5905                                  ;
  5906                                  		cmp dl,t_none
  5907                                  		mov bp,pserr_nop
  5908                                  		jz run_pscode_80
  5909                                  %endif
  5910                                  
  5911 0000309A 80FA08                  		cmp dl,t_sec
  5912 0000309D 66BD0002                		mov bp,pserr_invalid_dict_entry
  5913 000030A1 740D                    		jz run_pscode_80
  5914                                  
  5915 000030A3 80FA0B                  		cmp dl,t_end
  5916 000030A6 66BD0000                		mov bp,pserr_ok
  5917 000030AA 7405                    		jz run_pscode_90
  5918                                  
  5919                                  		; illegal opcode
  5920 000030AC 66BD0200                		mov bp,pserr_invalid_opcode
  5921                                  run_pscode_80:
  5922 000030B0 F9                      		stc
  5923                                  run_pscode_90:
  5924 000030B1 66892D[A2000000]        		mov [pscode_error],bp
  5925 000030B8 C3                      		ret
  5926                                  
  5927                                  
  5928                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5929                                  ; Get one argument from stack.
  5930                                  ;
  5931                                  ;  dl		tos type
  5932                                  ;
  5933                                  ; return:
  5934                                  ;  eax		tos
  5935                                  ;  dl		actual tos types (even if CF is set)
  5936                                  ;  CF		error
  5937                                  ;
  5938                                  
  5939                                  		bits 32
  5940                                  
  5941                                  get_1arg:
  5942 000030B9 31C0                    		xor eax,eax
  5943 000030BB 833D[C4000000]01        		cmp dword [pstack.ptr],1
  5944 000030C2 66BD0300                		mov bp,pserr_pstack_underflow
  5945 000030C6 7217                    		jc get_1arg_90
  5946 000030C8 52                      		push edx
  5947 000030C9 31C9                    		xor ecx,ecx
  5948 000030CB E889E8FFFF              		call get_pstack_tos
  5949 000030D0 5B                      		pop ebx
  5950                                  		; ignore type check if t_none was requested
  5951 000030D1 80FB00                  		cmp bl,t_none
  5952 000030D4 7409                    		jz get_1arg_90
  5953 000030D6 38D3                    		cmp bl,dl
  5954 000030D8 7405                    		jz get_1arg_90
  5955 000030DA 66BD0800                		mov bp,pserr_wrong_arg_types
  5956 000030DE F9                      		stc
  5957                                  get_1arg_90:
  5958 000030DF C3                      		ret
  5959                                  
  5960                                  
  5961                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  5962                                  ; Get two arguments from stack.
  5963                                  ;
  5964                                  ;  dl		tos type
  5965                                  ;  dh		tos + 1 type
  5966                                  ; return:
  5967                                  ;  eax		tos
  5968                                  ;  ecx		tos + 1
  5969                                  ;  dx		actual tos types (even if CF is set)
  5970                                  ;  CF		error
  5971                                  ;
  5972                                  
  5973                                  		bits 32
  5974                                  
  5975                                  get_2args:
  5976 000030E0 31C0                    		xor eax,eax
  5977 000030E2 31C9                    		xor ecx,ecx
  5978 000030E4 89D3                    		mov ebx,edx
  5979 000030E6 31D2                    		xor edx,edx
  5980 000030E8 833D[C4000000]02        		cmp dword [pstack.ptr],2
  5981 000030EF 66BD0300                		mov bp,pserr_pstack_underflow
  5982 000030F3 722D                    		jc get_2args_90
  5983 000030F5 53                      		push ebx
  5984 000030F6 41                      		inc ecx
  5985 000030F7 E85DE8FFFF              		call get_pstack_tos
  5986 000030FC 52                      		push edx
  5987 000030FD 50                      		push eax
  5988 000030FE 31C9                    		xor ecx,ecx
  5989 00003100 E854E8FFFF              		call get_pstack_tos
  5990 00003105 59                      		pop ecx
  5991 00003106 5B                      		pop ebx
  5992 00003107 88DE                    		mov dh,bl
  5993 00003109 5B                      		pop ebx
  5994                                  
  5995                                  		; ignore type check if t_none was requested
  5996 0000310A 80FF00                  		cmp bh,t_none
  5997 0000310D 7502                    		jnz get_2args_50
  5998 0000310F 88F7                    		mov bh,dh
  5999                                  get_2args_50:
  6000 00003111 80FB00                  		cmp bl,t_none
  6001 00003114 7502                    		jnz get_2args_60
  6002 00003116 88D3                    		mov bl,dl
  6003                                  get_2args_60:
  6004 00003118 6639D3                  		cmp bx,dx
  6005 0000311B 7405                    		jz get_2args_90
  6006 0000311D 66BD0800                		mov bp,pserr_wrong_arg_types
  6007                                  get_2args_80:
  6008 00003121 F9                      		stc
  6009                                  get_2args_90:
  6010 00003122 C3                      		ret
  6011                                  
  6012                                  
  6013                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  6014                                  ; Get array/string/ptr element.
  6015                                  ;
  6016                                  ;  dh, ecx	obj
  6017                                  ;  eax		index
  6018                                  ;
  6019                                  ; return:
  6020                                  ;  dl, eax	element
  6021                                  ;  CF		0/1 ok/not ok
  6022                                  ;
  6023                                  
  6024                                  		bits 32
  6025                                  
  6026                                  p_get:
  6027 00003123 80FE0A                  		cmp dh,t_array
  6028 00003126 7414                    		jz p_get_50
  6029 00003128 80FE04                  		cmp dh,t_string
  6030 0000312B 7406                    		jz p_get_10
  6031 0000312D 80FE0C                  		cmp dh,t_ptr
  6032 00003130 F9                      		stc
  6033 00003131 7524                    		jnz p_get_90
  6034                                  p_get_10:
  6035 00003133 B201                    		mov dl,t_int
  6036 00003135 260FB60408              		movzx eax,byte [es:eax+ecx]
  6037 0000313A EB1A                    		jmp p_get_80
  6038                                  p_get_50:
  6039 0000313C 66BD0B00                		mov bp,pserr_invalid_range
  6040 00003140 260FB719                		movzx ebx,word [es:ecx]
  6041 00003144 39D8                    		cmp eax,ebx
  6042 00003146 F5                      		cmc
  6043 00003147 720E                    		jc p_get_90
  6044                                  
  6045 00003149 8D0480                  		lea eax,[eax+4*eax]
  6046                                  
  6047 0000314C 268A540102              		mov dl,[es:ecx+eax+2]
  6048 00003151 268B440103              		mov eax,[es:ecx+eax+3]
  6049                                  p_get_80:
  6050 00003156 F8                      		clc
  6051                                  p_get_90:
  6052 00003157 C3                      		ret
  6053                                  
  6054                                  
  6055                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  6056                                  ;
  6057                                  ; Our primary functions.
  6058                                  ;
  6059                                  
  6060                                  
  6061                                  ;; { - start code definition
  6062                                  ;
  6063                                  ; group: code
  6064                                  ;
  6065                                  ; ( -- code1 )
  6066                                  ;
  6067                                  ; code1:	code start marker
  6068                                  ;
  6069                                  ; After @{, no code is executed until a matching @} is found.
  6070                                  ;
  6071                                  ; example 
  6072                                  ;   /++ { 1 add } def	% define increment function '++'
  6073                                  ;
  6074                                  
  6075                                  
  6076                                  ;; } - complete code definition
  6077                                  ;
  6078                                  ; group: code
  6079                                  ;
  6080                                  ; ( -- )
  6081                                  ;
  6082                                  ; Note: @{ and @} are taken care of already during conversion into bytecode. This means that
  6083                                  ; redefining them does not work as you would expect.
  6084                                  ;
  6085                                  ; example 
  6086                                  ;   /dec { 1 sub } def	% define decrement function 'dec'
  6087                                  ;
  6088                                  
  6089                                  
  6090                                  ;; [ - start array
  6091                                  ;
  6092                                  ; group: arraydef
  6093                                  ;
  6094                                  ; ( -- mark1 )
  6095                                  ;
  6096                                  ; mark1:	array start marker
  6097                                  ;
  6098                                  ; example 
  6099                                  ;   [ 1 2 3 ]	% array with 3 elements
  6100                                  ;
  6101                                  
  6102                                  		bits 32
  6103                                  
  6104                                  prim_astart:
  6105 00003158 A1[C4000000]            		mov eax,[pstack.ptr]
  6106 0000315D 40                      		inc eax
  6107 0000315E 3905[C0000000]          		cmp [pstack.size],eax
  6108 00003164 66BD0400                		mov bp,pserr_pstack_overflow
  6109 00003168 7213                    		jb prim_astart_90
  6110 0000316A A3[C4000000]            		mov [pstack.ptr],eax
  6111 0000316F B207                    		mov dl,t_prim
  6112 00003171 B803000000              		mov eax,(jt_p_astart - jt_p_none) / 2	; we need just some mark
  6113 00003176 31C9                    		xor ecx,ecx
  6114 00003178 E8F1E7FFFF              		call set_pstack_tos
  6115                                  prim_astart_90:
  6116 0000317D C3                      		ret
  6117                                  
  6118                                  
  6119                                  ;; ] -  complete array definition
  6120                                  ;
  6121                                  ; group: arraydef, mem
  6122                                  ;
  6123                                  ; ( mark1 obj1 ... objN -- array1 )
  6124                                  ;
  6125                                  ; mark1:		array start marker
  6126                                  ;
  6127                                  ; obj1 ... objN:	some objects
  6128                                  ; array1:		N-dimensional array with obj1 ... objN
  6129                                  ;
  6130                                  ; Note: The array uses dynamically allocated memory which must be released using @free.
  6131                                  ;
  6132                                  ; example 
  6133                                  ;   /foo [ "some" "text" ] def	% array with 2 elements
  6134                                  ;   foo free			% free memory
  6135                                  ;
  6136                                  
  6137                                  		bits 32
  6138                                  
  6139                                  prim_aend:
  6140 0000317E 31C9                    		xor ecx,ecx
  6141                                  prim_aend_10:
  6142 00003180 51                      		push ecx
  6143 00003181 E8D3E7FFFF              		call get_pstack_tos
  6144 00003186 59                      		pop ecx
  6145 00003187 66BD0300                		mov bp,pserr_pstack_underflow
  6146 0000318B 7255                    		jc prim_aend_90
  6147 0000318D 41                      		inc ecx
  6148 0000318E 80FA07                  		cmp dl,t_prim
  6149 00003191 75ED                    		jnz prim_aend_10
  6150 00003193 83F803                  		cmp eax,(jt_p_astart - jt_p_none) / 2
  6151 00003196 75E8                    		jnz prim_aend_10
  6152                                  
  6153 00003198 49                      		dec ecx
  6154 00003199 8D448902                		lea eax,[ecx+4*ecx+2]
  6155                                  
  6156 0000319D 51                      		push ecx
  6157 0000319E E84BE9FFFF              		call calloc
  6158 000031A3 59                      		pop ecx
  6159                                  
  6160 000031A4 09C0                    		or eax,eax
  6161 000031A6 66BD0E00                		mov bp,pserr_no_memory
  6162 000031AA F9                      		stc
  6163 000031AB 7435                    		jz prim_aend_90
  6164                                  
  6165 000031AD 51                      		push ecx
  6166 000031AE 50                      		push eax
  6167                                  
  6168 000031AF 89C7                    		mov edi,eax
  6169 000031B1 2666890F                		mov [es:edi],cx
  6170 000031B5 47                      		inc edi
  6171 000031B6 47                      		inc edi
  6172                                  
  6173                                  prim_aend_40:
  6174 000031B7 83E901                  		sub ecx,1
  6175 000031BA 7215                    		jc prim_aend_60
  6176                                  
  6177 000031BC 57                      		push edi
  6178 000031BD 51                      		push ecx
  6179 000031BE E896E7FFFF              		call get_pstack_tos
  6180 000031C3 59                      		pop ecx
  6181 000031C4 5F                      		pop edi
  6182                                  
  6183 000031C5 268817                  		mov [es:edi],dl
  6184 000031C8 26894701                		mov [es:edi+1],eax
  6185 000031CC 83C705                  		add edi,5
  6186 000031CF EBE6                    		jmp prim_aend_40
  6187                                  
  6188                                  prim_aend_60:
  6189                                  
  6190 000031D1 58                      		pop eax
  6191 000031D2 59                      		pop ecx
  6192 000031D3 290D[C4000000]          		sub [pstack.ptr],ecx
  6193 000031D9 B20A                    		mov dl,t_array
  6194 000031DB 31C9                    		xor ecx,ecx
  6195 000031DD E88CE7FFFF              		call set_pstack_tos
  6196                                  prim_aend_90:
  6197 000031E2 C3                      		ret
  6198                                  
  6199                                  
  6200                                  ;; get - get array, string or memory element
  6201                                  ;
  6202                                  ; group: get/put
  6203                                  ;
  6204                                  ; ( array1 int1  -- obj1 )
  6205                                  ; ( string1 int2  -- int3 )
  6206                                  ; ( ptr1 int4  -- int5 )
  6207                                  ;
  6208                                  ; obj1: int1-th element of array1
  6209                                  ; int3: int2-th byte of string1
  6210                                  ; int5: int4-th byte of ptr1
  6211                                  ;
  6212                                  ; Note: Returns the n-th byte of string1, not the n-th utf8 char. Sizes of string1 or ptr1
  6213                                  ; are not checked.
  6214                                  ;
  6215                                  ; example
  6216                                  ;   "abc" 1 get			% 'b'
  6217                                  ;
  6218                                  ;   [ 10 20 30 ] 2 get		% 30
  6219                                  ;
  6220                                  
  6221                                  		bits 32
  6222                                  
  6223                                  prim_get:
  6224 000031E3 66BA010A                		mov dx,t_int + (t_array << 8)
  6225 000031E7 E8F4FEFFFF              		call get_2args
  6226 000031EC 730F                    		jnc prim_get_10
  6227 000031EE 6681FA0104              		cmp dx,t_int + (t_string << 8)
  6228 000031F3 7408                    		jz prim_get_10
  6229 000031F5 6681FA010C              		cmp dx,t_int + (t_ptr << 8)
  6230 000031FA F9                      		stc
  6231 000031FB 7514                    		jnz prim_get_90
  6232                                  prim_get_10:
  6233 000031FD E821FFFFFF              		call p_get
  6234 00003202 720D                    		jc prim_get_90
  6235                                  
  6236 00003204 FF0D[C4000000]          		dec dword [pstack.ptr]
  6237 0000320A 31C9                    		xor ecx,ecx
  6238 0000320C E85DE7FFFF              		call set_pstack_tos
  6239                                  prim_get_90:
  6240 00003211 C3                      		ret
  6241                                  
  6242                                  
  6243                                  ;; put - set an array, string or memory element
  6244                                  ;
  6245                                  ; group: get/put
  6246                                  ; 
  6247                                  ; ( array1 int1 obj1 -- )
  6248                                  ; ( string1 int2 int3 -- )
  6249                                  ; ( ptr1 int4 int5 -- )
  6250                                  ;
  6251                                  ; int1-th element of array1 = obj1
  6252                                  ;
  6253                                  ; int2-th byte of string1 = int3
  6254                                  ;
  6255                                  ; int4-th byte of ptr1 = int5
  6256                                  ;
  6257                                  ; Note: Sets the n-th byte of string1, not the n-th utf8 char. Sizes of string1 or ptr1
  6258                                  ; are not checked.
  6259                                  ;
  6260                                  ; example
  6261                                  ;   /foo [ 10 20 30 ] def
  6262                                  ;   foo 2 77 put		% foo = [ 10 20 77 ]
  6263                                  ;
  6264                                  ;   /foo 10 string def
  6265                                  ;   foo 0 'a' put
  6266                                  ;   foo 1 'b' put		% foo = "ab"
  6267                                  ;
  6268                                  ;   But don't do this:
  6269                                  ;   "abc" 1 'X' put		% modifies string constant "abc" to "aXc"!
  6270                                  ;
  6271                                  
  6272                                  		bits 32
  6273                                  
  6274                                  prim_put:
  6275 00003212 66BD0300                		mov bp,pserr_pstack_underflow
  6276 00003216 833D[C4000000]03        		cmp dword [pstack.ptr],3
  6277 0000321D 726C                    		jc prim_put_90
  6278                                  
  6279 0000321F 66BD0800                		mov bp,pserr_wrong_arg_types
  6280 00003223 B902000000              		mov ecx,2
  6281 00003228 E82CE7FFFF              		call get_pstack_tos
  6282 0000322D B600                    		mov dh,0
  6283 0000322F 52                      		push edx
  6284 00003230 50                      		push eax
  6285 00003231 66BA0001                		mov dx,t_none + (t_int << 8)
  6286 00003235 E8A6FEFFFF              		call get_2args
  6287 0000323A 5B                      		pop ebx
  6288 0000323B 5D                      		pop ebp
  6289 0000323C C1E210                  		shl edx,16
  6290 0000323F 6689EA                  		mov dx,bp
  6291 00003242 C1C208                  		rol edx,8
  6292 00003245 6681FA010A              		cmp dx,t_int + (t_array << 8)
  6293 0000324A 741B                    		jz prim_put_50
  6294 0000324C 81FA01040001            		cmp edx,t_int + (t_string << 8) + (t_int << 24)
  6295 00003252 740D                    		jz prim_put_30
  6296 00003254 81FA010C0001            		cmp edx,t_int + (t_ptr << 8) + (t_int << 24)
  6297 0000325A F9                      		stc
  6298 0000325B 66BD0800                		mov bp,pserr_wrong_arg_types
  6299 0000325F 752A                    		jnz prim_put_90
  6300                                  prim_put_30:
  6301 00003261 2688040B                		mov [es:ebx+ecx],al
  6302 00003265 EB1D                    		jmp prim_put_80
  6303                                  prim_put_50:
  6304 00003267 C1EA18                  		shr edx,24
  6305                                  
  6306 0000326A 260FB733                		movzx esi,word [es:ebx]
  6307 0000326E 39F1                    		cmp ecx,esi
  6308 00003270 F5                      		cmc
  6309 00003271 66BD0B00                		mov bp,pserr_invalid_range
  6310 00003275 7214                    		jc prim_put_90
  6311                                  		
  6312 00003277 8D0C89                  		lea ecx,[ecx+4*ecx]
  6313                                  
  6314 0000327A 2688540B02              		mov [es:ebx+ecx+2],dl
  6315 0000327F 2689440B03              		mov [es:ebx+ecx+3],eax
  6316                                  
  6317                                  prim_put_80:
  6318 00003284 832D[C4000000]03        		sub dword [pstack.ptr],3
  6319                                  prim_put_90:
  6320 0000328B C3                      		ret
  6321                                  
  6322                                  
  6323                                  ;; length - array, string or memory size
  6324                                  ;
  6325                                  ; group: mem
  6326                                  ;
  6327                                  ; ( array1 -- int1 )
  6328                                  ; ( string1 -- int1 )
  6329                                  ; ( ptr1 -- int1 )
  6330                                  ;
  6331                                  ; int1: size of array1 or string1 or ptr1
  6332                                  ;
  6333                                  ; Returns the length of string1 in bytes, not the number of Unicode chars. If ptr1
  6334                                  ; doesn't point at the start of a memory area, @length returns the number of remaining
  6335                                  ; bytes.
  6336                                  ;
  6337                                  ; example
  6338                                  ;   "abc" length	% 3
  6339                                  ;
  6340                                  ;   [ 0 1 ] length	% 2
  6341                                  ;
  6342                                  ;   /foo 10 malloc def
  6343                                  ;   foo length		% 10
  6344                                  ;   foo 3 add length	% 7
  6345                                  ;
  6346                                  
  6347                                  		bits 32
  6348                                  
  6349                                  prim_length:
  6350 0000328C B200                    		mov dl,t_none
  6351 0000328E E826FEFFFF              		call get_1arg
  6352 00003293 7210                    		jc prim_length_90
  6353 00003295 E8641D0000              		call get_length
  6354 0000329A 7209                    		jc prim_length_90
  6355 0000329C 31C9                    		xor ecx,ecx
  6356 0000329E B201                    		mov dl,t_int
  6357 000032A0 E8C9E6FFFF              		call set_pstack_tos
  6358                                  prim_length_90:
  6359 000032A5 C3                      		ret
  6360                                  
  6361                                  
  6362                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  6363                                  ;; array - create an empty array
  6364                                  ;
  6365                                  ; group: mem
  6366                                  ;
  6367                                  ; ( int1 -- array1 )
  6368                                  ;
  6369                                  ; int1:		array dimension
  6370                                  ; array1:	new array
  6371                                  ;
  6372                                  ; Note: Use @free to free array1.
  6373                                  ;
  6374                                  ; example 
  6375                                  ;   /foo 10 array def	% create array with 10 elements
  6376                                  ;   foo 4 123 put	% foo[4] = 123
  6377                                  ;   foo free		% free foo
  6378                                  ;
  6379                                  
  6380                                  		bits 32
  6381                                  
  6382                                  prim_array:
  6383 000032A6 B201                    		mov dl,t_int
  6384 000032A8 E80CFEFFFF              		call get_1arg
  6385 000032AD 722D                    		jc prim_array_90
  6386 000032AF 3D00000100              		cmp eax,10000h
  6387 000032B4 F5                      		cmc
  6388 000032B5 66BD0B00                		mov bp,pserr_invalid_range
  6389 000032B9 7221                    		jc prim_array_90
  6390 000032BB 50                      		push eax
  6391 000032BC 8D448002                		lea eax,[eax+4*eax+2]
  6392 000032C0 E829E8FFFF              		call calloc
  6393 000032C5 59                      		pop ecx
  6394 000032C6 09C0                    		or eax,eax
  6395 000032C8 F9                      		stc
  6396 000032C9 66BD0E00                		mov bp,pserr_no_memory
  6397 000032CD 740D                    		jz prim_array_90
  6398 000032CF 26668908                		mov [es:eax],cx
  6399 000032D3 31C9                    		xor ecx,ecx
  6400 000032D5 B20A                    		mov dl,t_array
  6401 000032D7 E892E6FFFF              		call set_pstack_tos
  6402                                  prim_array_90:
  6403 000032DC C3                      		ret
  6404                                  
  6405                                  
  6406                                  ;; pop - remove TOS
  6407                                  ;
  6408                                  ; group: stackbasic
  6409                                  ;
  6410                                  ; ( obj1 -- )
  6411                                  ;
  6412                                  ; example
  6413                                  ;   % status: true or false
  6414                                  ;   "bad" status { pop "ok" } if	% "bad" or "ok"
  6415                                  ;
  6416                                  
  6417                                  		bits 32
  6418                                  
  6419                                  prim_pop:
  6420 000032DD 833D[C4000000]01        		cmp dword [pstack.ptr],1
  6421 000032E4 66BD0300                		mov bp,pserr_pstack_underflow
  6422 000032E8 7206                    		jc prim_pop_90
  6423 000032EA FF0D[C4000000]          		dec dword [pstack.ptr]
  6424                                  prim_pop_90:
  6425 000032F0 C3                      		ret
  6426                                  
  6427                                  
  6428                                  ;; dup - duplicate TOS
  6429                                  ;
  6430                                  ; group: stackbasic
  6431                                  ;
  6432                                  ; ( obj1 -- obj1 obj1 )
  6433                                  ;
  6434                                  ; example
  6435                                  ;   key		% key: some input value
  6436                                  ;   dup 'a' eq { do_a } if	% if key = 'a'
  6437                                  ;   dup 'b' eq { do_b } if	% if key = 'b'
  6438                                  ;   dup 'c' eq { do_c } if	% if key = 'c'
  6439                                  ;   pop
  6440                                  ;
  6441                                  
  6442                                  		bits 32
  6443                                  
  6444                                  prim_dup:
  6445 000032F1 8B0D[C4000000]          		mov ecx,[pstack.ptr]
  6446 000032F7 3B0D[C0000000]          		cmp ecx,[pstack.size]
  6447 000032FD F5                      		cmc
  6448 000032FE 66BD0400                		mov bp,pserr_pstack_overflow
  6449 00003302 721A                    		jb prim_dup_90
  6450 00003304 31C9                    		xor ecx,ecx
  6451 00003306 E84EE6FFFF              		call get_pstack_tos
  6452 0000330B 66BD0300                		mov bp,pserr_pstack_underflow
  6453 0000330F 720D                    		jc prim_dup_90
  6454 00003311 31C9                    		xor ecx,ecx
  6455 00003313 FF05[C4000000]          		inc dword [pstack.ptr]
  6456 00003319 E850E6FFFF              		call set_pstack_tos
  6457                                  prim_dup_90:
  6458 0000331E C3                      		ret
  6459                                  
  6460                                  
  6461                                  ;; over - copy TOS-1
  6462                                  ;
  6463                                  ; group: stackbasic
  6464                                  ;
  6465                                  ; ( obj1 obj2 -- obj1 obj2 obj1 )
  6466                                  ;
  6467                                  
  6468                                  		bits 32
  6469                                  
  6470                                  prim_over:
  6471 0000331F 8B0D[C4000000]          		mov ecx,[pstack.ptr]
  6472 00003325 3B0D[C0000000]          		cmp ecx,[pstack.size]
  6473 0000332B F5                      		cmc
  6474 0000332C 66BD0400                		mov bp,pserr_pstack_overflow
  6475 00003330 721D                    		jb prim_over_90
  6476 00003332 B901000000              		mov ecx,1
  6477 00003337 E81DE6FFFF              		call get_pstack_tos
  6478 0000333C 66BD0300                		mov bp,pserr_pstack_underflow
  6479 00003340 720D                    		jc prim_over_90
  6480 00003342 31C9                    		xor ecx,ecx
  6481 00003344 FF05[C4000000]          		inc dword [pstack.ptr]
  6482 0000334A E81FE6FFFF              		call set_pstack_tos
  6483                                  prim_over_90:
  6484 0000334F C3                      		ret
  6485                                  
  6486                                  
  6487                                  ;; index - copy stack element
  6488                                  ;
  6489                                  ; group: stackbasic
  6490                                  ;
  6491                                  ; ( objN ... obj1 int1 -- objN ... obj1 objM )
  6492                                  ;
  6493                                  ; objM: M = int1 + 1
  6494                                  ;
  6495                                  ; example
  6496                                  ;   /dup { 0 index } def
  6497                                  ;   /over { 1 index } def
  6498                                  ;
  6499                                  
  6500                                  		bits 32
  6501                                  
  6502                                  prim_index:
  6503 00003350 B201                    		mov dl,t_int
  6504 00003352 E862FDFFFF              		call get_1arg
  6505 00003357 7222                    		jc prim_index_90
  6506                                  
  6507 00003359 8B15[C4000000]          		mov edx,[pstack.ptr]
  6508 0000335F 83EA02                  		sub edx,2
  6509 00003362 7217                    		jc prim_index_90
  6510 00003364 39C2                    		cmp edx,eax
  6511 00003366 66BD0300                		mov bp,pserr_pstack_underflow
  6512 0000336A 720F                    		jc prim_index_90
  6513                                  
  6514 0000336C 8D4801                  		lea ecx,[eax+1]
  6515 0000336F E8E5E5FFFF              		call get_pstack_tos
  6516 00003374 31C9                    		xor ecx,ecx
  6517 00003376 E8F3E5FFFF              		call set_pstack_tos
  6518                                  prim_index_90:
  6519 0000337B C3                      		ret
  6520                                  
  6521                                  
  6522                                  ;; exec - evaluate object
  6523                                  ;
  6524                                  ; group: control
  6525                                  ;
  6526                                  ; ( dict1 -- )
  6527                                  ; ( obj1 -- obj1 )
  6528                                  ;
  6529                                  ; If obj1 is a dictionary entry, it is looked up and evaluated. If not, the stack is
  6530                                  ; left unchanged.
  6531                                  ;
  6532                                  ; Note: Unlike Postscript, no cvx is necessary. And it works only with
  6533                                  ; dictionary references.
  6534                                  ;
  6535                                  ; example
  6536                                  ;
  6537                                  ;   /foo [ /bar 100 "abc" ] def
  6538                                  ;   foo 0 get				% /bar
  6539                                  ;   exec				% run bar
  6540                                  ;   foo 2 get				% "abc"
  6541                                  ;   exec				% still "abc"
  6542                                  ;
  6543                                  
  6544                                  		bits 32
  6545                                  
  6546                                  prim_exec:
  6547 0000337C B200                    		mov dl,t_none
  6548 0000337E E84A1C0000              		call pr_setobj_or_none
  6549 00003383 80FA09                  		cmp dl,t_dict_idx
  6550 00003386 7405                    		jz prim_exec_50
  6551 00003388 E91D1C0000              		jmp pr_getobj
  6552                                  prim_exec_50:
  6553 0000338D A3[92000000]            		mov [pscode_eval],eax
  6554 00003392 C3                      		ret
  6555                                  
  6556                                  
  6557                                  ;; add - addition
  6558                                  ;
  6559                                  ; group: arith
  6560                                  ;
  6561                                  ; ( int1 int2 -- int3 )
  6562                                  ; ( string1 int4 -- string2 )
  6563                                  ; ( ptr1 int5 -- ptr2 )
  6564                                  ;
  6565                                  ; int3: int1 + int2
  6566                                  ; string2: substring of string1 at offset int4
  6567                                  ;
  6568                                  ; Note: Strings are treated as byte sequences, not Unicode chars. Sizes of string1 and ptr1 are not
  6569                                  ; checked.
  6570                                  ;
  6571                                  ; example
  6572                                  ;   1 2 add		% 3
  6573                                  ;
  6574                                  ;   "abc" 1 add		% "bc"
  6575                                  ;
  6576                                  
  6577                                  		bits 32
  6578                                  
  6579                                  prim_add:
  6580 00003393 66BA0101                		mov dx,t_int + (t_int << 8)
  6581 00003397 E844FDFFFF              		call get_2args
  6582 0000339C 731F                    		jnc prim_add_50
  6583 0000339E 6681FA0104              		cmp dx,t_int + (t_string << 8)
  6584 000033A3 7418                    		jz prim_add_50
  6585 000033A5 6681FA010C              		cmp dx,t_int + (t_ptr << 8)
  6586 000033AA 7411                    		jz prim_add_50
  6587 000033AC 6681FA0401              		cmp dx,t_string + (t_int << 8)
  6588 000033B1 7408                    		jz prim_add_40
  6589 000033B3 6681FA0C01              		cmp dx,t_ptr + (t_int << 8)
  6590 000033B8 F9                      		stc
  6591 000033B9 7513                    		jnz prim_add_90
  6592                                  prim_add_40:
  6593 000033BB 86D6                    		xchg dl,dh
  6594                                  prim_add_50:
  6595 000033BD 01C8                    		add eax,ecx
  6596 000033BF FF0D[C4000000]          		dec dword [pstack.ptr]
  6597 000033C5 31C9                    		xor ecx,ecx
  6598 000033C7 88F2                    		mov dl,dh
  6599 000033C9 E8A0E5FFFF              		call set_pstack_tos
  6600                                  prim_add_90:
  6601 000033CE C3                      		ret
  6602                                  
  6603                                  
  6604                                  ;; sub - subtraction
  6605                                  ;
  6606                                  ; group: arith
  6607                                  ;
  6608                                  ; ( int1 int2 -- int3 )
  6609                                  ; ( string1 int4 -- string2 )
  6610                                  ; ( ptr1 int5 -- ptr2 )
  6611                                  ; ( string3 string4 -- int6 )
  6612                                  ; ( ptr2 ptr3 -- int7 )
  6613                                  ;
  6614                                  ; int3: int1 - int2
  6615                                  ; string2: substring of string1 at offset -int4
  6616                                  ; int6: string3 - string4
  6617                                  ; int7: ptr2 - ptr3
  6618                                  ;
  6619                                  ; Note: Strings are treated as byte sequences, not Unicode chars. Boundaries of string1 and ptr1 are not
  6620                                  ; checked.
  6621                                  ;
  6622                                  ; example
  6623                                  ;   3 1 sub		% 2
  6624                                  ;
  6625                                  ;   "abcd" 3 add	% "d"
  6626                                  ;   2 sub		% "bcd"
  6627                                  ;
  6628                                  
  6629                                  		bits 32
  6630                                  
  6631                                  prim_sub:
  6632 000033CF 66BA0101                		mov dx,t_int + (t_int << 8)
  6633 000033D3 E808FDFFFF              		call get_2args
  6634 000033D8 731F                    		jnc prim_sub_50
  6635 000033DA 6681FA0104              		cmp dx,t_int + (t_string << 8)
  6636 000033DF 7418                    		jz prim_sub_50
  6637 000033E1 6681FA010C              		cmp dx,t_int + (t_ptr << 8)
  6638 000033E6 7411                    		jz prim_sub_50
  6639 000033E8 6681FA0C0C              		cmp dx,t_ptr + (t_ptr << 8)
  6640 000033ED 7408                    		jz prim_sub_40
  6641 000033EF 6681FA0404              		cmp dx,t_string + (t_string << 8)
  6642 000033F4 F9                      		stc
  6643 000033F5 7514                    		jnz prim_sub_90
  6644                                  prim_sub_40:
  6645 000033F7 B601                    		mov dh,t_int
  6646                                  prim_sub_50:
  6647 000033F9 91                      		xchg eax,ecx
  6648 000033FA 29C8                    		sub eax,ecx
  6649 000033FC FF0D[C4000000]          		dec dword [pstack.ptr]
  6650 00003402 31C9                    		xor ecx,ecx
  6651 00003404 88F2                    		mov dl,dh
  6652 00003406 E863E5FFFF              		call set_pstack_tos
  6653                                  prim_sub_90:
  6654 0000340B C3                      		ret
  6655                                  
  6656                                  
  6657                                  ;; mul - multiplication
  6658                                  ;
  6659                                  ; group: arith
  6660                                  ;
  6661                                  ; ( int1 int2 -- int3 )
  6662                                  ;
  6663                                  ; int3: int1 * int2
  6664                                  ;
  6665                                  ; example
  6666                                  ;   2 3 mul	% 6
  6667                                  ;
  6668                                  
  6669                                  		bits 32
  6670                                  
  6671                                  prim_mul:
  6672 0000340C 66BA0101                		mov dx,t_int + (t_int << 8)
  6673 00003410 E8CBFCFFFF              		call get_2args
  6674 00003415 7211                    		jc prim_mul_90
  6675 00003417 F7E9                    		imul ecx
  6676 00003419 FF0D[C4000000]          		dec dword [pstack.ptr]
  6677 0000341F 31C9                    		xor ecx,ecx
  6678 00003421 B201                    		mov dl,t_int
  6679 00003423 E846E5FFFF              		call set_pstack_tos
  6680                                  prim_mul_90:
  6681 00003428 C3                      		ret
  6682                                  
  6683                                  
  6684                                  ;; div - division
  6685                                  ;
  6686                                  ; group: arith
  6687                                  ;
  6688                                  ; ( int1 int2 -- int3 )
  6689                                  ;
  6690                                  ; int3: int1 / int2
  6691                                  ;
  6692                                  ; example
  6693                                  ;   17 3 div	% 5
  6694                                  ;
  6695                                  
  6696                                  		bits 32
  6697                                  
  6698                                  prim_div:
  6699 00003429 66BA0101                		mov dx,t_int + (t_int << 8)
  6700 0000342D E8AEFCFFFF              		call get_2args
  6701 00003432 721C                    		jc prim_div_90
  6702 00003434 09C0                    		or eax,eax
  6703 00003436 F9                      		stc
  6704 00003437 66BD0900                		mov bp,pserr_div_by_zero
  6705 0000343B 7413                    		jz prim_div_90
  6706 0000343D 91                      		xchg eax,ecx
  6707 0000343E 99                      		cdq
  6708 0000343F F7F9                    		idiv ecx
  6709 00003441 FF0D[C4000000]          		dec dword [pstack.ptr]
  6710 00003447 31C9                    		xor ecx,ecx
  6711 00003449 B201                    		mov dl,t_int
  6712 0000344B E81EE5FFFF              		call set_pstack_tos
  6713                                  prim_div_90:
  6714 00003450 C3                      		ret
  6715                                  
  6716                                  
  6717                                  ;; mod - remainder
  6718                                  ;
  6719                                  ; group: arith
  6720                                  ;
  6721                                  ; ( int1 int2 -- int3 )
  6722                                  ;
  6723                                  ; int3: int1 % int2
  6724                                  ;
  6725                                  ; example
  6726                                  ;   17 3 mod	% 2
  6727                                  ;
  6728                                  
  6729                                  		bits 32
  6730                                  
  6731                                  prim_mod:
  6732 00003451 66BA0101                		mov dx,t_int + (t_int << 8)
  6733 00003455 E886FCFFFF              		call get_2args
  6734 0000345A 721D                    		jc prim_mod_90
  6735 0000345C 09C0                    		or eax,eax
  6736 0000345E F9                      		stc
  6737 0000345F 66BD0900                		mov bp,pserr_div_by_zero
  6738 00003463 74EB                    		jz prim_div_90
  6739 00003465 91                      		xchg eax,ecx
  6740 00003466 99                      		cdq
  6741 00003467 F7F9                    		idiv ecx
  6742 00003469 92                      		xchg eax,edx
  6743 0000346A FF0D[C4000000]          		dec dword [pstack.ptr]
  6744 00003470 31C9                    		xor ecx,ecx
  6745 00003472 B201                    		mov dl,t_int
  6746 00003474 E8F5E4FFFF              		call set_pstack_tos
  6747                                  prim_mod_90:
  6748 00003479 C3                      		ret
  6749                                  
  6750                                  
  6751                                  ;; neg - negation
  6752                                  ;
  6753                                  ; group: arith
  6754                                  ;
  6755                                  ; ( int1 -- int2 )
  6756                                  ;
  6757                                  ; int2: -int1
  6758                                  ;
  6759                                  ; example
  6760                                  ;   5 neg	% -5
  6761                                  ;
  6762                                  
  6763                                  		bits 32
  6764                                  
  6765                                  prim_neg:
  6766 0000347A B201                    		mov dl,t_int
  6767 0000347C E838FCFFFF              		call get_1arg
  6768 00003481 7209                    		jc prim_neg_90
  6769 00003483 F7D8                    		neg eax
  6770 00003485 31C9                    		xor ecx,ecx
  6771 00003487 E8E2E4FFFF              		call set_pstack_tos
  6772                                  prim_neg_90:
  6773 0000348C C3                      		ret
  6774                                  
  6775                                  
  6776                                  ;; abs - absolute value
  6777                                  ;
  6778                                  ; group: arith
  6779                                  ;
  6780                                  ; ( int1 -- int2 )
  6781                                  ;
  6782                                  ; int2: |int1|
  6783                                  ;
  6784                                  ; example
  6785                                  ;   -6 abs	% 6
  6786                                  ;
  6787                                  
  6788                                  		bits 32
  6789                                  
  6790                                  prim_abs:
  6791 0000348D B201                    		mov dl,t_int
  6792 0000348F E825FCFFFF              		call get_1arg
  6793 00003494 720D                    		jc prim_abs_90
  6794 00003496 09C0                    		or eax,eax
  6795 00003498 7902                    		jns prim_abs_50
  6796 0000349A F7D8                    		neg eax
  6797                                  prim_abs_50:
  6798 0000349C 31C9                    		xor ecx,ecx
  6799 0000349E E8CBE4FFFF              		call set_pstack_tos
  6800                                  prim_abs_90:
  6801 000034A3 C3                      		ret
  6802                                  
  6803                                  
  6804                                  ;; min - minimum
  6805                                  ;
  6806                                  ; group: arith
  6807                                  ;
  6808                                  ; ( int1 int2 -- int3 )
  6809                                  ;
  6810                                  ; int3: min(int1, int2)
  6811                                  ;
  6812                                  ; example
  6813                                  ;   4 11 min	% 4
  6814                                  ;
  6815                                  
  6816                                  		bits 32
  6817                                  
  6818                                  prim_min:
  6819 000034A4 66BA0101                		mov dx,t_int + (t_int << 8)
  6820 000034A8 E833FCFFFF              		call get_2args
  6821 000034AD 7212                    		jc prim_min_90
  6822 000034AF 39C8                    		cmp eax,ecx
  6823 000034B1 7E01                    		jle prim_min_50
  6824 000034B3 91                      		xchg eax,ecx
  6825                                  prim_min_50:
  6826 000034B4 FF0D[C4000000]          		dec dword [pstack.ptr]
  6827 000034BA 31C9                    		xor ecx,ecx
  6828 000034BC E8ADE4FFFF              		call set_pstack_tos
  6829                                  prim_min_90:
  6830 000034C1 C3                      		ret
  6831                                  
  6832                                  
  6833                                  ;; max - maximum
  6834                                  ;
  6835                                  ; group: arith
  6836                                  ;
  6837                                  ; ( int1 int2 -- int3 )
  6838                                  ;
  6839                                  ; int3: max(int1, int2)
  6840                                  ;
  6841                                  ; example
  6842                                  ;   4 11 max	% 11
  6843                                  ;
  6844                                  
  6845                                  		bits 32
  6846                                  
  6847                                  prim_max:
  6848 000034C2 66BA0101                		mov dx,t_int + (t_int << 8)
  6849 000034C6 E815FCFFFF              		call get_2args
  6850 000034CB 7212                    		jc prim_max_90
  6851 000034CD 39C8                    		cmp eax,ecx
  6852 000034CF 7D01                    		jge prim_max_50
  6853 000034D1 91                      		xchg eax,ecx
  6854                                  prim_max_50:
  6855 000034D2 FF0D[C4000000]          		dec dword [pstack.ptr]
  6856 000034D8 31C9                    		xor ecx,ecx
  6857 000034DA E88FE4FFFF              		call set_pstack_tos
  6858                                  prim_max_90:
  6859 000034DF C3                      		ret
  6860                                  
  6861                                  
  6862                                  		bits 32
  6863                                  
  6864                                  plog_args:
  6865 000034E0 66BA0101                		mov dx,t_int + (t_int << 8)
  6866 000034E4 E8F7FBFFFF              		call get_2args
  6867 000034E9 732B                    		jnc plog_args_90
  6868 000034EB 6681FA0103              		cmp dx,t_int + (t_bool << 8)
  6869 000034F0 7412                    		jz plog_args_20
  6870 000034F2 6681FA0301              		cmp dx,t_bool + (t_int << 8)
  6871 000034F7 740B                    		jz plog_args_20
  6872 000034F9 6681FA0303              		cmp dx,t_bool + (t_bool << 8)
  6873 000034FE 7404                    		jz plog_args_20
  6874 00003500 F9                      		stc
  6875 00003501 58                      		pop eax			; don't return
  6876 00003502 EB12                    		jmp plog_args_90
  6877                                  plog_args_20:
  6878 00003504 B203                    		mov dl,t_bool
  6879 00003506 09C0                    		or eax,eax
  6880 00003508 0F95C0                  		setnz al
  6881 0000350B 0FB6C0                  		movzx eax,al
  6882 0000350E 09C9                    		or ecx,ecx
  6883 00003510 0F95C1                  		setnz cl
  6884 00003513 0FB6C9                  		movzx ecx,cl
  6885                                  plog_args_90:
  6886 00003516 C3                      		ret
  6887                                  
  6888                                  
  6889                                  ;; and - logical or arithmetical 'and'
  6890                                  ;
  6891                                  ; group: arith
  6892                                  ;
  6893                                  ; ( int1 int2 -- int3 )
  6894                                  ; ( bool1 bool2 -- bool3 )
  6895                                  ;
  6896                                  ; int3: int1 &amp; int2
  6897                                  ; bool3: bool1 &amp;&amp; bool2
  6898                                  ;
  6899                                  ; Note: Mixing boolean and integer argument types is possible, in this case integers are
  6900                                  ; converted to boolean first.
  6901                                  ;
  6902                                  ; example
  6903                                  ;   true false and	% false
  6904                                  ;
  6905                                  ;   3 6 and		% 2
  6906                                  ;
  6907                                  ;   10 true and		% gives true, but please avoid this
  6908                                  ;
  6909                                  
  6910                                  		bits 32
  6911                                  
  6912                                  prim_and:
  6913 00003517 E8C4FFFFFF              		call plog_args
  6914 0000351C 21C8                    		and eax,ecx
  6915                                  prim_and_50:
  6916 0000351E FF0D[C4000000]          		dec dword [pstack.ptr]
  6917 00003524 31C9                    		xor ecx,ecx
  6918 00003526 E843E4FFFF              		call set_pstack_tos
  6919 0000352B C3                      		ret
  6920                                  
  6921                                  
  6922                                  ;; or - logical or arithmetical 'or'
  6923                                  ;
  6924                                  ; group: arith
  6925                                  ;
  6926                                  ; ( int1 int2 -- int3 )
  6927                                  ; ( bool1 bool2 -- bool3 )
  6928                                  ;
  6929                                  ; int3: int1 | int2
  6930                                  ; bool3: bool || bool2
  6931                                  ;
  6932                                  ; Note: Mixing boolean and integer argument types is possible, in this case integers are
  6933                                  ; converted to boolean first.
  6934                                  ;
  6935                                  ; example
  6936                                  ;   true false or	% true
  6937                                  ;
  6938                                  ;   3 6 or		% 7
  6939                                  ;
  6940                                  ;   10 true or		% gives true, but please avoid this
  6941                                  ;
  6942                                  
  6943                                  		bits 32
  6944                                  
  6945                                  prim_or:
  6946 0000352C E8AFFFFFFF              		call plog_args
  6947 00003531 09C8                    		or eax,ecx
  6948 00003533 EBE9                    		jmp prim_and_50
  6949                                  
  6950                                  
  6951                                  ;; xor - logical or arithmetical exclusive 'or'
  6952                                  ;
  6953                                  ; group: arith
  6954                                  ;
  6955                                  ; ( int1 int2 -- int3 )
  6956                                  ; ( bool1 bool2 -- bool3 )
  6957                                  ;
  6958                                  ; int3: int1 ^ int2
  6959                                  ; bool3: bool ^^ bool2
  6960                                  ;
  6961                                  ; Note: Mixing boolean and integer argument types is possible, in this case integers are
  6962                                  ; converted to boolean first.
  6963                                  ;
  6964                                  ; example
  6965                                  ;   true false xor	% true
  6966                                  ;
  6967                                  ;   3 6 xor		% 5
  6968                                  ;
  6969                                  ;   10 true xor		% gives false, but please avoid this
  6970                                  ;
  6971                                  
  6972                                  		bits 32
  6973                                  
  6974                                  prim_xor:
  6975 00003535 E8A6FFFFFF              		call plog_args
  6976 0000353A 31C8                    		xor eax,ecx
  6977 0000353C EBE0                    		jmp prim_and_50
  6978                                  
  6979                                  
  6980                                  ;; not - logical or arithmetical 'not'
  6981                                  ;
  6982                                  ; group: arith
  6983                                  ;
  6984                                  ; ( int1 -- int2 )
  6985                                  ; ( bool1 -- bool2 )
  6986                                  ;
  6987                                  ; int2: -int1 - 1
  6988                                  ; bool2: !bool1
  6989                                  ;
  6990                                  ; example
  6991                                  ;   true not		% false
  6992                                  ;
  6993                                  ;   0 not		% -1
  6994                                  ;
  6995                                  
  6996                                  		bits 32
  6997                                  
  6998                                  prim_not:
  6999 0000353E 31C9                    		xor ecx,ecx
  7000 00003540 E814E4FFFF              		call get_pstack_tos
  7001 00003545 721C                    		jc prim_not_90
  7002 00003547 80FA01                  		cmp dl,t_int
  7003 0000354A 740E                    		jz prim_not_50
  7004 0000354C 80FA03                  		cmp dl,t_bool
  7005 0000354F 66BD0800                		mov bp,pserr_wrong_arg_types
  7006 00003553 F9                      		stc
  7007 00003554 750D                    		jnz prim_not_90
  7008 00003556 3401                    		xor al,1
  7009 00003558 F7D0                    		not eax
  7010                                  prim_not_50:
  7011 0000355A F7D0                    		not eax
  7012 0000355C 31C9                    		xor ecx,ecx
  7013 0000355E E80BE4FFFF              		call set_pstack_tos
  7014                                  prim_not_90:
  7015 00003563 C3                      		ret
  7016                                  
  7017                                  
  7018                                  ;; shl - shift left
  7019                                  ;
  7020                                  ; group: arith
  7021                                  ;
  7022                                  ; ( int1 int2 -- int3 )
  7023                                  ;
  7024                                  ; int3: int1 &lt;&lt; int2
  7025                                  ;
  7026                                  ; example
  7027                                  ;   5 2 shl	% 20
  7028                                  ;
  7029                                  
  7030                                  		bits 32
  7031                                  
  7032                                  prim_shl:
  7033 00003564 66BA0101                		mov dx,t_int + (t_int << 8)
  7034 00003568 E873FBFFFF              		call get_2args
  7035 0000356D 7217                    		jc prim_shl_90
  7036 0000356F 91                      		xchg eax,ecx
  7037 00003570 D3E0                    		shl eax,cl
  7038 00003572 83F920                  		cmp ecx,byte 20h
  7039 00003575 7202                    		jb prim_shl_50
  7040 00003577 31C0                    		xor eax,eax
  7041                                  prim_shl_50:
  7042 00003579 FF0D[C4000000]          		dec dword [pstack.ptr]
  7043 0000357F 31C9                    		xor ecx,ecx
  7044 00003581 E8E8E3FFFF              		call set_pstack_tos
  7045                                  prim_shl_90:
  7046 00003586 C3                      		ret
  7047                                  
  7048                                  
  7049                                  ;; shr - shift right
  7050                                  ;
  7051                                  ; group: arith
  7052                                  ;
  7053                                  ; ( int1 int2 -- int3 )
  7054                                  ;
  7055                                  ; int3: int1 >> int2
  7056                                  ;
  7057                                  ; example
  7058                                  ;   15 2 shr	% 3
  7059                                  ;
  7060                                  
  7061                                  		bits 32
  7062                                  
  7063                                  prim_shr:
  7064 00003587 66BA0101                		mov dx,t_int + (t_int << 8)
  7065 0000358B E850FBFFFF              		call get_2args
  7066 00003590 7217                    		jc prim_shr_90
  7067 00003592 91                      		xchg eax,ecx
  7068 00003593 83F920                  		cmp ecx,byte 20h
  7069 00003596 7202                    		jb prim_shr_50
  7070 00003598 B11F                    		mov cl,1fh
  7071                                  prim_shr_50:
  7072 0000359A D3F8                    		sar eax,cl
  7073 0000359C FF0D[C4000000]          		dec dword [pstack.ptr]
  7074 000035A2 31C9                    		xor ecx,ecx
  7075 000035A4 E8C5E3FFFF              		call set_pstack_tos
  7076                                  prim_shr_90:
  7077 000035A9 C3                      		ret
  7078                                  
  7079                                  
  7080                                  ;; def - define new word
  7081                                  ;
  7082                                  ; group: code
  7083                                  ;
  7084                                  ; ( dict1 obj1  -- )
  7085                                  ;
  7086                                  ; dict1: is defined as obj1
  7087                                  ;
  7088                                  ; example
  7089                                  ;   /x 100 def		% define constant x as 100
  7090                                  ;
  7091                                  ;   /neg { -1 mul } def	% define 'neg' function
  7092                                  ;
  7093                                  
  7094                                  		bits 32
  7095                                  
  7096                                  prim_def:
  7097 000035AA 66BA0009                		mov dx,t_none + (t_dict_idx << 8)
  7098 000035AE E82DFBFFFF              		call get_2args
  7099 000035B3 721C                    		jc prim_def_90
  7100 000035B5 80FA08                  		cmp dl,t_sec
  7101 000035B8 66BD0800                		mov bp,pserr_wrong_arg_types
  7102 000035BC F9                      		stc
  7103 000035BD 7412                    		jz prim_def_90
  7104                                  		; note: ecx is index
  7105 000035BF E8CEE4FFFF              		call set_dict_entry
  7106 000035C4 66BD0700                		mov bp,pserr_invalid_dict
  7107 000035C8 7207                    		jc prim_def_90
  7108 000035CA 832D[C4000000]02        		sub dword [pstack.ptr],2
  7109                                  prim_def_90:
  7110 000035D1 C3                      		ret
  7111                                  
  7112                                  
  7113                                  ;; if - typical 'if'
  7114                                  ;
  7115                                  ; group: control
  7116                                  ;
  7117                                  ; ( bool1 code1 -- )
  7118                                  ; ( int1 code1 -- )
  7119                                  ; ( undef1 code1 -- )
  7120                                  ; ( obj1 code1 -- )
  7121                                  ;
  7122                                  ; bool1: contition
  7123                                  ; code1: code start marker (see @{)
  7124                                  ; int1: integer are automatically converted to boolean
  7125                                  ; undef1: the undefined value is treated as 'false'
  7126                                  ; obj1: strings, arrays, pointer are considered 'true'
  7127                                  ;
  7128                                  ; example
  7129                                  ;   10 4 gt { "10 > 4" show } if
  7130                                  ;
  7131                                  ;   "" { "is always true" show } if	% strings are always 'true'
  7132                                  ;
  7133                                  
  7134                                  		bits 32
  7135                                  
  7136                                  prim_if:
  7137 000035D2 66BA0503                		mov dx,t_code + (t_bool << 8)
  7138 000035D6 E805FBFFFF              		call get_2args
  7139 000035DB 731B                    		jnc prim_if_20
  7140 000035DD 80FE01                  		cmp dh,t_int
  7141 000035E0 7416                    		jz prim_if_20
  7142 000035E2 80FE00                  		cmp dh,t_none
  7143 000035E5 7411                    		jz prim_if_20
  7144 000035E7 B101                    		mov cl,1			; all pointer, strings, arrays  are 'true'
  7145 000035E9 80FE0C                  		cmp dh,t_ptr
  7146 000035EC 740A                    		jz prim_if_20
  7147 000035EE 80FE04                  		cmp dh,t_string
  7148 000035F1 7405                    		jz prim_if_20
  7149 000035F3 80FE0A                  		cmp dh,t_array
  7150 000035F6 7534                    		jnz prim_if_80
  7151                                  prim_if_20:
  7152 000035F8 832D[C4000000]02        		sub dword [pstack.ptr],2
  7153 000035FF 09C9                    		or ecx,ecx
  7154 00003601 742A                    		jz prim_if_90
  7155                                  		
  7156                                  		; branch
  7157 00003603 8705[8A000000]          		xchg eax,[pscode_next_instr]
  7158                                  
  7159 00003609 8B0D[D0000000]          		mov ecx,[rstack.ptr]
  7160 0000360F 3B0D[CC000000]          		cmp ecx,[rstack.size]
  7161 00003615 66BD0600                		mov bp,pserr_rstack_overflow
  7162 00003619 7311                    		jae prim_if_80
  7163 0000361B FF05[D0000000]          		inc dword [rstack.ptr]
  7164                                  
  7165 00003621 31C9                    		xor ecx,ecx
  7166 00003623 B215                    		mov dl,t_if			; mark as 'if' block
  7167 00003625 E8A8E3FFFF              		call set_rstack_tos
  7168 0000362A 7301                    		jnc prim_if_90
  7169                                  
  7170                                  prim_if_80:
  7171 0000362C F9                      		stc
  7172                                  prim_if_90:
  7173 0000362D C3                      		ret
  7174                                  
  7175                                  
  7176                                  ;; ifelse - typical 'if' / 'else'
  7177                                  ;
  7178                                  ; group: control
  7179                                  ;
  7180                                  ; ( bool1 code1 code2 -- )
  7181                                  ; ( int1 code1 code2 -- )
  7182                                  ; ( undef1 code1 code2 -- )
  7183                                  ; ( obj1 code1 code2 -- )
  7184                                  ;
  7185                                  ; bool1: contition
  7186                                  ; code1: code start marker (see @{) for 'true' branch
  7187                                  ; code2: code start marker (see @{) for 'false' branch
  7188                                  ; int1: integer are automatically converted to boolean
  7189                                  ; undef1: the undefined value is treated as 'false'
  7190                                  ; obj1: strings, arrays, pointer are considered 'true'
  7191                                  ;
  7192                                  ; example
  7193                                  ;   x1 x2 gt { "x1 > x2" } { "x1 &lt;= x2" } ifelse show
  7194                                  ;
  7195                                  
  7196                                  		bits 32
  7197                                  
  7198                                  prim_ifelse:
  7199 0000362E B902000000              		mov ecx,2
  7200 00003633 E821E3FFFF              		call get_pstack_tos
  7201 00003638 7269                    		jc prim_ifelse_90
  7202 0000363A 66BD0800                		mov bp,pserr_wrong_arg_types
  7203 0000363E 80FA03                  		cmp dl,t_bool
  7204 00003641 741B                    		jz prim_ifelse_10
  7205 00003643 80FA01                  		cmp dl,t_int
  7206 00003646 7416                    		jz prim_ifelse_10
  7207 00003648 80FA00                  		cmp dl,t_none
  7208 0000364B 7411                    		jz prim_ifelse_10
  7209 0000364D B001                    		mov al,1			; all pointer, strings, arrays  are 'true'
  7210 0000364F 80FA0C                  		cmp dl,t_ptr
  7211 00003652 740A                    		jz prim_ifelse_10
  7212 00003654 80FA04                  		cmp dl,t_string
  7213 00003657 7405                    		jz prim_ifelse_10
  7214 00003659 80FA0A                  		cmp dl,t_array
  7215 0000365C 7544                    		jnz prim_ifelse_80
  7216                                  prim_ifelse_10:
  7217 0000365E 50                      		push eax
  7218 0000365F 66BA0505                		mov dx,t_code + (t_code << 8)
  7219 00003663 E878FAFFFF              		call get_2args
  7220 00003668 5B                      		pop ebx
  7221 00003669 7238                    		jc prim_ifelse_90
  7222                                  
  7223 0000366B 832D[C4000000]03        		sub dword [pstack.ptr],3
  7224 00003672 09DB                    		or ebx,ebx
  7225 00003674 7403                    		jz prim_ifelse_20
  7226 00003676 86D6                    		xchg dl,dh
  7227 00003678 91                      		xchg eax,ecx
  7228                                  prim_ifelse_20:
  7229                                  		; branch
  7230 00003679 8705[8A000000]          		xchg eax,[pscode_next_instr]
  7231                                  
  7232 0000367F 8B0D[D0000000]          		mov ecx,[rstack.ptr]
  7233 00003685 3B0D[CC000000]          		cmp ecx,[rstack.size]
  7234 0000368B 66BD0600                		mov bp,pserr_rstack_overflow
  7235 0000368F 7311                    		jae prim_ifelse_80
  7236 00003691 FF05[D0000000]          		inc dword [rstack.ptr]
  7237                                  
  7238 00003697 31C9                    		xor ecx,ecx
  7239 00003699 B215                    		mov dl,t_if			; mark as 'if' block
  7240 0000369B E832E3FFFF              		call set_rstack_tos
  7241 000036A0 7301                    		jnc prim_ifelse_90
  7242                                  
  7243                                  prim_ifelse_80:
  7244 000036A2 F9                      		stc
  7245                                  prim_ifelse_90:
  7246 000036A3 C3                      		ret
  7247                                  
  7248                                  
  7249                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  7250                                  ; Compare 2 strings.
  7251                                  ;
  7252                                  ;  eax, ecx	strings
  7253                                  ;
  7254                                  ; return:
  7255                                  ;  al, cl	last compared chars (if !=)
  7256                                  ;  edx		length of identical parts
  7257                                  ;
  7258                                  
  7259                                  		bits 32
  7260                                  
  7261                                  pcmp_str:
  7262 000036A4 89C6                    		mov esi,eax
  7263 000036A6 89CF                    		mov edi,ecx
  7264                                  
  7265 000036A8 31C9                    		xor ecx,ecx
  7266 000036AA 31C0                    		xor eax,eax
  7267 000036AC 31D2                    		xor edx,edx
  7268                                  pcmp_str_20:
  7269 000036AE 88C4                    		mov ah,al
  7270 000036B0 88CD                    		mov ch,cl
  7271 000036B2 268A06                  		mov al,[es:esi]
  7272 000036B5 268A0F                  		mov cl,[es:edi]
  7273 000036B8 38C8                    		cmp al,cl
  7274 000036BA 750D                    		jnz pcmp_str_50
  7275 000036BC 08C0                    		or al,al
  7276 000036BE 7409                    		jz pcmp_str_50
  7277 000036C0 08C9                    		or cl,cl
  7278 000036C2 7405                    		jz pcmp_str_50
  7279 000036C4 46                      		inc esi
  7280 000036C5 47                      		inc edi
  7281 000036C6 42                      		inc edx
  7282 000036C7 75E5                    		jnz pcmp_str_20
  7283                                  pcmp_str_50:
  7284 000036C9 C3                      		ret
  7285                                  
  7286                                  
  7287                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  7288                                  ; Compare 2 objects.
  7289                                  ;
  7290                                  
  7291                                  		bits 32
  7292                                  
  7293                                  pcmp_args:
  7294                                  		; integer
  7295 000036CA 66BA0101                		mov dx,t_int + (t_int << 8)
  7296 000036CE 53                      		push ebx
  7297 000036CF E80CFAFFFF              		call get_2args
  7298 000036D4 5B                      		pop ebx
  7299 000036D5 7322                    		jnc pcmp_args_90
  7300                                  
  7301                                  		; strings
  7302 000036D7 6681FA0404              		cmp dx,t_string + (t_string << 8)
  7303 000036DC 7413                    		jz pcmp_args_60
  7304                                  
  7305                                  		; two identical objects
  7306 000036DE 38F2                    		cmp dl,dh
  7307 000036E0 7417                    		jz pcmp_args_90
  7308                                  
  7309 000036E2 80FB01                  		cmp bl,1
  7310 000036E5 7211                    		jc pcmp_args_80
  7311                                  
  7312 000036E7 39C8                    		cmp eax,ecx
  7313 000036E9 750E                    		jnz pcmp_args_90
  7314 000036EB 88D0                    		mov al,dl
  7315 000036ED 88F1                    		mov cl,dh
  7316 000036EF EB08                    		jmp pcmp_args_90
  7317                                  
  7318                                  pcmp_args_60:
  7319 000036F1 E8AEFFFFFF              		call pcmp_str
  7320 000036F6 EB01                    		jmp pcmp_args_90
  7321                                  pcmp_args_80:
  7322 000036F8 58                      		pop eax			; skip last return
  7323                                  pcmp_args_90:
  7324 000036F9 C3                      		ret
  7325                                  
  7326                                  
  7327                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  7328                                  ; Return 'true'
  7329                                  ;
  7330                                  
  7331                                  		bits 32
  7332                                  
  7333                                  pcmp_true:
  7334 000036FA B801000000              		mov eax,1
  7335 000036FF EB02                    		jmp pcmp_false_10
  7336                                  
  7337                                  
  7338                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  7339                                  ; Return 'false'
  7340                                  ;
  7341                                  
  7342                                  		bits 32
  7343                                  
  7344                                  pcmp_false:
  7345 00003701 31C0                    		xor eax,eax
  7346                                  pcmp_false_10:
  7347 00003703 B203                    		mov dl,t_bool
  7348 00003705 FF0D[C4000000]          		dec dword [pstack.ptr]
  7349 0000370B 31C9                    		xor ecx,ecx
  7350 0000370D E85CE2FFFF              		call set_pstack_tos
  7351 00003712 C3                      		ret
  7352                                  
  7353                                  
  7354                                  ;; eq - equal
  7355                                  ;
  7356                                  ; group: cmp
  7357                                  ;
  7358                                  ; ( int1 int2 -- bool1 )
  7359                                  ; ( str1 str2 -- bool2 )
  7360                                  ; ( obj1 obj2 -- bool3 )
  7361                                  ;
  7362                                  ; bool1: true if int1 == int2
  7363                                  ; bool2: true if str1 == str2
  7364                                  ; bool3: true if obj1 and obj2 are identical
  7365                                  ;
  7366                                  ; example
  7367                                  ;
  7368                                  ;   1 3 eq		% false
  7369                                  ;   "abc" "abc" eq	% true
  7370                                  ;   /a [ 1 2 ] def
  7371                                  ;   /b a def
  7372                                  ;   a [ 1 2 ] eq	% false (not the same array)
  7373                                  ;   a b eq		% true
  7374                                  ;
  7375                                  
  7376                                  		bits 32
  7377                                  
  7378                                  prim_eq:
  7379 00003713 B301                    		mov bl,1
  7380 00003715 E8B0FFFFFF              		call pcmp_args
  7381 0000371A 39C1                    		cmp ecx,eax
  7382 0000371C 74DC                    		jz pcmp_true
  7383 0000371E EBE1                    		jmp pcmp_false
  7384                                  
  7385                                  
  7386                                  ;; ne - not equal
  7387                                  ;
  7388                                  ; group: cmp
  7389                                  ;
  7390                                  ; ( int1 int2 -- bool1 )
  7391                                  ; ( str1 str2 -- bool2 )
  7392                                  ; ( obj1 obj2 -- bool3 )
  7393                                  ;
  7394                                  ; bool1: false if int1 == int2
  7395                                  ; bool2: false if str1 == str2
  7396                                  ; bool3: false if obj1 and obj2 are identical
  7397                                  ;
  7398                                  ; example
  7399                                  ;
  7400                                  ;   1 3 ne		% true
  7401                                  ;   "abc" "abc" ne	% false
  7402                                  ;   /a [ 1 2 ] def
  7403                                  ;   /b a def
  7404                                  ;   a [ 1 2 ] ne        % true (not the same array)
  7405                                  ;   a b ne              % false
  7406                                  ;
  7407                                  
  7408                                  		bits 32
  7409                                  
  7410                                  prim_ne:
  7411 00003720 B301                    		mov bl,1
  7412 00003722 E8A3FFFFFF              		call pcmp_args
  7413 00003727 39C1                    		cmp ecx,eax
  7414 00003729 75CF                    		jnz pcmp_true
  7415 0000372B EBD4                    		jmp pcmp_false
  7416                                  
  7417                                  
  7418                                  ;; gt - greater than
  7419                                  ;
  7420                                  ; group: cmp
  7421                                  ;
  7422                                  ; ( int1 int2 -- bool1 )
  7423                                  ; ( str1 str2 -- bool2 )
  7424                                  ; ( ptr1 ptr2 -- bool3 )
  7425                                  ;
  7426                                  ; bool1: true if int1 > int2
  7427                                  ; bool2: true if str1 > str2
  7428                                  ; bool3: true if ptr1 > ptr2
  7429                                  ;
  7430                                  ; example
  7431                                  ;   7 4 gt		% true
  7432                                  ;   "abc" "abd" gt	% false
  7433                                  ;   /a 10 malloc def
  7434                                  ;   /b a + 2 def
  7435                                  ;   b a gt		% true
  7436                                  ;
  7437                                  
  7438                                  		bits 32
  7439                                  
  7440                                  prim_gt:
  7441 0000372D B300                    		mov bl,0
  7442 0000372F E896FFFFFF              		call pcmp_args
  7443 00003734 39C1                    		cmp ecx,eax
  7444 00003736 7FC2                    		jg pcmp_true
  7445 00003738 EBC7                    		jmp pcmp_false
  7446                                  
  7447                                  
  7448                                  ;; ge - greater or equal
  7449                                  ;
  7450                                  ; group: cmp
  7451                                  ;
  7452                                  ; ( int1 int2 -- bool1 )
  7453                                  ; ( str1 str2 -- bool2 )
  7454                                  ; ( ptr1 ptr2 -- bool3 )
  7455                                  ;
  7456                                  ; bool1: true if int1 >= int2
  7457                                  ; bool2: true if str1 >= str2
  7458                                  ; bool3: true if ptr1 >= ptr2
  7459                                  ;
  7460                                  ; example
  7461                                  ;   7 4 ge		% true
  7462                                  ;   "abc" "abc" ge	% true
  7463                                  ;   /a 10 malloc def
  7464                                  ;   /b a + 2 def
  7465                                  ;   b a ge		% true
  7466                                  ;
  7467                                  
  7468                                  		bits 32
  7469                                  
  7470                                  prim_ge:
  7471 0000373A B300                    		mov bl,0
  7472 0000373C E889FFFFFF              		call pcmp_args
  7473 00003741 39C1                    		cmp ecx,eax
  7474 00003743 7DB5                    		jge pcmp_true
  7475 00003745 EBBA                    		jmp pcmp_false
  7476                                  
  7477                                  
  7478                                  ;; lt - less than
  7479                                  ;
  7480                                  ; group: cmp
  7481                                  ;
  7482                                  ; ( int1 int2 -- bool1 )
  7483                                  ; ( str1 str2 -- bool2 )
  7484                                  ; ( ptr1 ptr2 -- bool3 )
  7485                                  ;
  7486                                  ; bool1: true if int1 &lt; int2
  7487                                  ; bool2: true if str1 &lt; str2
  7488                                  ; bool3: true if ptr1 &lt; ptr2
  7489                                  ;
  7490                                  ; example
  7491                                  ;   7 4 lt		% false
  7492                                  ;   "abc" "abd" lt	% true
  7493                                  ;   /a 10 malloc def
  7494                                  ;   /b a + 2 def
  7495                                  ;   b a lt		% false
  7496                                  ;
  7497                                  
  7498                                  		bits 32
  7499                                  
  7500                                  prim_lt:
  7501 00003747 B300                    		mov bl,0
  7502 00003749 E87CFFFFFF              		call pcmp_args
  7503 0000374E 39C1                    		cmp ecx,eax
  7504 00003750 7CA8                    		jl pcmp_true
  7505 00003752 EBAD                    		jmp pcmp_false
  7506                                  
  7507                                  
  7508                                  ;; le - less or equal
  7509                                  ;
  7510                                  ; group: cmp
  7511                                  ;
  7512                                  ; ( int1 int2 -- bool1 )
  7513                                  ; ( str1 str2 -- bool2 )
  7514                                  ; ( ptr1 ptr2 -- bool3 )
  7515                                  ;
  7516                                  ; bool1: true if int1 &lt;= int2
  7517                                  ; bool2: true if str1 &lt;= str2
  7518                                  ; bool3: true if ptr1 &lt;= ptr2
  7519                                  ;
  7520                                  ; example
  7521                                  ;   7 7 le		% true
  7522                                  ;   "abc" "abd" le	% true
  7523                                  ;   /a 10 malloc def
  7524                                  ;   /b a + 2 def
  7525                                  ;   b a le		% false
  7526                                  ;
  7527                                  
  7528                                  		bits 32
  7529                                  
  7530                                  prim_le:
  7531 00003754 B300                    		mov bl,0
  7532 00003756 E86FFFFFFF              		call pcmp_args
  7533 0000375B 39C1                    		cmp ecx,eax
  7534 0000375D 7E9B                    		jle pcmp_true
  7535 0000375F EBA0                    		jmp pcmp_false
  7536                                  
  7537                                  
  7538                                  ;; exch - exchange TOS with TOS-1
  7539                                  ;
  7540                                  ; group: stackbasic
  7541                                  ;
  7542                                  ; ( obj1 obj2 -- obj2 obj1 )
  7543                                  ;
  7544                                  ; example
  7545                                  ;   8
  7546                                  ;   /a exch def		% a = 8
  7547                                  ;
  7548                                  
  7549                                  		bits 32
  7550                                  
  7551                                  prim_exch:
  7552 00003761 B902000000              		mov ecx,2
  7553 00003766 E837E1FFFF              		call rot_pstack_up
  7554 0000376B 66BD0300                		mov bp,pserr_pstack_underflow
  7555 0000376F C3                      		ret
  7556                                  
  7557                                  
  7558                                  ;; rot - rotate TOS, TOS-1, TOS-2
  7559                                  ;
  7560                                  ; group: stackbasic
  7561                                  ;
  7562                                  ; ( obj1 obj2 obj3 -- obj2 obj3 obj1 )
  7563                                  ;
  7564                                  ; example
  7565                                  ;   /a 4 array def
  7566                                  ;   8
  7567                                  ;   a 1 rot put		% a[1] = 8
  7568                                  ;
  7569                                  
  7570                                  		bits 32
  7571                                  
  7572                                  prim_rot:
  7573 00003770 B903000000              		mov ecx,3
  7574 00003775 E828E1FFFF              		call rot_pstack_up
  7575 0000377A 66BD0300                		mov bp,pserr_pstack_underflow
  7576 0000377E C3                      		ret
  7577                                  
  7578                                  
  7579                                  ;; roll - rotate stack elements
  7580                                  ;
  7581                                  ; group: stackbasic
  7582                                  ;
  7583                                  ; ( obj1 ... objN int1 int2 -- objX ... objY )
  7584                                  ;
  7585                                  ; int1: number of elements to rotate
  7586                                  ; int2: amount
  7587                                  ; objX: X = (1 - int2) mod int1
  7588                                  ; objY: Y = (N - int2) mod int1
  7589                                  ;
  7590                                  ; example
  7591                                  ;   /rot { 3 -1 roll } def
  7592                                  ;  1 2 3 4 5 5 2 roll		% leaves: 4 5 1 2 3
  7593                                  ;
  7594                                  
  7595                                  		bits 32
  7596                                  
  7597                                  prim_roll:
  7598 0000377F 66BA0101                		mov dx,t_int + (t_int << 8)
  7599 00003783 E858F9FFFF              		call get_2args
  7600 00003788 7242                    		jc prim_roll_90
  7601 0000378A 09C9                    		or ecx,ecx
  7602 0000378C 743E                    		jz prim_roll_90
  7603 0000378E 8B15[C4000000]          		mov edx,[pstack.ptr]
  7604 00003794 83EA02                  		sub edx,2
  7605 00003797 39CA                    		cmp edx,ecx
  7606 00003799 66BD0300                		mov bp,pserr_pstack_underflow
  7607 0000379D 722D                    		jc prim_roll_90
  7608 0000379F 99                      		cdq
  7609 000037A0 F7F9                    		idiv ecx
  7610 000037A2 832D[C4000000]02        		sub dword [pstack.ptr],2
  7611 000037A9 09D2                    		or edx,edx
  7612 000037AB 741F                    		jz prim_roll_90
  7613 000037AD 780E                    		js prim_roll_50
  7614                                  prim_roll_40:
  7615 000037AF 52                      		push edx
  7616 000037B0 51                      		push ecx
  7617 000037B1 E829E1FFFF              		call rot_pstack_down
  7618 000037B6 59                      		pop ecx
  7619 000037B7 5A                      		pop edx
  7620 000037B8 4A                      		dec edx
  7621 000037B9 75F4                    		jnz prim_roll_40
  7622 000037BB EB0F                    		jmp prim_roll_90
  7623                                  prim_roll_50:
  7624 000037BD F7DA                    		neg edx
  7625                                  prim_roll_60:
  7626 000037BF 52                      		push edx
  7627 000037C0 51                      		push ecx
  7628 000037C1 E8DCE0FFFF              		call rot_pstack_up
  7629 000037C6 59                      		pop ecx
  7630 000037C7 5A                      		pop edx
  7631 000037C8 4A                      		dec edx
  7632 000037C9 75F4                    		jnz prim_roll_60
  7633 000037CB F8                      		clc
  7634                                  prim_roll_90:
  7635 000037CC C3                      		ret
  7636                                  
  7637                                  
  7638                                  ;; dtrace - single step with debug window
  7639                                  ;
  7640                                  ; group: debug
  7641                                  ;
  7642                                  ; ( -- )
  7643                                  ;
  7644                                  ; Turn on @trace mode and show debug info in upper left screen corner.
  7645                                  ;
  7646                                  
  7647                                  		bits 32
  7648                                  
  7649                                  prim_dtrace:
  7650 000037CD C605[A00B0000]01        		mov byte [single_step],1
  7651 000037D4 C605[A10B0000]01        		mov byte [show_debug_info],1
  7652 000037DB FE05[A20B0000]          		inc byte [dtrace_count]
  7653 000037E1 C3                      		ret
  7654                                  
  7655                                  
  7656                                  ;; trace - single step
  7657                                  ;
  7658                                  ; group: debug
  7659                                  ;
  7660                                  ; ( -- )
  7661                                  ;
  7662                                  ; Enter single step mode. Waits for a keypress after every instruction. 
  7663                                  ; Tab sets a temporary breakpoint after the current instruction and
  7664                                  ; continues until it reaches it. Leave this mode by pressing Esc.
  7665                                  ;
  7666                                  
  7667                                  		bits 32
  7668                                  
  7669                                  prim_trace:
  7670 000037E2 C605[A00B0000]01        		mov byte [single_step],1
  7671 000037E9 C605[A10B0000]00        		mov byte [show_debug_info],0
  7672 000037F0 C3                      		ret
  7673                                  
  7674                                  
  7675                                  ;; return - leave current function
  7676                                  ;
  7677                                  ; group: control
  7678                                  ;
  7679                                  ; ( -- )
  7680                                  ;
  7681                                  ; example
  7682                                  ;   /x {		% expects key on TOS
  7683                                  ;     dup 'a' eq { pop do_a return } if
  7684                                  ;     dup 'b' eq { pop do_b return } if
  7685                                  ;     dup 'c' eq { pop do_c return } if
  7686                                  ;     pop
  7687                                  ;   } def
  7688                                  ; 
  7689                                  
  7690                                  		bits 32
  7691                                  
  7692                                  prim_return:
  7693 000037F1 31C9                    		xor ecx,ecx
  7694                                  prim_return_10:
  7695 000037F3 51                      		push ecx
  7696 000037F4 E8C4E1FFFF              		call get_rstack_tos
  7697 000037F9 59                      		pop ecx
  7698 000037FA 66BD0500                		mov bp,pserr_rstack_underflow
  7699 000037FE 7211                    		jc prim_return_90
  7700 00003800 41                      		inc ecx
  7701 00003801 80FA05                  		cmp dl,t_code
  7702 00003804 75ED                    		jnz prim_return_10		; skip if, loop, repeat, for, forall
  7703                                  
  7704 00003806 290D[D0000000]          		sub [rstack.ptr],ecx
  7705 0000380C A3[8A000000]            		mov [pscode_next_instr],eax
  7706                                  prim_return_90:
  7707 00003811 C3                      		ret
  7708                                  
  7709                                  
  7710                                  ;; exit - leave loop/repeat/for/forall loop.
  7711                                  ;
  7712                                  ; group: control
  7713                                  ;
  7714                                  ; ( -- )
  7715                                  ;
  7716                                  ; example
  7717                                  ;
  7718                                  ;  0 1 100 { 56 eq { exit } if } for	% leave if counter == 56
  7719                                  ;
  7720                                  
  7721                                  		bits 32
  7722                                  
  7723                                  prim_exit:
  7724 00003812 31C9                    		xor ecx,ecx
  7725                                  prim_exit_10:
  7726 00003814 51                      		push ecx
  7727 00003815 E8A3E1FFFF              		call get_rstack_tos
  7728 0000381A 59                      		pop ecx
  7729 0000381B 66BD0500                		mov bp,pserr_rstack_underflow
  7730 0000381F 723A                    		jc prim_exit_90
  7731 00003821 41                      		inc ecx
  7732 00003822 80FA25                  		cmp dl,t_loop			; loop
  7733 00003825 7412                    		jz prim_exit_60
  7734 00003827 80FA35                  		cmp dl,t_repeat			; repeat
  7735 0000382A 740C                    		jz prim_exit_40
  7736 0000382C 80FA45                  		cmp dl,t_for			; for
  7737 0000382F 7405                    		jz prim_exit_30
  7738 00003831 80FA55                  		cmp dl,t_forall			; forall
  7739 00003834 75DE                    		jnz prim_exit_10
  7740                                  prim_exit_30:
  7741 00003836 41                      		inc ecx
  7742 00003837 41                      		inc ecx
  7743                                  prim_exit_40:
  7744 00003838 41                      		inc ecx
  7745                                  prim_exit_60:
  7746 00003839 51                      		push ecx
  7747 0000383A E87EE1FFFF              		call get_rstack_tos
  7748 0000383F 59                      		pop ecx
  7749 00003840 80FA05                  		cmp dl,t_code
  7750 00003843 740A                    		jz prim_exit_80
  7751 00003845 80FA65                  		cmp dl,t_exit
  7752 00003848 66BD0A00                		mov bp,pserr_invalid_rstack_entry
  7753 0000384C F9                      		stc
  7754 0000384D 750C                    		jnz prim_exit_90
  7755                                  
  7756                                  prim_exit_80:
  7757 0000384F 41                      		inc ecx
  7758 00003850 290D[D0000000]          		sub [rstack.ptr],ecx
  7759 00003856 A3[8A000000]            		mov [pscode_next_instr],eax
  7760                                  prim_exit_90:
  7761 0000385B C3                      		ret
  7762                                  
  7763                                  ;; loop - endless loop
  7764                                  ;
  7765                                  ; group: control
  7766                                  ;
  7767                                  ; ( code1 -- )
  7768                                  ;
  7769                                  ; example
  7770                                  ;
  7771                                  ;     /x 0 def { /x x 1 add def x 56 eq { exit } if } loop	% loop until x == 56
  7772                                  ;
  7773                                  
  7774                                  		bits 32
  7775                                  
  7776                                  prim_loop:
  7777 0000385C 31C9                    		xor ecx,ecx
  7778 0000385E E8F6E0FFFF              		call get_pstack_tos
  7779 00003863 80FA05                  		cmp dl,t_code
  7780 00003866 66BD0800                		mov bp,pserr_wrong_arg_types
  7781 0000386A F9                      		stc
  7782 0000386B 7542                    		jnz prim_loop_90
  7783                                  
  7784 0000386D FF0D[C4000000]          		dec dword [pstack.ptr]
  7785                                  
  7786                                  		; branch
  7787 00003873 8705[8A000000]          		xchg eax,[pscode_next_instr]
  7788                                  
  7789 00003879 8B0D[CC000000]          		mov ecx,[rstack.size]
  7790 0000387F 2B0D[D0000000]          		sub ecx,[rstack.ptr]
  7791 00003885 83F903                  		cmp ecx,3
  7792 00003888 66BD0600                		mov bp,pserr_rstack_overflow
  7793 0000388C 7221                    		jb prim_loop_90
  7794 0000388E 8305[D0000000]02        		add dword [rstack.ptr],2
  7795                                  
  7796 00003895 B265                    		mov dl,t_exit
  7797 00003897 B901000000              		mov ecx,1
  7798 0000389C E831E1FFFF              		call set_rstack_tos
  7799 000038A1 31C9                    		xor ecx,ecx
  7800 000038A3 B225                    		mov dl,t_loop			; mark as 'loop' block
  7801 000038A5 A1[8A000000]            		mov eax,[pscode_next_instr]
  7802 000038AA E823E1FFFF              		call set_rstack_tos
  7803                                  prim_loop_90:
  7804 000038AF C3                      		ret
  7805                                  
  7806                                  
  7807                                  ;; repeat - repeat code
  7808                                  ;
  7809                                  ; group: control
  7810                                  ;
  7811                                  ; ( int1 code1 -- )
  7812                                  ;
  7813                                  ; Repeat code1 int1 times.
  7814                                  ;
  7815                                  ; example
  7816                                  ;   3 { "X" show } repeat	% print "XXX"
  7817                                  ;
  7818                                  
  7819                                  		bits 32
  7820                                  
  7821                                  prim_repeat:
  7822 000038B0 66BA0501                		mov dx,t_code + (t_int << 8)
  7823 000038B4 E827F8FFFF              		call get_2args
  7824 000038B9 725D                    		jc prim_repeat_90
  7825                                  
  7826 000038BB 832D[C4000000]02        		sub dword [pstack.ptr],2
  7827                                  
  7828 000038C2 09C9                    		or ecx,ecx
  7829 000038C4 7452                    		jz prim_repeat_90
  7830                                  
  7831 000038C6 66BD0B00                		mov bp,pserr_invalid_range
  7832 000038CA F9                      		stc
  7833 000038CB 784B                    		js prim_repeat_90
  7834                                  
  7835                                  		; branch
  7836 000038CD 8705[8A000000]          		xchg eax,[pscode_next_instr]
  7837                                  
  7838 000038D3 8B15[CC000000]          		mov edx,[rstack.size]
  7839 000038D9 2B15[D0000000]          		sub edx,[rstack.ptr]
  7840 000038DF 83FA04                  		cmp edx,4
  7841 000038E2 66BD0600                		mov bp,pserr_rstack_overflow
  7842 000038E6 7230                    		jb prim_repeat_90
  7843 000038E8 8305[D0000000]03        		add dword [rstack.ptr],3
  7844                                  
  7845 000038EF 50                      		push eax
  7846 000038F0 91                      		xchg eax,ecx
  7847 000038F1 B201                    		mov dl,t_int
  7848 000038F3 B901000000              		mov ecx,1
  7849 000038F8 E8D5E0FFFF              		call set_rstack_tos
  7850 000038FD 58                      		pop eax
  7851 000038FE B902000000              		mov ecx,2
  7852 00003903 B265                    		mov dl,t_exit
  7853 00003905 E8C8E0FFFF              		call set_rstack_tos
  7854 0000390A 31C9                    		xor ecx,ecx
  7855 0000390C B235                    		mov dl,t_repeat			; mark as 'repeat' block
  7856 0000390E A1[8A000000]            		mov eax,[pscode_next_instr]
  7857 00003913 E8BAE0FFFF              		call set_rstack_tos
  7858                                  prim_repeat_90:
  7859 00003918 C3                      		ret
  7860                                  
  7861                                  
  7862                                  ;; for -- typical 'for' loop
  7863                                  ;
  7864                                  ; group: control
  7865                                  ;
  7866                                  ; ( int1 int2 int3 code1 -- )
  7867                                  ;
  7868                                  ; int1: start value
  7869                                  ; int2: step size
  7870                                  ; int3: final value (inclusive)
  7871                                  ;
  7872                                  ; Run code1 and put the current counter value onto the stack for every iteration.
  7873                                  ;
  7874                                  ; example
  7875                                  ;  0 1 4 { } for 	% leave 0 1 2 3 4 on the stack
  7876                                  ;
  7877                                  
  7878                                  		bits 32
  7879                                  
  7880                                  prim_for:
  7881 00003919 66BD0300                		mov bp,pserr_pstack_underflow
  7882 0000391D 833D[C4000000]04        		cmp dword [pstack.ptr],4
  7883 00003924 0F82AC000000            		jc prim_for_90
  7884 0000392A B903000000              		mov ecx,3
  7885 0000392F E825E0FFFF              		call get_pstack_tos
  7886 00003934 80FA01                  		cmp dl,t_int
  7887 00003937 F9                      		stc
  7888 00003938 66BD0800                		mov bp,pserr_wrong_arg_types
  7889 0000393C 0F8594000000            		jnz prim_for_90
  7890 00003942 B902000000              		mov ecx,2
  7891 00003947 55                      		push ebp
  7892 00003948 50                      		push eax
  7893 00003949 E80BE0FFFF              		call get_pstack_tos
  7894 0000394E 5F                      		pop edi
  7895 0000394F 5D                      		pop ebp
  7896 00003950 80FA01                  		cmp dl,t_int
  7897 00003953 F9                      		stc
  7898 00003954 0F857C000000            		jnz prim_for_90
  7899                                  
  7900 0000395A 66BA0501                		mov dx,t_code + (t_int << 8)
  7901 0000395E 50                      		push eax
  7902 0000395F 57                      		push edi
  7903 00003960 E87BF7FFFF              		call get_2args
  7904 00003965 5F                      		pop edi
  7905 00003966 5E                      		pop esi
  7906 00003967 726D                    		jc prim_for_90
  7907                                  
  7908                                  		; don't remove start value!
  7909 00003969 832D[C4000000]03        		sub dword [pstack.ptr],3
  7910                                  
  7911                                  		; branch
  7912 00003970 8705[8A000000]          		xchg eax,[pscode_next_instr]
  7913                                  
  7914 00003976 8B15[CC000000]          		mov edx,[rstack.size]
  7915 0000397C 2B15[D0000000]          		sub edx,[rstack.ptr]
  7916 00003982 83FA06                  		cmp edx,6
  7917 00003985 66BD0600                		mov bp,pserr_rstack_overflow
  7918 00003989 724B                    		jb prim_for_90
  7919 0000398B 8305[D0000000]05        		add dword [rstack.ptr],5
  7920                                  
  7921 00003992 51                      		push ecx
  7922 00003993 56                      		push esi
  7923 00003994 57                      		push edi
  7924                                  
  7925 00003995 B265                    		mov dl,t_exit
  7926 00003997 B904000000              		mov ecx,4
  7927 0000399C E831E0FFFF              		call set_rstack_tos
  7928                                  
  7929 000039A1 58                      		pop eax
  7930 000039A2 B201                    		mov dl,t_int
  7931 000039A4 B903000000              		mov ecx,3
  7932 000039A9 E824E0FFFF              		call set_rstack_tos
  7933                                  
  7934 000039AE 58                      		pop eax
  7935 000039AF B201                    		mov dl,t_int
  7936 000039B1 B902000000              		mov ecx,2
  7937 000039B6 E817E0FFFF              		call set_rstack_tos
  7938                                  
  7939 000039BB 58                      		pop eax
  7940 000039BC B201                    		mov dl,t_int
  7941 000039BE B901000000              		mov ecx,1
  7942 000039C3 E80AE0FFFF              		call set_rstack_tos
  7943                                  
  7944 000039C8 31C9                    		xor ecx,ecx
  7945 000039CA B245                    		mov dl,t_for			; mark as 'for' block
  7946 000039CC A1[8A000000]            		mov eax,[pscode_next_instr]
  7947 000039D1 E8FCDFFFFF              		call set_rstack_tos
  7948                                  prim_for_90:
  7949 000039D6 C3                      		ret
  7950                                  
  7951                                  
  7952                                  ;; forall - loop over all array elements
  7953                                  ;
  7954                                  ; group: control
  7955                                  ;
  7956                                  ; ( array1 code 1 -- )
  7957                                  ; ( str1 code 1 -- )
  7958                                  ; ( ptr1 code 1 -- )
  7959                                  ;
  7960                                  ; Run code1 for every element of array1, str1 or ptr1 putting each element
  7961                                  ; on the stack in turn.
  7962                                  ;
  7963                                  ; Note: str1 is treated as a sequence of bytes, not utf8 chars.
  7964                                  ;
  7965                                  ; example
  7966                                  ;  [ 1 2 3 ] { } forall		% leave 1 2 3 on the stack
  7967                                  ;
  7968                                  
  7969                                  		bits 32
  7970                                  
  7971                                  prim_forall:
  7972 000039D7 66BA050A                		mov dx,t_code + (t_array << 8)
  7973 000039DB E800F7FFFF              		call get_2args
  7974 000039E0 732B                    		jnc prim_forall_30
  7975 000039E2 80FA05                  		cmp dl,t_code
  7976 000039E5 F9                      		stc
  7977 000039E6 0F85C5000000            		jnz prim_forall_90
  7978 000039EC 80FE04                  		cmp dh,t_string
  7979 000039EF 741C                    		jz prim_forall_30
  7980 000039F1 80FE0C                  		cmp dh,t_ptr
  7981 000039F4 7417                    		jz prim_forall_30
  7982 000039F6 80FE00                  		cmp dh,t_none
  7983 000039F9 F9                      		stc
  7984 000039FA 0F85B1000000            		jnz prim_forall_90
  7985                                  
  7986                                  		; nothing to do
  7987                                  prim_forall_20:
  7988 00003A00 832D[C4000000]02        		sub dword [pstack.ptr],2
  7989 00003A07 F8                      		clc
  7990 00003A08 E9A4000000              		jmp prim_forall_90
  7991                                  
  7992                                  prim_forall_30:
  7993 00003A0D 50                      		push eax			; code
  7994 00003A0E 51                      		push ecx			; string/array
  7995 00003A0F 86D6                    		xchg dl,dh
  7996 00003A11 6652                    		push dx
  7997 00003A13 91                      		xchg eax,ecx
  7998 00003A14 E8E5150000              		call get_length
  7999 00003A19 665A                    		pop dx
  8000 00003A1B 59                      		pop ecx
  8001 00003A1C 5B                      		pop ebx
  8002                                  
  8003 00003A1D 66BD0B00                		mov bp,pserr_invalid_range
  8004 00003A21 0F828A000000            		jc prim_forall_90
  8005                                  
  8006 00003A27 09C0                    		or eax,eax			; length == 0
  8007 00003A29 74D5                    		jz prim_forall_20
  8008                                  
  8009 00003A2B 832D[C4000000]02        		sub dword [pstack.ptr],2
  8010                                  
  8011                                  		; branch
  8012 00003A32 871D[8A000000]          		xchg ebx,[pscode_next_instr]
  8013                                  
  8014 00003A38 8B35[CC000000]          		mov esi,[rstack.size]
  8015 00003A3E 2B35[D0000000]          		sub esi,[rstack.ptr]
  8016 00003A44 83FE06                  		cmp esi,6
  8017 00003A47 66BD0600                		mov bp,pserr_rstack_overflow
  8018 00003A4B 7264                    		jb prim_forall_90
  8019 00003A4D 8305[D0000000]05        		add dword [rstack.ptr],5
  8020                                  
  8021 00003A54 51                      		push ecx
  8022 00003A55 52                      		push edx
  8023 00003A56 50                      		push eax
  8024                                  
  8025 00003A57 B265                    		mov dl,t_exit
  8026 00003A59 93                      		xchg eax,ebx
  8027 00003A5A B904000000              		mov ecx,4
  8028 00003A5F E86EDFFFFF              		call set_rstack_tos		; code
  8029                                  
  8030 00003A64 58                      		pop eax
  8031 00003A65 B201                    		mov dl,t_int
  8032 00003A67 B902000000              		mov ecx,2
  8033 00003A6C E861DFFFFF              		call set_rstack_tos		; length
  8034                                  
  8035 00003A71 5A                      		pop edx
  8036 00003A72 58                      		pop eax
  8037 00003A73 50                      		push eax
  8038 00003A74 52                      		push edx
  8039 00003A75 B903000000              		mov ecx,3
  8040 00003A7A E853DFFFFF              		call set_rstack_tos		; string/array
  8041                                  
  8042 00003A7F 31C0                    		xor eax,eax
  8043 00003A81 B201                    		mov dl,t_int
  8044 00003A83 B901000000              		mov ecx,1
  8045 00003A88 E845DFFFFF              		call set_rstack_tos		; count
  8046                                  
  8047 00003A8D 31C9                    		xor ecx,ecx
  8048 00003A8F B255                    		mov dl,t_forall			; mark as 'forall' block
  8049 00003A91 A1[8A000000]            		mov eax,[pscode_next_instr]
  8050 00003A96 E837DFFFFF              		call set_rstack_tos
  8051                                  
  8052 00003A9B 5A                      		pop edx
  8053 00003A9C 59                      		pop ecx
  8054 00003A9D 86D6                    		xchg dl,dh
  8055 00003A9F 31C0                    		xor eax,eax
  8056 00003AA1 E87DF6FFFF              		call p_get
  8057 00003AA6 66BD0B00                		mov bp,pserr_invalid_range
  8058 00003AAA 7205                    		jc prim_forall_90
  8059                                  
  8060 00003AAC E9F9140000              		jmp pr_getobj
  8061                                  prim_forall_90:
  8062 00003AB1 C3                      		ret
  8063                                  
  8064                                  
  8065                                  ;; gettype - get object type
  8066                                  ;
  8067                                  ; group: arg
  8068                                  ;
  8069                                  ; ( obj1 -- int1 )
  8070                                  ;
  8071                                  ; Returns the object type.
  8072                                  ;
  8073                                  ; example
  8074                                  ;   "abc" gettype	% 4 (= string)
  8075                                  ;
  8076                                  
  8077                                  		bits 32
  8078                                  
  8079                                  prim_gettype:
  8080 00003AB2 B200                    		mov dl,t_none
  8081 00003AB4 E800F6FFFF              		call get_1arg
  8082 00003AB9 720C                    		jc prim_gettype_90
  8083 00003ABB 0FB6C2                  		movzx eax,dl
  8084 00003ABE B201                    		mov dl,t_int
  8085 00003AC0 31C9                    		xor ecx,ecx
  8086 00003AC2 E8A7DEFFFF              		call set_pstack_tos
  8087                                  prim_gettype_90:
  8088 00003AC7 C3                      		ret
  8089                                  
  8090                                  
  8091                                  ;; settype - set object type
  8092                                  ;
  8093                                  ; group: arg
  8094                                  ;
  8095                                  ; ( obj1 int1 -- obj2 )
  8096                                  ;
  8097                                  ; obj2: obj1 with type changed to int1.
  8098                                  ; 
  8099                                  ; example
  8100                                  ;						% PS-like 'string' function
  8101                                  ;   /string { 1 add malloc 4 settype } def	% 4 = string type
  8102                                  ;   10 string					% new empty string of length 10
  8103                                  ;
  8104                                  
  8105                                  		bits 32
  8106                                  
  8107                                  prim_settype:
  8108 00003AC8 66BA0100                		mov dx,t_int + (t_none << 8)
  8109 00003ACC E80FF6FFFF              		call get_2args
  8110 00003AD1 7212                    		jc prim_settype_90
  8111 00003AD3 88C2                    		mov dl,al
  8112 00003AD5 240F                    		and al,15
  8113 00003AD7 91                      		xchg eax,ecx
  8114 00003AD8 FF0D[C4000000]          		dec dword [pstack.ptr]
  8115 00003ADE 31C9                    		xor ecx,ecx
  8116 00003AE0 E889DEFFFF              		call set_pstack_tos
  8117                                  prim_settype_90:
  8118 00003AE5 C3                      		ret
  8119                                  
  8120                                  
  8121                                  ;; screen.size - screen size in pixel
  8122                                  ;
  8123                                  ; group: gfx.screen
  8124                                  ;
  8125                                  ; ( -- int1 int2 )
  8126                                  ;
  8127                                  ; int1, int2: width, height
  8128                                  ;
  8129                                  ; example
  8130                                  ;
  8131                                  ; blue setcolor
  8132                                  ; 0 0 moveto screen.size fillrect	% draw blue screen
  8133                                  ;
  8134                                  
  8135                                  		bits 32
  8136                                  
  8137                                  prim_screensize:
  8138 00003AE6 A1[C4000000]            		mov eax,[pstack.ptr]
  8139 00003AEB 40                      		inc eax
  8140 00003AEC 40                      		inc eax
  8141 00003AED 3905[C0000000]          		cmp [pstack.size],eax
  8142 00003AF3 66BD0400                		mov bp,pserr_pstack_overflow
  8143 00003AF7 7228                    		jb prim_screensize_90
  8144 00003AF9 A3[C4000000]            		mov [pstack.ptr],eax
  8145 00003AFE B201                    		mov dl,t_int
  8146 00003B00 0FB705[E5000000]        		movzx eax,word [screen_width]
  8147 00003B07 B901000000              		mov ecx,1
  8148 00003B0C E85DDEFFFF              		call set_pstack_tos
  8149 00003B11 B201                    		mov dl,t_int
  8150 00003B13 0FB705[E7000000]        		movzx eax,word [screen_height]
  8151 00003B1A 31C9                    		xor ecx,ecx
  8152 00003B1C E84DDEFFFF              		call set_pstack_tos
  8153                                  prim_screensize_90:
  8154 00003B21 C3                      		ret
  8155                                  
  8156                                  
  8157                                  ;; vscreen.size - virtual screen size
  8158                                  ;
  8159                                  ; group: gfx.screen
  8160                                  ;
  8161                                  ; ( -- int1 int2 )
  8162                                  ;
  8163                                  ; int1, int2: virtual width and height
  8164                                  ;
  8165                                  ; You normally can expect the virtual height to be larger than the visible height returned by
  8166                                  ; @screen.size. That area is available e.g. for hidden drawing. Some kind of
  8167                                  ; scrolling is not implemented, however.
  8168                                  ;
  8169                                  
  8170                                  		bits 32
  8171                                  
  8172                                  prim_vscreensize:
  8173 00003B22 A1[C4000000]            		mov eax,[pstack.ptr]
  8174 00003B27 40                      		inc eax
  8175 00003B28 40                      		inc eax
  8176 00003B29 3905[C0000000]          		cmp [pstack.size],eax
  8177 00003B2F 66BD0400                		mov bp,pserr_pstack_overflow
  8178 00003B33 7228                    		jb prim_vscreensize_90
  8179 00003B35 A3[C4000000]            		mov [pstack.ptr],eax
  8180 00003B3A B201                    		mov dl,t_int
  8181 00003B3C 0FB705[E5000000]        		movzx eax,word [screen_width]
  8182 00003B43 B901000000              		mov ecx,1
  8183 00003B48 E821DEFFFF              		call set_pstack_tos
  8184 00003B4D B201                    		mov dl,t_int
  8185 00003B4F 0FB705[E9000000]        		movzx eax,word [screen_vheight]
  8186 00003B56 31C9                    		xor ecx,ecx
  8187 00003B58 E811DEFFFF              		call set_pstack_tos
  8188                                  prim_vscreensize_90:
  8189 00003B5D C3                      		ret
  8190                                  
  8191                                  
  8192                                  ;; monitorsize - monitor size
  8193                                  ;
  8194                                  ; group: gfx.screen
  8195                                  ;
  8196                                  ; ( -- int1 int2 )
  8197                                  ;
  8198                                  ; int1, int2: width and height
  8199                                  ;
  8200                                  
  8201                                  		bits 32
  8202                                  
  8203                                  prim_monitorsize:
  8204 00003B5E A1[C4000000]            		mov eax,[pstack.ptr]
  8205 00003B63 40                      		inc eax
  8206 00003B64 40                      		inc eax
  8207 00003B65 3905[C0000000]          		cmp [pstack.size],eax
  8208 00003B6B 66BD0400                		mov bp,pserr_pstack_overflow
  8209 00003B6F 7237                    		jb prim_monitorsize_90
  8210 00003B71 A3[C4000000]            		mov [pstack.ptr],eax
  8211                                  
  8212 00003B76 66833D[F2090000]00      		cmp word [display_res_pref],0
  8213 00003B7E 7505                    		jnz prim_monitorsize_50
  8214                                  
  8215 00003B80 E8563D0000              		call read_ddc
  8216                                  
  8217                                  prim_monitorsize_50:
  8218                                  
  8219 00003B85 B201                    		mov dl,t_int
  8220 00003B87 0FB705[F2090000]        		movzx eax,word [display_res_pref]
  8221 00003B8E B901000000              		mov ecx,1
  8222 00003B93 E8D6DDFFFF              		call set_pstack_tos
  8223 00003B98 B201                    		mov dl,t_int
  8224 00003B9A 0FB705[F4090000]        		movzx eax,word [display_res_pref + 2]
  8225 00003BA1 31C9                    		xor ecx,ecx
  8226 00003BA3 E8C6DDFFFF              		call set_pstack_tos
  8227                                  prim_monitorsize_90:
  8228 00003BA8 C3                      		ret
  8229                                  
  8230                                  
  8231                                  ;; displaysizes - supported display sizes
  8232                                  ;
  8233                                  ; group: gfx.screen
  8234                                  ;
  8235                                  ; ( -- int1 int2 )
  8236                                  ;
  8237                                  ; int1, int2: width and height
  8238                                  ;
  8239                                  
  8240                                  		bits 32
  8241                                  
  8242                                  prim_displaysizes:
  8243 00003BA9 66833D[F2090000]00      		cmp word [display_res_pref],0
  8244 00003BB1 7505                    		jnz prim_displaysizes_20
  8245 00003BB3 E8233D0000              		call read_ddc
  8246                                  prim_displaysizes_20:
  8247 00003BB8 31DB                    		xor ebx,ebx
  8248                                  prim_displaysizes_40:
  8249 00003BBA 43                      		inc ebx
  8250 00003BBB 663B1D[B0090000]        		cmp bx,[display_res.cnt]
  8251 00003BC2 7743                    		ja prim_displaysizes_90
  8252                                  
  8253 00003BC4 A1[C4000000]            		mov eax,[pstack.ptr]
  8254 00003BC9 40                      		inc eax
  8255 00003BCA 40                      		inc eax
  8256 00003BCB 3905[C0000000]          		cmp [pstack.size],eax
  8257 00003BD1 66BD0400                		mov bp,pserr_pstack_overflow
  8258 00003BD5 7230                    		jb prim_displaysizes_90
  8259 00003BD7 A3[C4000000]            		mov [pstack.ptr],eax
  8260                                  
  8261 00003BDC B201                    		mov dl,t_int
  8262 00003BDE 0FB7049D[AE090000]      		movzx eax,word [display_res - 4 + 4*ebx]
  8263 00003BE6 B901000000              		mov ecx,1
  8264 00003BEB 53                      		push ebx
  8265 00003BEC E87DDDFFFF              		call set_pstack_tos
  8266 00003BF1 5B                      		pop ebx
  8267 00003BF2 B201                    		mov dl,t_int
  8268 00003BF4 0FB7049D[B0090000]      		movzx eax,word [display_res + 2 - 4 + 4*ebx]
  8269 00003BFC 31C9                    		xor ecx,ecx
  8270 00003BFE 53                      		push ebx
  8271 00003BFF E86ADDFFFF              		call set_pstack_tos
  8272 00003C04 5B                      		pop ebx
  8273 00003C05 EBB3                    		jmp prim_displaysizes_40
  8274                                  prim_displaysizes_90:
  8275 00003C07 C3                      		ret
  8276                                  
  8277                                  
  8278                                  ;; image.size - graphics image size
  8279                                  ;
  8280                                  ; group: image
  8281                                  ;
  8282                                  ; ( -- int1 int2 )
  8283                                  ;
  8284                                  ; int1, int2: image width and height. The image is specified with @setimage.
  8285                                  ; 
  8286                                  ; example
  8287                                  ;
  8288                                  ;  image.size screen.size
  8289                                  ;  exch 4 -1 roll sub 2 div 3 1 roll exch sub 2 div	% center image
  8290                                  ;  moveto 0 0 image.size image				% draw it
  8291                                  ;
  8292                                  
  8293                                  		bits 32
  8294                                  
  8295                                  prim_imagesize:
  8296 00003C08 A1[C4000000]            		mov eax,[pstack.ptr]
  8297 00003C0D 40                      		inc eax
  8298 00003C0E 40                      		inc eax
  8299 00003C0F 3905[C0000000]          		cmp [pstack.size],eax
  8300 00003C15 66BD0400                		mov bp,pserr_pstack_overflow
  8301 00003C19 7228                    		jb prim_imagesize_90
  8302 00003C1B A3[C4000000]            		mov [pstack.ptr],eax
  8303 00003C20 B201                    		mov dl,t_int
  8304 00003C22 0FB705[D8000000]        		movzx eax,word [image_width]
  8305 00003C29 B901000000              		mov ecx,1
  8306 00003C2E E83BDDFFFF              		call set_pstack_tos
  8307 00003C33 B201                    		mov dl,t_int
  8308 00003C35 0FB705[DA000000]        		movzx eax,word [image_height]
  8309 00003C3C 31C9                    		xor ecx,ecx
  8310 00003C3E E82BDDFFFF              		call set_pstack_tos
  8311                                  prim_imagesize_90:
  8312 00003C43 C3                      		ret
  8313                                  
  8314                                  
  8315                                  
  8316                                  ;; image.colors - image palette entries
  8317                                  ;
  8318                                  ; group: image
  8319                                  ;
  8320                                  ; ( -- int1 )
  8321                                  ;
  8322                                  ; int1: number of colors in 8-bit PCX image.
  8323                                  ;
  8324                                  ; 8-bit modes use a color palette. An image uses the first @image.colors
  8325                                  ; entries. If you want to define your own colors, use @image.colors to get
  8326                                  ; the first free palette entry. For 16/32-bit modes, 0 is returned.
  8327                                  ;
  8328                                  
  8329                                  		bits 32
  8330                                  
  8331                                  prim_imagecolors:
  8332 00003C44 31C0                    		xor eax,eax
  8333 00003C46 803D[DC000000]01        		cmp byte [image_type],1
  8334 00003C4D 7506                    		jnz prim_imagecolors_90
  8335 00003C4F 66A1[65010000]          		mov ax,[pals]
  8336                                  prim_imagecolors_90:
  8337 00003C55 E94E130000              		jmp pr_getint
  8338                                  
  8339                                  
  8340                                  ;; setcolor - set active drawing color
  8341                                  ;
  8342                                  ; group: draw
  8343                                  ;
  8344                                  ; ( int1 -- )
  8345                                  ;
  8346                                  ; int1: palette index (8-bit mode) or 24-bit RGB-value (16/32-bit modes).
  8347                                  ;
  8348                                  ; example
  8349                                  ;  0xff0000 setcolor	% continue in red...
  8350                                  ;  0xff00 setcolor	% or green...
  8351                                  ;  0xff setcolor	% or blue
  8352                                  ;
  8353                                  
  8354                                  		bits 32
  8355                                  
  8356                                  prim_setcolor:
  8357 00003C5A E884130000              		call pr_setint
  8358 00003C5F A3[B8010000]            		mov [gfx_color_rgb],eax
  8359 00003C64 E8431D0000              		call encode_color
  8360 00003C69 A3[A8010000]            		mov [gfx_color0],eax
  8361 00003C6E E8331D0000              		call setcolor
  8362 00003C73 C3                      		ret
  8363                                  
  8364                                  
  8365                                  ;; currentcolor - current drawing color
  8366                                  ;
  8367                                  ; group: draw
  8368                                  ;
  8369                                  ; ( -- int1 )
  8370                                  ;
  8371                                  ; int1: palette index (8-bit mode) or 24-bit RGB-value (16/32-bit modes).
  8372                                  ;
  8373                                  ; example
  8374                                  ;   currentcolor not setcolor	% inverse color
  8375                                  ;
  8376                                  
  8377                                  		bits 32
  8378                                  
  8379                                  prim_currentcolor:
  8380 00003C74 A1[A8010000]            		mov eax,[gfx_color0]
  8381 00003C79 E8531D0000              		call decode_color
  8382 00003C7E E925130000              		jmp pr_getint
  8383                                  
  8384                                  
  8385                                  ;; settextmodecolor - set color to be used in text mode
  8386                                  ;
  8387                                  ; group: textmode
  8388                                  ; 
  8389                                  ; ( int1 -- )
  8390                                  ;
  8391                                  ; int1: text mode color
  8392                                  ;
  8393                                  ; Note: You only need this in case you're running in text mode (practically never).
  8394                                  ;
  8395                                  
  8396                                  		bits 32
  8397                                  
  8398                                  prim_settextmodecolor:
  8399 00003C83 E85B130000              		call pr_setint
  8400 00003C88 A2[E5010000]            		mov [textmode_color],al
  8401 00003C8D C3                      		ret
  8402                                  
  8403                                  
  8404                                  ;; moveto - set cursor position
  8405                                  ;
  8406                                  ; group: draw
  8407                                  ;
  8408                                  ; ( int1 int2 -- )
  8409                                  ;
  8410                                  ; int1, int2: x, y (upper left: 0, 0).
  8411                                  ;
  8412                                  ; example
  8413                                  ;   200 100 moveto "Hello" show		% print "Hello" at (200, 100)
  8414                                  ;
  8415                                  
  8416                                  		bits 32
  8417                                  
  8418                                  prim_moveto:
  8419 00003C8E 66BA0101                		mov dx,t_int + (t_int << 8)
  8420 00003C92 E849F4FFFF              		call get_2args
  8421 00003C97 7214                    		jc prim_moveto_90
  8422 00003C99 832D[C4000000]02        		sub dword [pstack.ptr],2
  8423 00003CA0 66890D[75010000]        		mov [gfx_cur_x],cx
  8424 00003CA7 66A3[77010000]          		mov [gfx_cur_y],ax
  8425                                  prim_moveto_90:
  8426 00003CAD C3                      		ret
  8427                                  
  8428                                  
  8429                                  ;; rmoveto - set relative cursor position
  8430                                  ;
  8431                                  ; group: draw
  8432                                  ;
  8433                                  ; ( int1 int2 -- )
  8434                                  ;
  8435                                  ; int1, int2: x-ofs, y-ofs.
  8436                                  ;
  8437                                  ; example
  8438                                  ;   200 100 moveto
  8439                                  ;   "Hello" show
  8440                                  ;   30 0 rmoveto "world!"	% "Hello    world!" (approx.)
  8441                                  ;
  8442                                  
  8443                                  		bits 32
  8444                                  
  8445                                  prim_rmoveto:
  8446 00003CAE 66BA0101                		mov dx,t_int + (t_int << 8)
  8447 00003CB2 E829F4FFFF              		call get_2args
  8448 00003CB7 7216                    		jc prim_rmoveto_90
  8449 00003CB9 832D[C4000000]02        		sub dword [pstack.ptr],2
  8450 00003CC0 66010D[75010000]        		add [gfx_cur_x],cx
  8451 00003CC7 660105[77010000]        		add [gfx_cur_y],ax
  8452 00003CCE F8                      		clc
  8453                                  prim_rmoveto_90:
  8454 00003CCF C3                      		ret
  8455                                  
  8456                                  
  8457                                  ;; currentpoint - current cursor position
  8458                                  ;
  8459                                  ; group: draw
  8460                                  ;
  8461                                  ; ( -- int1 int2 )
  8462                                  ;
  8463                                  ; int1, int2: x, y (upper left: 0, 0)
  8464                                  ;
  8465                                  
  8466                                  		bits 32
  8467                                  
  8468                                  prim_currentpoint:
  8469 00003CD0 A1[C4000000]            		mov eax,[pstack.ptr]
  8470 00003CD5 40                      		inc eax
  8471 00003CD6 40                      		inc eax
  8472 00003CD7 3905[C0000000]          		cmp [pstack.size],eax
  8473 00003CDD 66BD0400                		mov bp,pserr_pstack_overflow
  8474 00003CE1 7228                    		jb prim_currentpoint_90
  8475 00003CE3 A3[C4000000]            		mov [pstack.ptr],eax
  8476 00003CE8 B201                    		mov dl,t_int
  8477 00003CEA 0FB705[75010000]        		movzx eax,word [gfx_cur_x]
  8478 00003CF1 B901000000              		mov ecx,1
  8479 00003CF6 E873DCFFFF              		call set_pstack_tos
  8480 00003CFB B201                    		mov dl,t_int
  8481 00003CFD 0FB705[77010000]        		movzx eax,word [gfx_cur_y]
  8482 00003D04 31C9                    		xor ecx,ecx
  8483 00003D06 E863DCFFFF              		call set_pstack_tos
  8484                                  prim_currentpoint_90:
  8485 00003D0B C3                      		ret
  8486                                  
  8487                                  
  8488                                  ;; lineto - draw line
  8489                                  ;
  8490                                  ; group: draw
  8491                                  ;
  8492                                  ; ( int1 int2 -- )
  8493                                  ;
  8494                                  ; int1, int2: line end
  8495                                  ;
  8496                                  ; example
  8497                                  ;   0 0 moveto screen.size lineto	% draw diagonal
  8498                                  ;
  8499                                  
  8500                                  		bits 32
  8501                                  
  8502                                  prim_lineto:
  8503 00003D0C 66BA0101                		mov dx,t_int + (t_int << 8)
  8504 00003D10 E8CBF3FFFF              		call get_2args
  8505 00003D15 7241                    		jc prim_lineto_90
  8506                                  
  8507 00003D17 890D[93010000]          		mov [line_x1],ecx
  8508 00003D1D A3[97010000]            		mov [line_y1],eax
  8509 00003D22 6651                    		push cx
  8510 00003D24 6650                    		push ax
  8511 00003D26 0FBF05[75010000]        		movsx eax,word [gfx_cur_x]
  8512 00003D2D A3[8B010000]            		mov [line_x0],eax
  8513 00003D32 0FBF05[77010000]        		movsx eax,word [gfx_cur_y]
  8514 00003D39 A3[8F010000]            		mov [line_y0],eax
  8515 00003D3E E8D11C0000              		call line
  8516 00003D43 668F05[77010000]        		pop word [gfx_cur_y]
  8517 00003D4A 668F05[75010000]        		pop word [gfx_cur_x]
  8518                                  
  8519 00003D51 832D[C4000000]02        		sub dword [pstack.ptr],2
  8520                                  prim_lineto_90:
  8521 00003D58 C3                      		ret
  8522                                  
  8523                                  
  8524                                  
  8525                                  ;; putpixel - draw single pixel
  8526                                  ;
  8527                                  ; group: draw
  8528                                  ;
  8529                                  ; ( -- )
  8530                                  ;
  8531                                  ; Draw pixel in current color at current cursor position.
  8532                                  ;
  8533                                  ; example
  8534                                  ;   blue setcolor
  8535                                  ;   0 0 moveto putpixel		% blue dot at upper left corner
  8536                                  ;
  8537                                  
  8538                                  		bits 32
  8539                                  
  8540                                  prim_putpixel:
  8541 00003D59 0FA0                    		push fs
  8542 00003D5B 0FA8                    		push gs
  8543                                  
  8544 00003D5D E8121C0000              		call goto_xy
  8545 00003D62 E8C12B0000              		call screen_segs
  8546 00003D67 FF15[F9000000]          		call [setpixel_t]
  8547                                  
  8548 00003D6D 0FA9                    		pop gs
  8549 00003D6F 0FA1                    		pop fs
  8550                                  
  8551 00003D71 F8                      		clc
  8552 00003D72 C3                      		ret
  8553                                  
  8554                                  
  8555                                  ;; getpixel - read pixel from graphics memory
  8556                                  ;
  8557                                  ; group: draw
  8558                                  ;
  8559                                  ; ( -- int1 )
  8560                                  ;
  8561                                  ; int1: color; either 8-bit palette index or 24-bit RGB-value, depending on
  8562                                  ; graphics mode.
  8563                                  ;
  8564                                  ; example
  8565                                  ;   getpixel not setcolor putpixel	% invert pixel color
  8566                                  ;
  8567                                  
  8568                                  		bits 32
  8569                                  
  8570                                  prim_getpixel:
  8571 00003D73 0FA0                    		push fs
  8572 00003D75 0FA8                    		push gs
  8573                                  
  8574 00003D77 E8F81B0000              		call goto_xy
  8575 00003D7C E8A72B0000              		call screen_segs
  8576 00003D81 FF15[01010000]          		call [getpixel]
  8577 00003D87 E8451C0000              		call decode_color
  8578                                  
  8579 00003D8C 0FA9                    		pop gs
  8580 00003D8E 0FA1                    		pop fs
  8581                                  
  8582 00003D90 E913120000              		jmp pr_getint
  8583                                  
  8584                                  
  8585                                  ;; setfont - set font
  8586                                  ;
  8587                                  ; group: font
  8588                                  ;
  8589                                  ; ( ptr1 -- )
  8590                                  ; ( int1 -- )
  8591                                  ;
  8592                                  ; ptr1: font data (e.g. font file).
  8593                                  ; int1: same value as ptr1, but font is in password mode - it prints only '*'s.
  8594                                  ;
  8595                                  ; Note: password mode used to be passed as bit 31 in ptr1. gfxboot will try
  8596                                  ; to guess if you are doing that, but please don't.
  8597                                  ;
  8598                                  ; example
  8599                                  ;   "16x16.fnt" findfile setfont	% set 16x16 font
  8600                                  ;
  8601                                  ;  /pwmode { 1 settype } def
  8602                                  ;  currentfont pwmode setfont		% now in password mode
  8603                                  ;  "abc" show				% print "***"
  8604                                  ;
  8605                                  
  8606                                  		bits 32
  8607                                  
  8608                                  prim_setfont:
  8609 00003D95 B200                    		mov dl,t_none
  8610 00003D97 E81DF3FFFF              		call get_1arg
  8611 00003D9C 7224                    		jc prim_setfont_90
  8612 00003D9E 66BD0800                		mov bp,pserr_wrong_arg_types
  8613 00003DA2 B100                    		mov cl,0
  8614 00003DA4 80FA00                  		cmp dl,t_none
  8615 00003DA7 740D                    		jz prim_setfont_50
  8616 00003DA9 80FA0C                  		cmp dl,t_ptr
  8617 00003DAC 7408                    		jz prim_setfont_50
  8618 00003DAE 80FA01                  		cmp dl,t_int
  8619 00003DB1 F9                      		stc
  8620 00003DB2 750E                    		jnz prim_setfont_90
  8621 00003DB4 B101                    		mov cl,1
  8622                                  prim_setfont_50:
  8623 00003DB6 E87B1E0000              		call font_init
  8624 00003DBB FF0D[C4000000]          		dec dword [pstack.ptr]
  8625 00003DC1 F8                      		clc
  8626                                  prim_setfont_90:
  8627 00003DC2 C3                      		ret
  8628                                  
  8629                                  
  8630                                  ;; currentfont - get current font
  8631                                  ;
  8632                                  ; group: font
  8633                                  ;
  8634                                  ; ( -- ptr1 )
  8635                                  ; ( -- int1 )
  8636                                  ;
  8637                                  ; ptr1: current font
  8638                                  ; int1: current font, in password mode
  8639                                  ;
  8640                                  ; example
  8641                                  ;   currentfont				% save font
  8642                                  ;   "16x16_bold.fnt" findfile setfont	% set bold font
  8643                                  ;   "bold text" show			% write something in bold font
  8644                                  ;   setfont				% back to normal font
  8645                                  ;
  8646                                  
  8647                                  		bits 32
  8648                                  
  8649                                  prim_currentfont:
  8650 00003DC3 A1[0C010000]            		mov eax,[font]
  8651 00003DC8 F605[1A010000]01        		test byte [font.properties],1
  8652 00003DCF B20C                    		mov dl,t_ptr
  8653 00003DD1 7402                    		jz prim_currentfont_90
  8654 00003DD3 B201                    		mov dl,t_int
  8655                                  prim_currentfont_90:
  8656 00003DD5 E9D0110000              		jmp pr_getobj
  8657                                  
  8658                                  
  8659                                  ;; fontheight - font height
  8660                                  ;
  8661                                  ; group: font
  8662                                  ;
  8663                                  ; ( -- int1 )
  8664                                  ;
  8665                                  ; int1: font height
  8666                                  ;
  8667                                  ; example
  8668                                  ;   currentpoint
  8669                                  ;   "Hello" show			% print "Hello"
  8670                                  ;   moveto 0 fontheight rmoveto
  8671                                  ;   "world!"				% print "world!" below "Hello"
  8672                                  ;
  8673                                  
  8674                                  		bits 32
  8675                                  
  8676                                  prim_fontheight:
  8677 00003DDA 0FB705[14010000]        		movzx eax,word [font.height]
  8678 00003DE1 E9C2110000              		jmp pr_getint
  8679                                  
  8680                                  
  8681                                  ;; setimage - set active image
  8682                                  ;
  8683                                  ; group: image
  8684                                  ;
  8685                                  ; ( ptr1 -- )
  8686                                  ;
  8687                                  ; ptr1: image data. Either JPG or PCX file.
  8688                                  ;
  8689                                  ; Note: JPG is only supported in 16/32-bit modes.
  8690                                  ;
  8691                                  ; example
  8692                                  ;   "foo.jpg" findfile setimage		% load and use "foo.jpg"
  8693                                  ;
  8694                                  
  8695                                  		bits 32
  8696                                  
  8697                                  prim_setimage:
  8698 00003DE6 E8E0110000              		call pr_setptr_or_none
  8699 00003DEB E897340000              		call image_init
  8700 00003DF0 C3                      		ret
  8701                                  
  8702                                  
  8703                                  ;; currentimage - currently used image
  8704                                  ;
  8705                                  ; group: image
  8706                                  ;
  8707                                  ; ( -- ptr1 )
  8708                                  ;
  8709                                  
  8710                                  		bits 32
  8711                                  
  8712                                  prim_currentimage:
  8713 00003DF1 A1[D4000000]            		mov eax,[image]
  8714 00003DF6 E9A3110000              		jmp pr_getptr_or_none
  8715                                  
  8716                                  
  8717                                  ;; settransparency - set transparency
  8718                                  ;
  8719                                  ; group: draw
  8720                                  ;
  8721                                  ; ( int1 -- )
  8722                                  ;
  8723                                  ; int1: transparency for @fillrect operations; valid values are 0 - 256.
  8724                                  ;
  8725                                  
  8726                                  		bits 32
  8727                                  
  8728                                  prim_settransparency:
  8729 00003DFB E8E3110000              		call pr_setint
  8730 00003E00 A3[05010000]            		mov [transp],eax
  8731 00003E05 C3                      		ret
  8732                                  
  8733                                  
  8734                                  ;; currenttransparency - current transparency
  8735                                  ;
  8736                                  ; group: draw
  8737                                  ;
  8738                                  ; ( -- int1 )
  8739                                  ;
  8740                                  
  8741                                  		bits 32
  8742                                  
  8743                                  prim_currenttransparency:
  8744 00003E06 A1[05010000]            		mov eax,[transp]
  8745 00003E0B E998110000              		jmp pr_getint
  8746                                  
  8747                                  
  8748                                  ;; show - print text
  8749                                  ;
  8750                                  ; group: draw, text
  8751                                  ;
  8752                                  ; ( str1 -- )
  8753                                  ;
  8754                                  ; Print str1 in current color using current font.
  8755                                  ;
  8756                                  ; example
  8757                                  ;   "Hello world!" show		% print "Hello world!"
  8758                                  
  8759                                  		bits 32
  8760                                  
  8761                                  prim_show:
  8762 00003E10 B204                    		mov dl,t_string
  8763 00003E12 E8A2F2FFFF              		call get_1arg
  8764 00003E17 7239                    		jc prim_show_90
  8765 00003E19 FF0D[C4000000]          		dec dword [pstack.ptr]
  8766 00003E1F 6631C9                  		xor cx,cx
  8767 00003E22 89C6                    		mov esi,eax
  8768 00003E24 8B1D[D8010000]          		mov ebx,[start_row]
  8769 00003E2A 09DB                    		or ebx,ebx
  8770 00003E2C 7417                    		jz prim_show_50
  8771 00003E2E 3B1D[D4010000]          		cmp ebx,[cur_row2]
  8772 00003E34 731C                    		jae prim_show_90
  8773 00003E36 8B349D[08020000]        		mov esi,[row_text+4*ebx]
  8774 00003E3D 668B8C1B[08040000]      		mov cx,[ind_text+2*ebx]
  8775                                  prim_show_50:
  8776 00003E45 66890D[81010000]        		mov [gfx_indent],cx
  8777 00003E4C E84E1E0000              		call text_xy
  8778 00003E51 F8                      		clc
  8779                                  prim_show_90:
  8780 00003E52 C3                      		ret
  8781                                  
  8782                                  
  8783                                  ;; strsize - text dimensions
  8784                                  ;
  8785                                  ; group: text
  8786                                  ;
  8787                                  ; ( str1 -- int1 int2 )
  8788                                  ;
  8789                                  ; int1, int2: width, height of str1.
  8790                                  ;
  8791                                  ; example
  8792                                  ;
  8793                                  ;   "Hi there!"
  8794                                  ;   dup strsize pop neg 0 rmoveto show		% print "Hi there!" right aligned
  8795                                  ;
  8796                                  
  8797                                  		bits 32
  8798                                  
  8799                                  prim_strsize:
  8800 00003E53 B204                    		mov dl,t_string
  8801 00003E55 E85FF2FFFF              		call get_1arg
  8802 00003E5A 723E                    		jc prim_strsize_90
  8803 00003E5C FF0D[C4000000]          		dec dword [pstack.ptr]
  8804                                  
  8805 00003E62 89C6                    		mov esi,eax
  8806 00003E64 E874210000              		call str_size
  8807                                  
  8808 00003E69 A1[C4000000]            		mov eax,[pstack.ptr]
  8809 00003E6E 40                      		inc eax
  8810 00003E6F 40                      		inc eax
  8811 00003E70 3905[C0000000]          		cmp [pstack.size],eax
  8812 00003E76 66BD0400                		mov bp,pserr_pstack_overflow
  8813 00003E7A 721E                    		jb prim_strsize_90
  8814 00003E7C A3[C4000000]            		mov [pstack.ptr],eax
  8815 00003E81 52                      		push edx
  8816 00003E82 89C8                    		mov eax,ecx
  8817 00003E84 B201                    		mov dl,t_int
  8818 00003E86 B901000000              		mov ecx,1
  8819 00003E8B E8DEDAFFFF              		call set_pstack_tos
  8820 00003E90 58                      		pop eax
  8821 00003E91 B201                    		mov dl,t_int
  8822 00003E93 31C9                    		xor ecx,ecx
  8823 00003E95 E8D4DAFFFF              		call set_pstack_tos
  8824                                  prim_strsize_90:
  8825 00003E9A C3                      		ret
  8826                                  
  8827                                  
  8828                                  ;; memcpy - copy memory
  8829                                  ;
  8830                                  ; group: mem
  8831                                  ;
  8832                                  ; ( ptr1 ptr2 int1 -- )
  8833                                  ;
  8834                                  ; ptr1: destination
  8835                                  ; ptr2: source
  8836                                  ; int1: size
  8837                                  ;
  8838                                  ; example
  8839                                  ;   /a 10 malloc def
  8840                                  ;   /b 10 malloc def
  8841                                  ;   a 1 100 put		% a[1] = 100
  8842                                  ;   b a 10 memcpy	% copy a to b
  8843                                  ;
  8844                                  
  8845                                  		bits 32
  8846                                  
  8847                                  prim_memcpy:
  8848 00003E9B 66BD0300                		mov bp,pserr_pstack_underflow
  8849 00003E9F 833D[C4000000]03        		cmp dword [pstack.ptr],3
  8850 00003EA6 7234                    		jc prim_memcpy_90
  8851                                  
  8852 00003EA8 66BD0800                		mov bp,pserr_wrong_arg_types
  8853 00003EAC B902000000              		mov ecx,2
  8854 00003EB1 E8A3DAFFFF              		call get_pstack_tos
  8855 00003EB6 80FA0C                  		cmp dl,t_ptr
  8856 00003EB9 F9                      		stc
  8857 00003EBA 7520                    		jnz prim_memcpy_90
  8858 00003EBC 50                      		push eax
  8859 00003EBD 66BA010C                		mov dx,t_int + (t_ptr << 8)
  8860 00003EC1 E81AF2FFFF              		call get_2args
  8861 00003EC6 5B                      		pop ebx			; dst
  8862 00003EC7 7213                    		jc prim_memcpy_90
  8863 00003EC9 91                      		xchg eax,ecx
  8864                                  
  8865                                  		; ecx: size
  8866                                  		; eax: src
  8867                                  
  8868 00003ECA 09C9                    		or ecx,ecx
  8869 00003ECC 7407                    		jz prim_memcpy_80
  8870                                  
  8871 00003ECE 89C6                    		mov esi,eax
  8872 00003ED0 89DF                    		mov edi,ebx
  8873 00003ED2 F326A4                  		es rep movsb
  8874                                  
  8875                                  prim_memcpy_80:
  8876 00003ED5 832D[C4000000]03        		sub dword [pstack.ptr],3
  8877                                  prim_memcpy_90:
  8878 00003EDC C3                      		ret
  8879                                  
  8880                                  
  8881                                  ;; image - show image region
  8882                                  ;
  8883                                  ; group: image
  8884                                  ;
  8885                                  ; ( int1 int2 int3 int4 -- )
  8886                                  ;
  8887                                  ; int1, int2: x, y position in image
  8888                                  ;
  8889                                  ; int3, int4: width, height of image region
  8890                                  ;
  8891                                  ; example
  8892                                  ;   "xxx.jpg" findfile setimage		% load and activate "xxx.jpg"
  8893                                  ;   0 0 image.size image		% draw whole image
  8894                                  ;
  8895                                  
  8896                                  		bits 32
  8897                                  
  8898                                  prim_image:
  8899 00003EDD 66BD0300                		mov bp,pserr_pstack_underflow
  8900 00003EE1 833D[C4000000]04        		cmp dword [pstack.ptr],4
  8901 00003EE8 7278                    		jc prim_image_90
  8902 00003EEA B903000000              		mov ecx,3
  8903 00003EEF E865DAFFFF              		call get_pstack_tos
  8904 00003EF4 80FA01                  		cmp dl,t_int
  8905 00003EF7 F9                      		stc
  8906 00003EF8 66BD0800                		mov bp,pserr_wrong_arg_types
  8907 00003EFC 7564                    		jnz prim_image_90
  8908 00003EFE A3[8B010000]            		mov [line_x0],eax
  8909 00003F03 B902000000              		mov ecx,2
  8910 00003F08 55                      		push ebp
  8911 00003F09 E84BDAFFFF              		call get_pstack_tos
  8912 00003F0E 5D                      		pop ebp
  8913 00003F0F 80FA01                  		cmp dl,t_int
  8914 00003F12 F9                      		stc
  8915 00003F13 754D                    		jnz prim_image_90
  8916 00003F15 A3[8F010000]            		mov [line_y0],eax
  8917 00003F1A 66BA0101                		mov dx,t_int + (t_int << 8)
  8918 00003F1E E8BDF1FFFF              		call get_2args
  8919 00003F23 723D                    		jc prim_image_90
  8920                                  
  8921 00003F25 832D[C4000000]04        		sub dword [pstack.ptr],4
  8922                                  
  8923 00003F2C 8B15[8B010000]          		mov edx,[line_x0]
  8924 00003F32 01CA                    		add edx,ecx
  8925 00003F34 8915[93010000]          		mov [line_x1],edx
  8926                                  
  8927 00003F3A 8B15[8F010000]          		mov edx,[line_y0]
  8928 00003F40 01C2                    		add edx,eax
  8929 00003F42 8915[97010000]          		mov [line_y1],edx
  8930                                  
  8931 00003F48 E8B9320000              		call clip_image
  8932 00003F4D F5                      		cmc
  8933 00003F4E 7312                    		jnc prim_image_90
  8934                                  
  8935 00003F50 FF35[75010000]          		push dword [gfx_cur]
  8936 00003F56 E839330000              		call show_image
  8937 00003F5B 8F05[75010000]          		pop dword [gfx_cur]
  8938                                  
  8939 00003F61 F8                      		clc
  8940                                  prim_image_90:
  8941 00003F62 C3                      		ret
  8942                                  
  8943                                  
  8944                                  ;; loadpalette - load current palette
  8945                                  ;
  8946                                  ; group: image
  8947                                  ;
  8948                                  ; ( -- )
  8949                                  ;
  8950                                  ; Activates current palette in 8-bit modes.
  8951                                  ;
  8952                                  
  8953                                  		bits 32
  8954                                  
  8955                                  prim_loadpalette:
  8956 00003F63 B900010000              		mov ecx,100h
  8957 00003F68 31D2                    		xor edx,edx
  8958 00003F6A E851270000              		call load_palette
  8959 00003F6F F8                      		clc
  8960 00003F70 C3                      		ret
  8961                                  
  8962                                  
  8963                                  ;; unpackimage -  unpack image region into buffer
  8964                                  ;
  8965                                  ; group: image
  8966                                  ;
  8967                                  ; ( int1 int2 int3 int4 -- ptr1 )
  8968                                  ;
  8969                                  ; int1, int2: x, y position in image
  8970                                  ;
  8971                                  ; int3, int4: width, height of image region
  8972                                  ; ptr1: buffer with image data; use @free to free the buffer
  8973                                  ;
  8974                                  ; example
  8975                                  ;
  8976                                  ;   "xxx.jpg" findfile setimage		% load and activate "xxx.jpg"
  8977                                  ;   0 0 10 10 unpackimage		% unpack upper left 10x10 region
  8978                                  ;   /img exch def			% img = buffer
  8979                                  ;
  8980                                  ;  0 10 100 {
  8981                                  ;    0 exch moveto
  8982                                  ;    img restorescreen
  8983                                  ;  } for				% repeat image section horizontally 10 times
  8984                                  ;
  8985                                  ;  img free				% free it
  8986                                  ;
  8987                                  
  8988                                  		bits 32
  8989                                  
  8990                                  prim_unpackimage:
  8991 00003F71 66BD0300                		mov bp,pserr_pstack_underflow
  8992 00003F75 833D[C4000000]04        		cmp dword [pstack.ptr],4
  8993 00003F7C 0F82A1000000            		jc prim_unpackimage_90
  8994 00003F82 B903000000              		mov ecx,3
  8995 00003F87 E8CDD9FFFF              		call get_pstack_tos
  8996 00003F8C 80FA01                  		cmp dl,t_int
  8997 00003F8F F9                      		stc
  8998 00003F90 66BD0800                		mov bp,pserr_wrong_arg_types
  8999 00003F94 0F8589000000            		jnz prim_unpackimage_90
  9000 00003F9A A3[8B010000]            		mov [line_x0],eax
  9001 00003F9F B902000000              		mov ecx,2
  9002 00003FA4 55                      		push ebp
  9003 00003FA5 E8AFD9FFFF              		call get_pstack_tos
  9004 00003FAA 5D                      		pop ebp
  9005 00003FAB 80FA01                  		cmp dl,t_int
  9006 00003FAE F9                      		stc
  9007 00003FAF 7572                    		jnz prim_unpackimage_90
  9008 00003FB1 A3[8F010000]            		mov [line_y0],eax
  9009 00003FB6 66BA0101                		mov dx,t_int + (t_int << 8)
  9010 00003FBA E821F1FFFF              		call get_2args
  9011 00003FBF 7262                    		jc prim_unpackimage_90
  9012                                  
  9013 00003FC1 832D[C4000000]03        		sub dword [pstack.ptr],3
  9014                                  
  9015 00003FC8 8B15[8B010000]          		mov edx,[line_x0]
  9016 00003FCE 01CA                    		add edx,ecx
  9017 00003FD0 8915[93010000]          		mov [line_x1],edx
  9018 00003FD6 8B15[8F010000]          		mov edx,[line_y0]
  9019 00003FDC 01C2                    		add edx,eax
  9020 00003FDE 8915[97010000]          		mov [line_y1],edx
  9021                                  
  9022 00003FE4 E81D320000              		call clip_image
  9023                                  
  9024 00003FE9 722D                    		jc prim_unpackimage_70
  9025                                  
  9026 00003FEB A1[97010000]            		mov eax,[line_y1]
  9027 00003FF0 8B0D[93010000]          		mov ecx,[line_x1]
  9028                                  
  9029 00003FF6 2B05[8F010000]          		sub eax,[line_y0]
  9030 00003FFC 2B0D[8B010000]          		sub ecx,[line_x0]
  9031                                  
  9032 00004002 E8D0000000              		call alloc_fb
  9033 00004007 09C0                    		or eax,eax
  9034 00004009 740D                    		jz prim_unpackimage_70
  9035                                  
  9036 0000400B 50                      		push eax
  9037 0000400C E857320000              		call unpack_image
  9038 00004011 58                      		pop eax
  9039                                  
  9040                                  prim_unpackimage_60:
  9041 00004012 B20C                    		mov dl,t_ptr
  9042 00004014 09C0                    		or eax,eax
  9043 00004016 7504                    		jnz prim_unpackimage_80
  9044                                  prim_unpackimage_70:
  9045 00004018 B200                    		mov dl,t_none
  9046 0000401A 31C0                    		xor eax,eax
  9047                                  prim_unpackimage_80:
  9048                                  
  9049 0000401C 31C9                    		xor ecx,ecx
  9050 0000401E E84BD9FFFF              		call set_pstack_tos
  9051                                  prim_unpackimage_90:
  9052 00004023 C3                      		ret
  9053                                  
  9054                                  
  9055                                  ;; setpalette - set palette entry
  9056                                  ;
  9057                                  ; group: draw
  9058                                  ;
  9059                                  ; ( int1 int2 -- )
  9060                                  ;
  9061                                  ; int1: palette index
  9062                                  ; int2: RGB value
  9063                                  ;
  9064                                  ; example
  9065                                  ;   /red 11 0xff0000 def	% color 11 = red
  9066                                  ;   /yellow 12 0xffff00 def	% color 12 = yellow
  9067                                  ;
  9068                                  
  9069                                  		bits 32
  9070                                  
  9071                                  prim_setpalette:
  9072 00004024 66BA0101                		mov dx,t_int + (t_int << 8)
  9073 00004028 E8B3F0FFFF              		call get_2args
  9074 0000402D 7233                    		jc prim_setpalette_90
  9075                                  
  9076 0000402F 832D[C4000000]02        		sub dword [pstack.ptr],2
  9077                                  
  9078 00004036 81F900010000            		cmp ecx,100h
  9079 0000403C 7324                    		jae prim_setpalette_90
  9080                                  
  9081 0000403E 89CA                    		mov edx,ecx
  9082                                  
  9083 00004040 8D3C49                  		lea edi,[ecx+2*ecx]
  9084 00004043 033D[5D010000]          		add edi,[gfx_pal]
  9085                                  		
  9086 00004049 26884702                		mov [es:edi+2],al
  9087 0000404D 26886701                		mov [es:edi+1],ah
  9088 00004051 C1E810                  		shr eax,16
  9089 00004054 268807                  		mov [es:edi],al
  9090                                  
  9091 00004057 B901000000              		mov ecx,1
  9092 0000405C E85F260000              		call load_palette
  9093                                  
  9094 00004061 F8                      		clc
  9095                                  
  9096                                  prim_setpalette_90:
  9097 00004062 C3                      		ret
  9098                                  
  9099                                  
  9100                                  ;; getpalette - get palette entry
  9101                                  ;
  9102                                  ; group: draw
  9103                                  ;
  9104                                  ; ( int1 -- int2 )
  9105                                  ;
  9106                                  ; int1: palette index
  9107                                  ; int2: RGB value
  9108                                  ;
  9109                                  ; example
  9110                                  ;   11 dup getpalette not setpalette	% invert color 11
  9111                                  ;
  9112                                  
  9113                                  		bits 32
  9114                                  
  9115                                  prim_getpalette:
  9116 00004063 B201                    		mov dl,t_int
  9117 00004065 E84FF0FFFF              		call get_1arg
  9118 0000406A 722B                    		jc prim_getpalette_90
  9119                                  
  9120 0000406C 91                      		xchg eax,ecx
  9121 0000406D 31C0                    		xor eax,eax
  9122 0000406F 81F900010000            		cmp ecx,100h
  9123 00004075 7317                    		jae prim_getpalette_50
  9124                                  
  9125 00004077 8D0C49                  		lea ecx,[ecx+2*ecx]
  9126 0000407A 030D[5D010000]          		add ecx,[gfx_pal]
  9127                                  
  9128 00004080 268A01                  		mov al,[es:ecx]
  9129 00004083 C1E010                  		shl eax,16
  9130 00004086 268A6101                		mov ah,[es:ecx+1]
  9131 0000408A 268A4102                		mov al,[es:ecx+2]
  9132                                  prim_getpalette_50:
  9133 0000408E B201                    		mov dl,t_int
  9134 00004090 31C9                    		xor ecx,ecx
  9135 00004092 E8D7D8FFFF              		call set_pstack_tos
  9136                                  prim_getpalette_90:
  9137 00004097 C3                      		ret
  9138                                  
  9139                                  
  9140                                  ;; settransparentcolor - set color used for transparency
  9141                                  ;
  9142                                  ; group: image
  9143                                  ;
  9144                                  ; ( int1 -- )
  9145                                  ;
  9146                                  ; When doing an @image operation, pixels with this color are not copied.
  9147                                  ; Something like an alpha channel, actually. Works only with PCX images.
  9148                                  ; Not at all related to @settransparency.
  9149                                  ;
  9150                                  
  9151                                  		bits 32
  9152                                  
  9153                                  prim_settransparentcolor:
  9154 00004098 E8460F0000              		call pr_setint
  9155 0000409D A3[BC010000]            		mov [transparent_color],eax
  9156 000040A2 C3                      		ret
  9157                                  
  9158                                  
  9159                                  ;; savescreen - save screen area
  9160                                  ;
  9161                                  ; group: image
  9162                                  ;
  9163                                  ; ( int1 int2 -- ptr1 )
  9164                                  ;
  9165                                  ; int1, int2: width, height of screen area
  9166                                  ; ptr1: buffer with image data; use @free to free the buffer
  9167                                  ;
  9168                                  ; Note: width and height are stored in buffer.
  9169                                  ;
  9170                                  ; example
  9171                                  ;   0 0 moveto screen.size savescreen	% save entire screen
  9172                                  ;
  9173                                  
  9174                                  		bits 32
  9175                                  
  9176                                  prim_savescreen:
  9177 000040A3 66BA0101                		mov dx,t_int + (t_int << 8)
  9178 000040A7 E834F0FFFF              		call get_2args
  9179 000040AC 7228                    		jc prim_savescreen_90
  9180 000040AE E824000000              		call alloc_fb
  9181 000040B3 09C0                    		or eax,eax
  9182 000040B5 740A                    		jz prim_savescreen_50
  9183 000040B7 50                      		push eax
  9184 000040B8 8D7804                  		lea edi,[eax+4]
  9185 000040BB E809270000              		call save_bg
  9186 000040C0 58                      		pop eax
  9187                                  prim_savescreen_50:
  9188 000040C1 FF0D[C4000000]          		dec dword [pstack.ptr]
  9189 000040C7 31C9                    		xor ecx,ecx
  9190 000040C9 B20C                    		mov dl,t_ptr
  9191 000040CB 09C0                    		or eax,eax
  9192 000040CD 7502                    		jnz prim_savescreen_70
  9193 000040CF B200                    		mov dl,t_none
  9194                                  prim_savescreen_70:
  9195 000040D1 E898D8FFFF              		call set_pstack_tos
  9196                                  prim_savescreen_90:
  9197 000040D6 C3                      		ret
  9198                                  
  9199                                  
  9200                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  9201                                  ; Allocate drawing buffer.
  9202                                  ;
  9203                                  ; eax		height
  9204                                  ; ecx		width
  9205                                  ;
  9206                                  ; return:
  9207                                  ;  eax		buffer (0: failed)
  9208                                  ;  dx, cx       width, height
  9209                                  ;
  9210                                  
  9211                                  		bits 32
  9212                                  
  9213                                  alloc_fb:
  9214 000040D7 50                      		push eax
  9215 000040D8 51                      		push ecx
  9216 000040D9 F7E1                    		mul ecx
  9217 000040DB F725[6B010000]          		mul dword [pixel_bytes]
  9218 000040E1 5A                      		pop edx
  9219 000040E2 59                      		pop ecx
  9220 000040E3 66BD0D00                		mov bp,pserr_invalid_image_size
  9221 000040E7 83C004                  		add eax,4
  9222 000040EA 7218                    		jc alloc_fb_80
  9223 000040EC 51                      		push ecx
  9224 000040ED 52                      		push edx
  9225 000040EE E8FBD9FFFF              		call calloc
  9226 000040F3 5A                      		pop edx
  9227 000040F4 59                      		pop ecx
  9228 000040F5 09C0                    		or eax,eax
  9229 000040F7 740D                    		jz alloc_fb_90
  9230 000040F9 26668910                		mov [es:eax],dx
  9231 000040FD 2666894802              		mov [es:eax+2],cx
  9232 00004102 EB02                    		jmp alloc_fb_90
  9233                                  alloc_fb_80:
  9234 00004104 31C0                    		xor eax,eax
  9235                                  alloc_fb_90:
  9236 00004106 C3                      		ret
  9237                                  
  9238                                  
  9239                                  ;; restorescreen - restore screen area
  9240                                  ;
  9241                                  ; group: image
  9242                                  ;
  9243                                  ; ( ptr1 -- )
  9244                                  ;
  9245                                  ; ptr1: buffer with image data; use @free to free the buffer
  9246                                  ;
  9247                                  ; Note: width and height are taken from buffer. Does not actually
  9248                                  ; free ptr1 - use @free explicitly.
  9249                                  ;
  9250                                  ; example
  9251                                  ;   0 0 moveto 100 100 savescreen	% save upper left 100x100 section...
  9252                                  ;   300 200 moveto dup restorescreen	% and copy it to 300x200
  9253                                  ;   free				% free memory
  9254                                  ;
  9255                                  
  9256                                  		bits 32
  9257                                  
  9258                                  prim_restorescreen:
  9259 00004107 B20C                    		mov dl,t_ptr
  9260 00004109 E8ABEFFFFF              		call get_1arg
  9261 0000410E 7308                    		jnc prim_restorescreen_20
  9262 00004110 80FA00                  		cmp dl,t_none
  9263 00004113 F9                      		stc
  9264 00004114 7525                    		jnz prim_restorescreen_90
  9265 00004116 EB1C                    		jmp prim_restorescreen_80
  9266                                  
  9267                                  prim_restorescreen_20:
  9268                                  
  9269 00004118 26668B10                		mov dx,[es:eax]
  9270 0000411C 26668B4802              		mov cx,[es:eax+2]
  9271 00004121 8D7804                  		lea edi,[eax+4]
  9272 00004124 6689D3                  		mov bx,dx
  9273 00004127 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
  9274 0000412F E845270000              		call restore_bg
  9275                                  
  9276                                  prim_restorescreen_80:
  9277 00004134 FF0D[C4000000]          		dec dword [pstack.ptr]
  9278 0000413A F8                      		clc
  9279                                  prim_restorescreen_90:
  9280 0000413B C3                      		ret
  9281                                  
  9282                                  
  9283                                  ;; malloc - allocate memory
  9284                                  ;
  9285                                  ; group: mem
  9286                                  ;
  9287                                  ; ( int1 -- ptr1 )
  9288                                  ;
  9289                                  ; int1:		memory size
  9290                                  ; ptr1:		pointer to memory area
  9291                                  ;
  9292                                  ; Note: Use @free to free ptr1.
  9293                                  ;
  9294                                  ; example 
  9295                                  ;   /foo 256 malloc def	% allocate 256 bytes...
  9296                                  ;   foo free		% and free it
  9297                                  ;
  9298                                  
  9299                                  		bits 32
  9300                                  
  9301                                  prim_malloc:
  9302 0000413C B201                    		mov dl,t_int
  9303 0000413E E876EFFFFF              		call get_1arg
  9304 00004143 7217                    		jc prim_malloc_90
  9305 00004145 E8A4D9FFFF              		call calloc
  9306 0000414A 09C0                    		or eax,eax
  9307 0000414C F9                      		stc
  9308 0000414D 66BD0E00                		mov bp,pserr_no_memory
  9309 00004151 7409                    		jz prim_malloc_90
  9310 00004153 31C9                    		xor ecx,ecx
  9311 00004155 B20C                    		mov dl,t_ptr
  9312 00004157 E812D8FFFF              		call set_pstack_tos
  9313                                  prim_malloc_90:
  9314 0000415C C3                      		ret
  9315                                  
  9316                                  
  9317                                  ;; free - free memory
  9318                                  ;
  9319                                  ; group: mem
  9320                                  ;
  9321                                  ; ( obj1 -- )
  9322                                  ;
  9323                                  ; obj1:		object to free, either array, string or pointer
  9324                                  ;
  9325                                  ; Note: There is no garbage collector implemented. You have to keep track of
  9326                                  ; memory usage yourself. If obj1 does not refer to some dynamically
  9327                                  ; allocated object, @free does nothing.
  9328                                  ;
  9329                                  ; example
  9330                                  ; 2 array		% create array with 2 elements...
  9331                                  ; free			% and free it
  9332                                  ;
  9333                                  ; 100 malloc		% allocate 100 bytes...
  9334                                  ; free			% and free it
  9335                                  ;
  9336                                  ; "Some Text" free	% free nothing
  9337                                  ;
  9338                                  
  9339                                  		bits 32
  9340                                  
  9341                                  prim_free:
  9342 0000415D B204                    		mov dl,t_string
  9343 0000415F E855EFFFFF              		call get_1arg
  9344 00004164 7310                    		jnc prim_free_10
  9345 00004166 80FA0C                  		cmp dl,t_ptr
  9346 00004169 740B                    		jz prim_free_10
  9347 0000416B 80FA00                  		cmp dl,t_none
  9348 0000416E 740B                    		jz prim_free_50
  9349 00004170 80FA0A                  		cmp dl,t_array
  9350 00004173 F9                      		stc
  9351 00004174 750C                    		jnz prim_free_90
  9352                                  prim_free_10:
  9353 00004176 E835DAFFFF              		call free
  9354                                  prim_free_50:
  9355 0000417B FF0D[C4000000]          		dec dword [pstack.ptr]
  9356 00004181 F8                      		clc
  9357                                  prim_free_90:
  9358 00004182 C3                      		ret
  9359                                  
  9360                                  
  9361                                  ;; realloc - change allocated memory size
  9362                                  ;
  9363                                  ; group: mem
  9364                                  ;
  9365                                  ; ( obj1 int1 -- )
  9366                                  ;
  9367                                  ; obj1:		object to resize, either array, string or pointer
  9368                                  ; int1:		new size; memory is freed if zero
  9369                                  ;
  9370                                  ; Note: There is no garbage collector implemented. You have to keep track of
  9371                                  ; memory usage yourself. If obj1 does not refer to some dynamically
  9372                                  ; allocated object, @realloc does nothing.
  9373                                  ;
  9374                                  ; example
  9375                                  ;
  9376                                  ; 100 malloc		% allocate 100 bytes...
  9377                                  ; 10 realloc		% resize to 10 bytes
  9378                                  ;
  9379                                  
  9380                                  		bits 32
  9381                                  
  9382                                  prim_realloc:
  9383 00004183 66BA010C                		mov dx,t_int + (t_ptr << 8)
  9384 00004187 E854EFFFFF              		call get_2args
  9385 0000418C 7315                    		jnc prim_realloc_10
  9386 0000418E 6681FA010C              		cmp dx,t_int + (t_ptr << 8)
  9387 00004193 740E                    		jz prim_realloc_10
  9388 00004195 6683FA01                		cmp dx,t_int + (t_none << 8)
  9389 00004199 740E                    		jz prim_realloc_50
  9390 0000419B 6681FA010A              		cmp dx,t_int + (t_array << 8)
  9391 000041A0 F9                      		stc
  9392 000041A1 750D                    		jnz prim_realloc_90
  9393                                  prim_realloc_10:
  9394 000041A3 91                      		xchg eax,ecx
  9395 000041A4 E894DAFFFF              		call realloc
  9396                                  prim_realloc_50:
  9397 000041A9 832D[C4000000]02        		sub dword [pstack.ptr],2
  9398                                  prim_realloc_90:
  9399 000041B0 C3                      		ret
  9400                                  
  9401                                  
  9402                                  ;; memsize - report available memory size
  9403                                  ;
  9404                                  ; group: mem
  9405                                  ;
  9406                                  ; ( int1 -- int2 int3 )
  9407                                  ;
  9408                                  ; int1: memory region (0 ... 3)
  9409                                  ; int2: total free memory
  9410                                  ; int3: size of largest free block
  9411                                  ;
  9412                                  ; Region 0 is memory in the low 640kB range. Region >= 1 are typically 1 MB extended memory
  9413                                  ; per region.
  9414                                  ;
  9415                                  ; Note: available memory depends on the boot loader.
  9416                                  ;
  9417                                  ; example
  9418                                  ;   0 memsize pop 1024 lt { "less than 1kB left" show } if
  9419                                  ;
  9420                                  
  9421                                  		bits 32
  9422                                  
  9423                                  prim_memsize:
  9424 000041B1 B201                    		mov dl,t_int
  9425 000041B3 E801EFFFFF              		call get_1arg
  9426 000041B8 7236                    		jc prim_memsize_90
  9427 000041BA 8B0D[C4000000]          		mov ecx,[pstack.ptr]
  9428 000041C0 41                      		inc ecx
  9429 000041C1 390D[C0000000]          		cmp [pstack.size],ecx
  9430 000041C7 66BD0400                		mov bp,pserr_pstack_overflow
  9431 000041CB 7223                    		jb prim_memsize_90
  9432 000041CD 890D[C4000000]          		mov [pstack.ptr],ecx
  9433                                  
  9434 000041D3 E82EDCFFFF              		call memsize
  9435                                  
  9436 000041D8 B201                    		mov dl,t_int
  9437 000041DA 95                      		xchg eax,ebp
  9438 000041DB 57                      		push edi
  9439 000041DC B901000000              		mov ecx,1
  9440 000041E1 E888D7FFFF              		call set_pstack_tos
  9441 000041E6 58                      		pop eax
  9442 000041E7 B201                    		mov dl,t_int
  9443 000041E9 31C9                    		xor ecx,ecx
  9444 000041EB E87ED7FFFF              		call set_pstack_tos
  9445                                  prim_memsize_90:
  9446 000041F0 C3                      		ret
  9447                                  
  9448                                  
  9449                                  ;; dumpmem - dump memory usage to console
  9450                                  ;
  9451                                  ; group: mem
  9452                                  ;
  9453                                  ; ( -- )
  9454                                  ;
  9455                                  ; Note: useful only for debugging.
  9456                                  ;
  9457                                  
  9458                                  		bits 32
  9459                                  
  9460                                  prim_dumpmem:
  9461 000041F1 E8F4DAFFFF              		call dump_malloc
  9462 000041F6 C3                      		ret
  9463                                  
  9464                                  
  9465                                  ;; fillrect - fill rectangular area
  9466                                  ;
  9467                                  ; group: draw
  9468                                  ;
  9469                                  ; ( int1 int2 -- )
  9470                                  ;
  9471                                  ; int1, int2: width, height
  9472                                  ;
  9473                                  ; example
  9474                                  ;   0 0 moveto
  9475                                  ;   blue setcolor
  9476                                  ;   300 200 fillrect		% 300x200 blue rectangle
  9477                                  ;
  9478                                  
  9479                                  		bits 32
  9480                                  
  9481                                  prim_fillrect:
  9482 000041F7 66BA0101                		mov dx,t_int + (t_int << 8)
  9483 000041FB E8E0EEFFFF              		call get_2args
  9484 00004200 7215                    		jc prim_fillrect_90
  9485 00004202 89CA                    		mov edx,ecx
  9486 00004204 89C1                    		mov ecx,eax
  9487 00004206 A1[A4010000]            		mov eax,[gfx_color]
  9488 0000420B E827270000              		call fill_rect
  9489 00004210 832D[C4000000]02        		sub dword [pstack.ptr],2
  9490                                  prim_fillrect_90:
  9491 00004217 C3                      		ret
  9492                                  
  9493                                  
  9494                                  ;; snprintf - C-style snprintf
  9495                                  ;
  9496                                  ; group: mem
  9497                                  ;
  9498                                  ; ( obj1 ... objN str1 int1 ptr1 -- )
  9499                                  ;
  9500                                  ; ptr1: buffer
  9501                                  ; int1: buffer size
  9502                                  ; str1: format string
  9503                                  ;
  9504                                  ; obj1 ... objN: printf arguments
  9505                                  ;
  9506                                  ; Note: reversed argument order!
  9507                                  ;
  9508                                  ; example
  9509                                  ;
  9510                                  ; /sprintf {
  9511                                  ;   dup 12 settype length exch snprintf	% 12 = pointer type
  9512                                  ; } def
  9513                                  ;
  9514                                  ; /buf 100 string def
  9515                                  ; "bar" "foo" 3 "&#37;d &#37;s &#37;s" buf sprintf
  9516                                  ; buf show				% print "3 foo bar"
  9517                                  ; 
  9518                                  
  9519                                  		bits 32
  9520                                  
  9521                                  prim_snprintf:
  9522 00004218 66BD0300                		mov bp,pserr_pstack_underflow
  9523 0000421C 833D[C4000000]03        		cmp dword [pstack.ptr],3
  9524 00004223 7268                    		jc prim_snprintf_90
  9525 00004225 66BD0800                		mov bp,pserr_wrong_arg_types
  9526 00004229 B902000000              		mov ecx,2
  9527 0000422E E826D7FFFF              		call get_pstack_tos
  9528 00004233 80FA04                  		cmp dl,t_string
  9529 00004236 F9                      		stc
  9530 00004237 7554                    		jnz prim_snprintf_90
  9531 00004239 50                      		push eax
  9532 0000423A 66BA0401                		mov dx,t_string + (t_int << 8)
  9533 0000423E E89DEEFFFF              		call get_2args
  9534 00004243 5E                      		pop esi
  9535 00004244 7247                    		jc prim_snprintf_90
  9536                                  
  9537 00004246 832D[C4000000]03        		sub dword [pstack.ptr],3
  9538                                  
  9539 0000424D A3[9C080000]            		mov [pf_gfx_buf],eax
  9540 00004252 890D[A0080000]          		mov [pf_gfx_max],ecx
  9541 00004258 8325[A4080000]00        		and dword [pf_gfx_cnt],0
  9542 0000425F 668325[98080000]00      		and word [pf_gfx_err],0
  9543                                  
  9544 00004267 09C9                    		or ecx,ecx
  9545 00004269 7404                    		jz prim_snprintf_40
  9546                                  		; clear buffer in case we have to print _nothing_
  9547 0000426B 26C60000                		mov byte [es:eax],0
  9548                                  prim_snprintf_40:
  9549 0000426F C605[96080000]01        		mov byte [pf_gfx],1
  9550 00004276 E82EE1FFFF              		call printf
  9551 0000427B C605[96080000]00        		mov byte [pf_gfx],0
  9552                                  
  9553 00004282 668B2D[98080000]        		mov bp,[pf_gfx_err]
  9554 00004289 6683FD00                		cmp bp,0
  9555                                  prim_snprintf_90:
  9556 0000428D C3                      		ret
  9557                                  
  9558                                  
  9559                                  ;; edit.init -- setup and show an editable input field
  9560                                  ;
  9561                                  ; group: edit
  9562                                  ;
  9563                                  ; ( array1 str1 -- )
  9564                                  ;
  9565                                  ; str1: initial input string value
  9566                                  ; array1: (at least) 6-dimensional array: [ x y bg buf buf_size .undef ]. x, y: input field
  9567                                  ; position; bg: background pixmap (created with @savescreen) - this determines the
  9568                                  ; input field dimensions, too; buf: string buffer, large enough
  9569                                  ; for a string of length buf_size. The last element is used internally.
  9570                                  ;
  9571                                  ; example
  9572                                  ;   50 100 moveto 200 20 savescreen /bg exch def
  9573                                  ;   /buf 100 string def
  9574                                  ;   /ed [ 50 100 bg buf 100 .undef ] def
  9575                                  ;   ed "foo" edit.init
  9576                                  ;
  9577                                  
  9578                                  		bits 32
  9579                                  
  9580                                  prim_editinit:
  9581 0000428E 66BA040A                		mov dx,t_string + (t_array << 8)
  9582 00004292 E849EEFFFF              		call get_2args
  9583 00004297 7235                    		jc prim_editinit_90
  9584                                  
  9585 00004299 89CE                    		mov esi,ecx
  9586                                  
  9587 0000429B 50                      		push eax
  9588 0000429C E87F140000              		call edit_init_params
  9589 000042A1 E83D150000              		call edit_get_params
  9590 000042A6 58                      		pop eax
  9591                                  
  9592 000042A7 66BD0F00                		mov bp,pserr_invalid_data
  9593 000042AB 7221                    		jc prim_editinit_90
  9594                                  
  9595 000042AD FF35[75010000]          		push dword [gfx_cur]
  9596                                  
  9597 000042B3 56                      		push esi
  9598 000042B4 89C6                    		mov esi,eax
  9599 000042B6 E816140000              		call edit_init
  9600 000042BB 5E                      		pop esi
  9601                                  
  9602 000042BC 8F05[75010000]          		pop dword [gfx_cur]
  9603                                  
  9604 000042C2 E8C6140000              		call edit_put_params
  9605                                  
  9606 000042C7 832D[C4000000]02        		sub dword [pstack.ptr],2
  9607                                  prim_editinit_90:
  9608 000042CE C3                      		ret
  9609                                  
  9610                                  
  9611                                  ;; edit.redraw - redraw input field
  9612                                  ;
  9613                                  ; group: edit
  9614                                  ;
  9615                                  ; ( array1 -- )
  9616                                  ;
  9617                                  ; array1: see @edit.init
  9618                                  ;
  9619                                  ; example
  9620                                  ;   ed edit.redraw		% redraw input field
  9621                                  ;
  9622                                  
  9623                                  		bits 32
  9624                                  
  9625                                  prim_editredraw:
  9626 000042CF B20A                    		mov dl,t_array
  9627 000042D1 E8E3EDFFFF              		call get_1arg
  9628 000042D6 7226                    		jc prim_editredraw_90
  9629                                  
  9630 000042D8 89C6                    		mov esi,eax
  9631 000042DA E804150000              		call edit_get_params
  9632 000042DF 66BD0F00                		mov bp,pserr_invalid_data
  9633 000042E3 7219                    		jc prim_editredraw_90
  9634                                  
  9635 000042E5 56                      		push esi
  9636                                  
  9637 000042E6 E8D5110000              		call edit_align
  9638 000042EB E848120000              		call edit_redraw
  9639                                  
  9640 000042F0 5E                      		pop esi
  9641                                  
  9642 000042F1 E897140000              		call edit_put_params
  9643                                  
  9644 000042F6 66832D[C4000000]01      		sub word [pstack.ptr],byte 1
  9645                                  prim_editredraw_90:
  9646 000042FE C3                      		ret
  9647                                  
  9648                                  
  9649                                  ;; edit.done - restore input field background
  9650                                  ;
  9651                                  ; group: edit
  9652                                  ;
  9653                                  ; ( array1 -- )
  9654                                  ;
  9655                                  ; array1: see @edit.init
  9656                                  ;
  9657                                  ; Note: does not free any data associated with array1.
  9658                                  ;
  9659                                  ; example
  9660                                  ;   ed edit.done		% delete input field
  9661                                  ;
  9662                                  
  9663                                  		bits 32
  9664                                  
  9665                                  prim_editdone:
  9666 000042FF B20A                    		mov dl,t_array
  9667 00004301 E8B3EDFFFF              		call get_1arg
  9668 00004306 725F                    		jc prim_editdone_90
  9669                                  
  9670 00004308 89C6                    		mov esi,eax
  9671 0000430A E8D4140000              		call edit_get_params
  9672 0000430F 66BD0F00                		mov bp,pserr_invalid_data
  9673 00004313 7252                    		jc prim_editdone_90
  9674                                  
  9675 00004315 66FF35[BC080000]        		push word [edit_x]
  9676 0000431C 668F05[75010000]        		pop word [gfx_cur_x]
  9677 00004323 66FF35[BE080000]        		push word [edit_y]
  9678 0000432A 668F05[77010000]        		pop word [gfx_cur_y]
  9679 00004331 668B15[C0080000]        		mov dx,[edit_width]
  9680 00004338 668B0D[C2080000]        		mov cx,[edit_height]
  9681 0000433F 8B3D[C4080000]          		mov edi,[edit_bg]
  9682 00004345 83C704                  		add edi,4
  9683                                  
  9684 00004348 6689D3                  		mov bx,dx
  9685 0000434B 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
  9686 00004353 56                      		push esi
  9687 00004354 E820250000              		call restore_bg
  9688 00004359 5E                      		pop esi
  9689                                  
  9690 0000435A E800140000              		call edit_done_params
  9691                                  
  9692 0000435F 66832D[C4000000]01      		sub word [pstack.ptr],byte 1
  9693                                  prim_editdone_90:
  9694 00004367 C3                      		ret
  9695                                  
  9696                                  
  9697                                  ;; edit.showcursor - show input field cursor
  9698                                  ;
  9699                                  ; group: edit
  9700                                  ;
  9701                                  ; ( array1 -- )
  9702                                  ;
  9703                                  ; array1: see @edit.init
  9704                                  ;
  9705                                  
  9706                                  		bits 32
  9707                                  
  9708                                  prim_editshowcursor:
  9709 00004368 B20A                    		mov dl,t_array
  9710 0000436A E84AEDFFFF              		call get_1arg
  9711 0000436F 7230                    		jc prim_editshowcursor_90
  9712                                  
  9713 00004371 89C6                    		mov esi,eax
  9714 00004373 E86B140000              		call edit_get_params
  9715 00004378 66BD0F00                		mov bp,pserr_invalid_data
  9716 0000437C 7223                    		jc prim_editshowcursor_90
  9717                                  
  9718 0000437E 09FF                    		or edi,edi
  9719 00004380 7418                    		jz prim_editshowcursor_50
  9720                                  
  9721 00004382 56                      		push esi
  9722 00004383 FF35[75010000]          		push dword [gfx_cur]
  9723 00004389 E8A7120000              		call edit_show_cursor
  9724 0000438E 8F05[75010000]          		pop dword [gfx_cur]
  9725 00004394 5E                      		pop esi
  9726                                  
  9727 00004395 E8F3130000              		call edit_put_params
  9728                                  
  9729                                  prim_editshowcursor_50:
  9730                                  
  9731 0000439A 832D[C4000000]01        		sub dword [pstack.ptr],1
  9732                                  prim_editshowcursor_90:
  9733 000043A1 C3                      		ret
  9734                                  
  9735                                  
  9736                                  ;; edit.hidecursor - hide input field cursor
  9737                                  ;
  9738                                  ; group: edit
  9739                                  ;
  9740                                  ; ( array1 -- )
  9741                                  ;
  9742                                  ; array1: see @edit.init
  9743                                  ;
  9744                                  
  9745                                  		bits 32
  9746                                  
  9747                                  prim_edithidecursor:
  9748 000043A2 B20A                    		mov dl,t_array
  9749 000043A4 E810EDFFFF              		call get_1arg
  9750 000043A9 7230                    		jc prim_edithidecursor_90
  9751                                  
  9752 000043AB 89C6                    		mov esi,eax
  9753 000043AD E831140000              		call edit_get_params
  9754 000043B2 66BD0F00                		mov bp,pserr_invalid_data
  9755 000043B6 7223                    		jc prim_edithidecursor_90
  9756                                  
  9757 000043B8 09FF                    		or edi,edi
  9758 000043BA 7418                    		jz prim_edithidecursor_50
  9759                                  
  9760 000043BC 56                      		push esi
  9761 000043BD FF35[75010000]          		push dword [gfx_cur]
  9762 000043C3 E80C120000              		call edit_hide_cursor
  9763 000043C8 8F05[75010000]          		pop dword [gfx_cur]
  9764 000043CE 5E                      		pop esi
  9765                                  
  9766 000043CF E8B9130000              		call edit_put_params
  9767                                  
  9768                                  
  9769                                  prim_edithidecursor_50:
  9770                                  
  9771 000043D4 832D[C4000000]01        		sub dword [pstack.ptr],1
  9772                                  prim_edithidecursor_90:
  9773 000043DB C3                      		ret
  9774                                  
  9775                                  
  9776                                  ;; edit.input - edit field input processing
  9777                                  ;
  9778                                  ; group: edit
  9779                                  ;
  9780                                  ; ( array1 int1 -- )
  9781                                  ;
  9782                                  ; array1: see @edit.init
  9783                                  ; int1: key (bits 0-23 Unicode char, bits 24-31 scan code)
  9784                                  ;
  9785                                  ; example
  9786                                  ;   /keyLeft 0x4b000000 def	% move cursor left
  9787                                  ;   ed 'a' edit.input
  9788                                  ;   ed keyLeft edit.input
  9789                                  ;
  9790                                  
  9791                                  		bits 32
  9792                                  
  9793                                  prim_editinput:
  9794 000043DC 66BA010A                		mov dx,t_int + (t_array << 8)
  9795 000043E0 E8FBECFFFF              		call get_2args
  9796 000043E5 723E                    		jc prim_editinput_90
  9797                                  
  9798 000043E7 89CE                    		mov esi,ecx
  9799                                  
  9800 000043E9 50                      		push eax
  9801 000043EA E8F4130000              		call edit_get_params
  9802 000043EF 58                      		pop eax
  9803                                  
  9804 000043F0 66BD0F00                		mov bp,pserr_invalid_data
  9805 000043F4 722F                    		jc prim_editinput_90
  9806                                  
  9807 000043F6 09FF                    		or edi,edi
  9808 000043F8 7424                    		jz prim_editinput_50
  9809                                  
  9810 000043FA 56                      		push esi
  9811                                  
  9812 000043FB FF35[75010000]          		push dword [gfx_cur]
  9813                                  
  9814 00004401 50                      		push eax
  9815 00004402 E8CD110000              		call edit_hide_cursor
  9816 00004407 58                      		pop eax
  9817                                  
  9818 00004408 E8680E0000              		call edit_input
  9819                                  
  9820 0000440D E823120000              		call edit_show_cursor
  9821                                  
  9822 00004412 8F05[75010000]          		pop dword [gfx_cur]
  9823                                  
  9824 00004418 5E                      		pop esi
  9825                                  
  9826 00004419 E86F130000              		call edit_put_params
  9827                                  
  9828                                  prim_editinput_50:
  9829                                  
  9830 0000441E 832D[C4000000]02        		sub dword [pstack.ptr],2
  9831                                  prim_editinput_90:
  9832 00004425 C3                      		ret
  9833                                  
  9834                                  
  9835                                  ;; edit.getleft - get chat left from cursor
  9836                                  ;
  9837                                  ; group: edit
  9838                                  ;
  9839                                  ; ( array1 -- int1 )
  9840                                  ;
  9841                                  ; array1: see @edit.init
  9842                                  ; int1: char (0 = start of line)
  9843                                  ;
  9844                                  
  9845                                  		bits 32
  9846                                  
  9847                                  prim_editgetleft:
  9848 00004426 B20A                    		mov dl,t_array
  9849 00004428 E88CECFFFF              		call get_1arg
  9850 0000442D 7239                    		jc prim_editgetleft_90
  9851                                  
  9852 0000442F 89C6                    		mov esi,eax
  9853 00004431 E8AD130000              		call edit_get_params
  9854 00004436 66BD0F00                		mov bp,pserr_invalid_data
  9855 0000443A 722C                    		jc prim_editgetleft_90
  9856                                  
  9857 0000443C 09FF                    		or edi,edi
  9858 0000443E 741F                    		jz prim_editgetleft_50
  9859                                  
  9860 00004440 8B1D[C8080000]          		mov ebx,[edit_buf]
  9861 00004446 0FB735[CE080000]        		movzx esi,word [edit_buf_ptr]
  9862 0000444D 31C0                    		xor eax,eax
  9863 0000444F 09F6                    		or esi,esi
  9864 00004451 740C                    		jz prim_editgetleft_50
  9865 00004453 E8F20D0000              		call utf8_prev
  9866 00004458 01DE                    		add esi,ebx
  9867 0000445A E8EF1B0000              		call utf8_dec
  9868                                  
  9869                                  prim_editgetleft_50:
  9870 0000445F B201                    		mov dl,t_int
  9871 00004461 31C9                    		xor ecx,ecx
  9872 00004463 E806D5FFFF              		call set_pstack_tos
  9873                                  prim_editgetleft_90:
  9874 00004468 C3                      		ret
  9875                                  
  9876                                  
  9877                                  ;; sysconfig - get pointer to boot loader config data
  9878                                  ;
  9879                                  ; group: system
  9880                                  ;
  9881                                  ; ( -- ptr1 )
  9882                                  ;
  9883                                  ; ptr1: boot loader config data (32 bytes)
  9884                                  ;
  9885                                  
  9886                                  		bits 32
  9887                                  
  9888                                  prim_sysconfig:
  9889 00004469 A1[B4000000]            		mov eax,[boot.sysconfig]
  9890 0000446E E92B0B0000              		jmp pr_getptr_or_none
  9891                                  
  9892                                  
  9893                                  ;; 64bit - test if we run on a 64-bit machine
  9894                                  ;
  9895                                  ; group: system
  9896                                  ;
  9897                                  ; ( -- int1 )
  9898                                  ;
  9899                                  ; int1 = 1: 64-bit architecture
  9900                                  ;
  9901                                  
  9902                                  		bits 32
  9903                                  
  9904                                  prim_64bit:
  9905 00004473 E8262A0000              		call chk_64bit
  9906 00004478 19C0                    		sbb eax,eax
  9907 0000447A 40                      		inc eax
  9908 0000447B E9280B0000              		jmp pr_getint
  9909                                  
  9910                                  
  9911                                  ;; inbyte - get byte from i/o port
  9912                                  ;
  9913                                  ; group: system
  9914                                  ;
  9915                                  ; ( int1 -- int2 )
  9916                                  ;
  9917                                  ; int2: byte from port int1
  9918                                  ;
  9919                                  
  9920                                  		bits 32
  9921                                  
  9922                                  prim_inbyte:
  9923 00004480 B201                    		mov dl,t_int
  9924 00004482 E832ECFFFF              		call get_1arg
  9925 00004487 720E                    		jc prim_inbyte_90
  9926 00004489 89C2                    		mov edx,eax
  9927 0000448B 31C0                    		xor eax,eax
  9928 0000448D EC                      		in al,dx
  9929 0000448E B201                    		mov dl,t_int
  9930 00004490 31C9                    		xor ecx,ecx
  9931 00004492 E8D7D4FFFF              		call set_pstack_tos
  9932                                  prim_inbyte_90:
  9933 00004497 C3                      		ret
  9934                                  
  9935                                  
  9936                                  ;; outbyte - write byte to i/o port 
  9937                                  ;
  9938                                  ; group: system
  9939                                  ;
  9940                                  ; ( int1 int2 -- )
  9941                                  ;
  9942                                  ; Write byte int2 to port int1.
  9943                                  ;
  9944                                  
  9945                                  		bits 32
  9946                                  
  9947                                  prim_outbyte:
  9948 00004498 66BA0101                		mov dx,t_int + (t_int << 8)
  9949 0000449C E83FECFFFF              		call get_2args
  9950 000044A1 720A                    		jc prim_outbyte_90
  9951 000044A3 89CA                    		mov edx,ecx
  9952 000044A5 EE                      		out dx,al
  9953 000044A6 832D[C4000000]02        		sub dword [pstack.ptr],2
  9954                                  prim_outbyte_90:
  9955 000044AD C3                      		ret
  9956                                  
  9957                                  
  9958                                  ;; getbyte - get byte from memory
  9959                                  ;
  9960                                  ; group: system
  9961                                  ;
  9962                                  ; ( ptr1 -- int1 )
  9963                                  ;
  9964                                  ; int1: byte at ptr1
  9965                                  ;
  9966                                  
  9967                                  		bits 32
  9968                                  
  9969                                  prim_getbyte:
  9970 000044AE B20C                    		mov dl,t_ptr
  9971 000044B0 E804ECFFFF              		call get_1arg
  9972 000044B5 720D                    		jc prim_getbyte_90
  9973 000044B7 260FB600                		movzx eax,byte [es:eax]
  9974 000044BB B201                    		mov dl,t_int
  9975 000044BD 31C9                    		xor ecx,ecx
  9976 000044BF E8AAD4FFFF              		call set_pstack_tos
  9977                                  prim_getbyte_90:
  9978 000044C4 C3                      		ret
  9979                                  
  9980                                  
  9981                                  ;; putbyte - write byte to memory 
  9982                                  ;
  9983                                  ; group: system
  9984                                  ;
  9985                                  ; ( ptr1 int1 -- )
  9986                                  ;
  9987                                  ; Write byte int1 at ptr1.
  9988                                  ;
  9989                                  
  9990                                  		bits 32
  9991                                  
  9992                                  prim_putbyte:
  9993 000044C5 66BA010C                		mov dx,t_int + (t_ptr << 8)
  9994 000044C9 E812ECFFFF              		call get_2args
  9995 000044CE 720A                    		jc prim_putbyte_90
  9996 000044D0 268801                  		mov [es:ecx],al
  9997 000044D3 832D[C4000000]02        		sub dword [pstack.ptr],2
  9998                                  prim_putbyte_90:
  9999 000044DA C3                      		ret
 10000                                  
 10001                                  
 10002                                  ;; getword - get word from memory
 10003                                  ;
 10004                                  ; group: system
 10005                                  ;
 10006                                  ; ( ptr1 -- int1 )
 10007                                  ;
 10008                                  ; int1: word at ptr1
 10009                                  ;
 10010                                  
 10011                                  		bits 32
 10012                                  
 10013                                  prim_getword:
 10014 000044DB B20C                    		mov dl,t_ptr
 10015 000044DD E8D7EBFFFF              		call get_1arg
 10016 000044E2 720D                    		jc prim_getword_90
 10017 000044E4 260FB700                		movzx eax,word [es:eax]
 10018 000044E8 B201                    		mov dl,t_int
 10019 000044EA 31C9                    		xor ecx,ecx
 10020 000044EC E87DD4FFFF              		call set_pstack_tos
 10021                                  prim_getword_90:
 10022 000044F1 C3                      		ret
 10023                                  
 10024                                  
 10025                                  ;; putword - write word to memory 
 10026                                  ;
 10027                                  ; group: system
 10028                                  ;
 10029                                  ; ( ptr1 int1 -- )
 10030                                  ;
 10031                                  ; Write word int1 at ptr1.
 10032                                  ;
 10033                                  
 10034                                  		bits 32
 10035                                  
 10036                                  prim_putword:
 10037 000044F2 66BA010C                		mov dx,t_int + (t_ptr << 8)
 10038 000044F6 E8E5EBFFFF              		call get_2args
 10039 000044FB 720B                    		jc prim_putword_90
 10040 000044FD 26668901                		mov [es:ecx],ax
 10041 00004501 832D[C4000000]02        		sub dword [pstack.ptr],2
 10042                                  prim_putword_90:
 10043 00004508 C3                      		ret
 10044                                  
 10045                                  
 10046                                  ;; getdword - get dword from memory
 10047                                  ;
 10048                                  ; group: system
 10049                                  ;
 10050                                  ; ( ptr1 -- int1 )
 10051                                  ;
 10052                                  ; int1: dword at ptr1
 10053                                  ;
 10054                                  
 10055                                  		bits 32
 10056                                  
 10057                                  prim_getdword:
 10058 00004509 B20C                    		mov dl,t_ptr
 10059 0000450B E8A9EBFFFF              		call get_1arg
 10060 00004510 720C                    		jc prim_getdword_90
 10061 00004512 268B00                  		mov eax,[es:eax]
 10062 00004515 B201                    		mov dl,t_int
 10063 00004517 31C9                    		xor ecx,ecx
 10064 00004519 E850D4FFFF              		call set_pstack_tos
 10065                                  prim_getdword_90:
 10066 0000451E C3                      		ret
 10067                                  
 10068                                  
 10069                                  ;; putdword - write dword to memory 
 10070                                  ;
 10071                                  ; group: system
 10072                                  ;
 10073                                  ; ( ptr1 int1 -- )
 10074                                  ;
 10075                                  ; Write dword int1 at ptr1.
 10076                                  ;
 10077                                  
 10078                                  		bits 32
 10079                                  
 10080                                  prim_putdword:
 10081 0000451F 66BA010C                		mov dx,t_int + (t_ptr << 8)
 10082 00004523 E8B8EBFFFF              		call get_2args
 10083 00004528 720A                    		jc prim_putdword_90
 10084 0000452A 268901                  		mov [es:ecx],eax
 10085 0000452D 832D[C4000000]02        		sub dword [pstack.ptr],2
 10086                                  prim_putdword_90:
 10087 00004534 C3                      		ret
 10088                                  
 10089                                  
 10090                                  ;; findfile - load file
 10091                                  ;
 10092                                  ; group: mem
 10093                                  ;
 10094                                  ; ( str1 -- ptr1 )
 10095                                  ;
 10096                                  ; str1: file name
 10097                                  ; ptr1: buffer with file data
 10098                                  ;
 10099                                  ; Note: ptr1 may or may not have to be free'd using @free, depending on whether it is
 10100                                  ; actually loaded from file system or is part of the bootlogo archive. To be on the safe
 10101                                  ; side, always free it.
 10102                                  ;
 10103                                  ; To get the file length, use @length on ptr1.
 10104                                  ;
 10105                                  ; example
 10106                                  ;   "xxx.jpg" findfile length		% file size of "xxx.jpg"
 10107                                  ;
 10108                                  
 10109                                  		bits 32
 10110                                  
 10111                                  prim_findfile:
 10112 00004535 B204                    		mov dl,t_string
 10113 00004537 E87DEBFFFF              		call get_1arg
 10114 0000453C 7227                    		jc prim_findfile_90
 10115                                  prim_findfile_10:
 10116 0000453E 50                      		push eax
 10117 0000453F E86CDAFFFF              		call find_file
 10118 00004544 59                      		pop ecx
 10119 00004545 80FB01                  		cmp bl,1
 10120 00004548 74F4                    		jz prim_findfile_10		; symlink
 10121 0000454A B20C                    		mov dl,t_ptr
 10122 0000454C 09C0                    		or eax,eax
 10123 0000454E 750E                    		jnz prim_findfile_20
 10124 00004550 91                      		xchg eax,ecx
 10125 00004551 E8992B0000              		call find_file_ext
 10126 00004556 B20C                    		mov dl,t_ptr
 10127 00004558 09C0                    		or eax,eax
 10128 0000455A 7502                    		jnz prim_findfile_20
 10129 0000455C B200                    		mov dl,t_none
 10130                                  prim_findfile_20:
 10131 0000455E 31C9                    		xor ecx,ecx
 10132 00004560 E809D4FFFF              		call set_pstack_tos
 10133                                  prim_findfile_90:
 10134 00004565 C3                      		ret
 10135                                  
 10136                                  
 10137                                  ;; filesize - get file size
 10138                                  ;
 10139                                  ; group: mem
 10140                                  ;
 10141                                  ; ( str1 -- int1 )
 10142                                  ;
 10143                                  ; str1: file name
 10144                                  ; int1: file length (or .undef if not found)
 10145                                  ;
 10146                                  ; Note: Unlike @findfile, it doesn't load the file.
 10147                                  ;
 10148                                  ; example
 10149                                  ;   "xxx.jpg" filesize		% file size of "xxx.jpg"
 10150                                  ;
 10151                                  
 10152                                  		bits 32
 10153                                  
 10154                                  prim_filesize:
 10155 00004566 B204                    		mov dl,t_string
 10156 00004568 E84CEBFFFF              		call get_1arg
 10157 0000456D 722E                    		jc prim_filesize_90
 10158                                  prim_filesize_10:
 10159 0000456F 50                      		push eax
 10160 00004570 E83BDAFFFF              		call find_file
 10161 00004575 59                      		pop ecx
 10162 00004576 80FB01                  		cmp bl,1
 10163 00004579 74F4                    		jz prim_filesize_10		; symlink
 10164 0000457B 09C0                    		or eax,eax
 10165 0000457D 7409                    		jz prim_filesize_50
 10166 0000457F E8DCD8FFFF              		call find_mem_size
 10167                                  prim_filesize_40:
 10168 00004584 B201                    		mov dl,t_int
 10169 00004586 EB0E                    		jmp prim_filesize_70
 10170                                  prim_filesize_50:
 10171 00004588 91                      		xchg eax,ecx
 10172 00004589 E81B2C0000              		call file_size_ext
 10173 0000458E 83F8FF                  		cmp eax,-1
 10174 00004591 75F1                    		jnz prim_filesize_40
 10175 00004593 40                      		inc eax
 10176 00004594 B200                    		mov dl,t_none
 10177                                  prim_filesize_70:
 10178 00004596 31C9                    		xor ecx,ecx
 10179 00004598 E8D1D3FFFF              		call set_pstack_tos
 10180                                  prim_filesize_90:
 10181 0000459D C3                      		ret
 10182                                  
 10183                                  
 10184                                  ;; getcwd - get current working directory
 10185                                  ;
 10186                                  ; group: mem
 10187                                  ;
 10188                                  ; ( -- str1 )
 10189                                  ;
 10190                                  ; str1: file name
 10191                                  ;
 10192                                  ; example
 10193                                  ;   getcwd show		% print working directory
 10194                                  ;
 10195                                  
 10196                                  		bits 32
 10197                                  
 10198                                  prim_getcwd:
 10199 0000459E A1[00020000]            		mov eax,[fname.cwd]
 10200 000045A3 B204                    		mov dl,t_string
 10201 000045A5 E9000A0000              		jmp pr_getobj
 10202                                  
 10203                                  
 10204                                  ;; chdir - set current working directory
 10205                                  ;
 10206                                  ; group: mem
 10207                                  ;
 10208                                  ; ( str1 -- )
 10209                                  ;
 10210                                  ; str1: file name
 10211                                  ;
 10212                                  ; example
 10213                                  ;   "/foo/bar" chdir		% set working directory
 10214                                  ;
 10215                                  
 10216                                  		bits 32
 10217                                  
 10218                                  prim_chdir:
 10219 000045AA B204                    		mov dl,t_string
 10220 000045AC E808EBFFFF              		call get_1arg
 10221 000045B1 7214                    		jc prim_chdir_90
 10222                                  
 10223 000045B3 E8222B0000              		call chdir
 10224 000045B8 7208                    		jc prim_chdir_60
 10225                                  
 10226 000045BA FF0D[C4000000]          		dec dword [pstack.ptr]
 10227 000045C0 EB05                    		jmp prim_chdir_90
 10228                                  
 10229                                  prim_chdir_60:
 10230 000045C2 66BD0F00                		mov bp,pserr_invalid_data
 10231                                  prim_chdir_70:
 10232 000045C6 F9                      		stc
 10233                                  prim_chdir_90:
 10234 000045C7 C3                      		ret
 10235                                  
 10236                                  
 10237                                  ;; mount - re-read filesystem meta data
 10238                                  ;
 10239                                  ; group: system
 10240                                  ;
 10241                                  ; ( -- int1 )
 10242                                  ;
 10243                                  ; int1: error
 10244                                  ;
 10245                                  ; example
 10246                                  ;   mount pop	% re-read iso fs after cdrom change
 10247                                  ;
 10248                                  
 10249                                  		bits 32
 10250                                  
 10251                                  prim_mount:
 10252 000045C8 B006                    		mov al,6
 10253 000045CA E8B2D1FFFF              		call gfx_cb			; (re)mount
 10254 000045CF B201                    		mov dl,t_int
 10255 000045D1 0FB6C0                  		movzx eax,al
 10256 000045D4 E9D1090000              		jmp pr_getobj
 10257                                  
 10258                                  
 10259                                  ;; _readsector - read sector
 10260                                  ;
 10261                                  ; group: system
 10262                                  ;
 10263                                  ; ( int1 -- ptr1 )
 10264                                  ;
 10265                                  ; int1: sector number
 10266                                  ; ptr1: sector data
 10267                                  ;
 10268                                  ; Note: internal function. Returns pointer to static buffer. Does not return
 10269                                  ; on error. Returns .undef if function is not implemented.
 10270                                  ;
 10271                                  
 10272                                  		bits 32
 10273                                  
 10274                                  prim__readsector:
 10275 000045D9 B201                    		mov dl,t_int
 10276 000045DB E8D9EAFFFF              		call get_1arg
 10277 000045E0 721E                    		jc prim__readsector_90
 10278                                  
 10279 000045E2 89C2                    		mov edx,eax
 10280 000045E4 B005                    		mov al,5
 10281 000045E6 E896D1FFFF              		call gfx_cb			; read sector (nr = edx)
 10282 000045EB 08C0                    		or al,al
 10283 000045ED 7406                    		jz prim__readsector_50
 10284 000045EF B200                    		mov dl,t_none
 10285 000045F1 31C0                    		xor eax,eax
 10286 000045F3 EB04                    		jmp prim__readsector_80
 10287                                  prim__readsector_50:
 10288 000045F5 89D0                    		mov eax,edx
 10289 000045F7 B20C                    		mov dl,t_ptr
 10290                                  prim__readsector_80:
 10291 000045F9 31C9                    		xor ecx,ecx
 10292 000045FB E86ED3FFFF              		call set_pstack_tos
 10293                                  prim__readsector_90:
 10294 00004600 C3                      		ret
 10295                                  
 10296                                  
 10297                                  ;; setmode - set video mode
 10298                                  ;
 10299                                  ; group: gfx.screen
 10300                                  ;
 10301                                  ; ( int1 -- bool1 )
 10302                                  ;
 10303                                  ; int1: VESA or VGA mode number
 10304                                  ; bool1: true = mode is set, false = failed
 10305                                  ;
 10306                                  ; Note: if video mode setting fails, the old mode is restored, but the
 10307                                  ; screen contents is undefined.
 10308                                  ;
 10309                                  
 10310                                  		bits 32
 10311                                  
 10312                                  prim_setmode:
 10313 00004601 B201                    		mov dl,t_int
 10314 00004603 E8B1EAFFFF              		call get_1arg
 10315 00004608 740C                    		jz prim_setmode_30
 10316 0000460A 80FA00                  		cmp dl,t_none
 10317 0000460D F9                      		stc
 10318 0000460E 7559                    		jnz prim_setmode_90
 10319 00004610 31C0                    		xor eax,eax
 10320 00004612 89C1                    		mov ecx,eax
 10321 00004614 EB4C                    		jmp prim_setmode_80
 10322                                  prim_setmode_30:
 10323 00004616 668705[67010000]        		xchg [gfx_mode],ax
 10324 0000461D 50                      		push eax
 10325 0000461E E824DAFFFF              		call set_mode
 10326 00004623 58                      		pop eax
 10327 00004624 730D                    		jnc prim_setmode_60
 10328 00004626 668705[67010000]        		xchg [gfx_mode],ax
 10329 0000462D E815DAFFFF              		call set_mode
 10330 00004632 F9                      		stc
 10331                                  prim_setmode_60:
 10332 00004633 19C0                    		sbb eax,eax
 10333 00004635 40                      		inc eax
 10334                                  
 10335 00004636 668B0D[E5000000]        		mov cx,[screen_width]
 10336 0000463D 66890D[85010000]        		mov [clip_r],cx
 10337                                  
 10338 00004644 668B0D[E9000000]        		mov cx,[screen_vheight]
 10339 0000464B 66890D[89010000]        		mov [clip_b],cx
 10340                                  
 10341 00004652 31C9                    		xor ecx,ecx
 10342                                  
 10343 00004654 66890D[83010000]        		mov [clip_l],cx
 10344 0000465B 66890D[87010000]        		mov [clip_t],cx
 10345                                  
 10346                                  prim_setmode_80:
 10347 00004662 B203                    		mov dl,t_bool
 10348 00004664 E805D3FFFF              		call set_pstack_tos
 10349                                  prim_setmode_90:
 10350 00004669 C3                      		ret
 10351                                  
 10352                                  
 10353                                  ;; currentmode - current video mode
 10354                                  ;
 10355                                  ; group: gfx.screen
 10356                                  ;
 10357                                  ; ( -- int1 )
 10358                                  ;
 10359                                  ; int1: current video mode number
 10360                                  ;
 10361                                  
 10362                                  		bits 32
 10363                                  
 10364                                  prim_currentmode:
 10365 0000466A 0FB705[67010000]        		movzx eax,word [gfx_mode]
 10366 00004671 E932090000              		jmp pr_getint
 10367                                  
 10368                                  
 10369                                  ;; videomodes - video mode list length
 10370                                  ;
 10371                                  ; group: gfx.screen
 10372                                  ;
 10373                                  ; ( -- int1 )
 10374                                  ;
 10375                                  ; int1: video mode list length (always >= 1)
 10376                                  ;
 10377                                  
 10378                                  		bits 32
 10379                                  
 10380                                  prim_videomodes:
 10381 00004676 8B35[60000000]          		mov esi,[vbe_mode_list]
 10382 0000467C 31C0                    		xor eax,eax
 10383                                  
 10384                                  prim_videomodes_20:
 10385 0000467E 83C602                  		add esi,2
 10386 00004681 40                      		inc eax
 10387 00004682 3D00100000              		cmp eax,1000h		; don't overdo
 10388 00004687 730A                    		jae prim_videomodes_30
 10389 00004689 2666837EFEFF            		cmp word [es:esi-2],0xffff
 10390 0000468F 75ED                    		jnz prim_videomodes_20
 10391 00004691 EB02                    		jmp prim_videomodes_40
 10392                                  prim_videomodes_30:
 10393 00004693 31C0                    		xor eax,eax
 10394                                  prim_videomodes_40:
 10395 00004695 E90E090000              		jmp pr_getint
 10396                                  
 10397                                  
 10398                                  ;; videomodeinfo - return video mode info
 10399                                  ;
 10400                                  ; group: gfx.screen
 10401                                  ;
 10402                                  ; ( int1 -- int2 int3 int4 int5 )
 10403                                  ;
 10404                                  ; int1: mode index
 10405                                  ; int2, int3: width, height
 10406                                  ; int4: color bits
 10407                                  ; int5: mode number (bit 14: framebuffer mode) or .undef
 10408                                  ;
 10409                                  ; example
 10410                                  ;   2 videomodeinfo
 10411                                  ;
 10412                                  
 10413                                  		bits 32
 10414                                  
 10415                                  prim_videomodeinfo:
 10416 0000469A B201                    		mov dl,t_int
 10417 0000469C E818EAFFFF              		call get_1arg
 10418 000046A1 0F8227010000            		jc prim_vmi_90
 10419                                  
 10420 000046A7 8B0D[C4000000]          		mov ecx,[pstack.ptr]
 10421 000046AD 83C103                  		add ecx,3
 10422 000046B0 390D[C0000000]          		cmp [pstack.size],ecx
 10423 000046B6 66BD0400                		mov bp,pserr_pstack_overflow
 10424 000046BA 0F820E010000            		jb prim_vmi_90
 10425 000046C0 890D[C4000000]          		mov [pstack.ptr],ecx
 10426                                  
 10427 000046C6 3D00010000              		cmp eax,100h
 10428 000046CB 7204                    		jb prim_vmi_10
 10429 000046CD 66B8FF00                		mov ax,0ffh
 10430                                  prim_vmi_10:
 10431 000046D1 01C0                    		add eax,eax
 10432 000046D3 0305[60000000]          		add eax,[vbe_mode_list]
 10433 000046D9 260FB708                		movzx ecx,word [es:eax]
 10434 000046DD 09C9                    		or ecx,ecx
 10435 000046DF 0F84B4000000            		jz prim_vmi_60
 10436 000046E5 83F9FF                  		cmp ecx,-1
 10437 000046E8 0F84AB000000            		jz prim_vmi_60
 10438                                  
 10439 000046EE A1[5C000000]            		mov eax,[vbe_buffer]
 10440 000046F3 89C7                    		mov edi,eax
 10441 000046F5 C1E804                  		shr eax,4
 10442 000046F8 66A3[0E0A0000]          		mov [rm_seg.es],ax
 10443 000046FE 83E70F                  		and edi,0fh
 10444                                  
 10445 00004701 66B8014F                		mov ax,4f01h
 10446 00004705 51                      		push ecx
 10447 00004706 CD10                    		int 10h
 10448 00004708 59                      		pop ecx
 10449                                  
 10450 00004709 6683F84F                		cmp ax,4fh
 10451 0000470D 0F8586000000            		jnz prim_vmi_60
 10452                                  
 10453 00004713 8B3D[5C000000]          		mov edi,[vbe_buffer]
 10454                                  
 10455 00004719 26F60701                		test byte [es:edi],1		; mode supported?
 10456 0000471D 747A                    		jz prim_vmi_60
 10457                                  
 10458 0000471F 89C8                    		mov eax,ecx
 10459 00004721 6625FFBF                		and ax,~(1 << 14)
 10460 00004725 26837F2800              		cmp dword [es:edi+28h],0	; framebuffer start
 10461 0000472A 7404                    		jz prim_vmi_20
 10462 0000472C 660D0040                		or ax,1 << 14
 10463                                  prim_vmi_20:
 10464 00004730 B201                    		mov dl,t_int
 10465 00004732 31C9                    		xor ecx,ecx
 10466 00004734 57                      		push edi
 10467 00004735 E834D2FFFF              		call set_pstack_tos
 10468 0000473A 5F                      		pop edi
 10469                                  
 10470 0000473B 260FB74712              		movzx eax,word [es:edi+12h]	; width
 10471 00004740 B201                    		mov dl,t_int
 10472 00004742 B903000000              		mov ecx,3
 10473 00004747 57                      		push edi
 10474 00004748 E821D2FFFF              		call set_pstack_tos
 10475 0000474D 5F                      		pop edi
 10476                                  
 10477 0000474E 260FB74714              		movzx eax,word [es:edi+14h]	; height
 10478 00004753 B201                    		mov dl,t_int
 10479 00004755 B902000000              		mov ecx,2
 10480 0000475A 57                      		push edi
 10481 0000475B E80ED2FFFF              		call set_pstack_tos
 10482 00004760 5F                      		pop edi
 10483                                  
 10484 00004761 268A571B                		mov dl,[es:edi+1bh]		; color mode (aka memory model)
 10485 00004765 268A7719                		mov dh,[es:edi+19h]		; color depth
 10486                                  
 10487 00004769 80FA06                  		cmp dl,6			; direct color
 10488 0000476C 7513                    		jnz prim_vmi_30
 10489 0000476E 80FE20                  		cmp dh,32
 10490 00004771 7415                    		jz prim_vmi_40
 10491 00004773 268A771F                		mov dh,[es:edi+1fh]		; red
 10492 00004777 26027721                		add dh,[es:edi+21h]		; green
 10493 0000477B 26027723                		add dh,[es:edi+23h]		; blue
 10494 0000477F EB07                    		jmp prim_vmi_40
 10495                                  prim_vmi_30:
 10496 00004781 80FA04                  		cmp dl,4			; PL8
 10497 00004784 7513                    		jnz prim_vmi_60
 10498 00004786 B608                    		mov dh,8
 10499                                  prim_vmi_40:
 10500 00004788 0FB6C6                  		movzx eax,dh
 10501                                  
 10502 0000478B B201                    		mov dl,t_int
 10503 0000478D B901000000              		mov ecx,1
 10504 00004792 E8D7D1FFFF              		call set_pstack_tos
 10505 00004797 EB35                    		jmp prim_vmi_90
 10506                                  
 10507                                  prim_vmi_60:
 10508                                  		; no mode
 10509 00004799 31C0                    		xor eax,eax
 10510 0000479B B201                    		mov dl,t_int
 10511 0000479D B903000000              		mov ecx,3
 10512 000047A2 E8C7D1FFFF              		call set_pstack_tos
 10513 000047A7 31C0                    		xor eax,eax
 10514 000047A9 B201                    		mov dl,t_int
 10515 000047AB B902000000              		mov ecx,2
 10516 000047B0 E8B9D1FFFF              		call set_pstack_tos
 10517 000047B5 31C0                    		xor eax,eax
 10518 000047B7 B201                    		mov dl,t_int
 10519 000047B9 B901000000              		mov ecx,1
 10520 000047BE E8ABD1FFFF              		call set_pstack_tos
 10521 000047C3 31C0                    		xor eax,eax
 10522 000047C5 B200                    		mov dl,t_none
 10523 000047C7 31C9                    		xor ecx,ecx
 10524 000047C9 E8A0D1FFFF              		call set_pstack_tos
 10525                                  
 10526                                  prim_vmi_90:
 10527 000047CE C3                      		ret
 10528                                  
 10529                                  
 10530                                  ;; sysinfo - return system info
 10531                                  ;
 10532                                  ; group: gfx.screen
 10533                                  ;
 10534                                  ; ( int1 -- obj1 )
 10535                                  ;
 10536                                  ; int1: info type
 10537                                  ; obj1: info (or .undef)
 10538                                  ;
 10539                                  ; example
 10540                                  ;   0 sysinfo		% video mem size in kb
 10541                                  ;   1 sysinfo		% gfx card oem string
 10542                                  ;   2 sysinfo		% gfx card vendor string
 10543                                  ;   3 sysinfo		% gfx card product string
 10544                                  ;   4 sysinfo		% gfx card revision string
 10545                                  ;
 10546                                  
 10547                                  		bits 32
 10548                                  
 10549                                  prim_sysinfo:
 10550 000047CF B201                    		mov dl,t_int
 10551 000047D1 E8E3E8FFFF              		call get_1arg
 10552 000047D6 7219                    		jc prim_si_90
 10553                                  
 10554 000047D8 3D00010000              		cmp eax,100h
 10555 000047DD 7307                    		jae prim_si_20
 10556 000047DF E88E310000              		call videoinfo
 10557 000047E4 EB04                    		jmp prim_si_80
 10558                                  prim_si_20:
 10559                                  
 10560                                  
 10561                                  
 10562                                  prim_si_70:
 10563 000047E6 B200                    		mov dl,t_none
 10564 000047E8 31C0                    		xor eax,eax
 10565                                  prim_si_80:
 10566 000047EA 31C9                    		xor ecx,ecx
 10567 000047EC E87DD1FFFF              		call set_pstack_tos
 10568                                  prim_si_90:
 10569 000047F1 C3                      		ret
 10570                                  
 10571                                  
 10572                                  ;; colorbits - current pixel size
 10573                                  ;
 10574                                  ; group: gfx.screen
 10575                                  ;
 10576                                  ; ( -- int1 )
 10577                                  ;
 10578                                  ; int1: pixel size in bits
 10579                                  ;
 10580                                  
 10581                                  		bits 32
 10582                                  
 10583                                  prim_colorbits:
 10584 000047F2 0FB605[6A010000]        		movzx eax,byte [color_bits]
 10585 000047F9 E9AA070000              		jmp pr_getint
 10586                                  
 10587                                  
 10588                                  ;; eject  - eject CD-ROM
 10589                                  ;
 10590                                  ; group: system
 10591                                  ;
 10592                                  ; ( int1 -- int2 )
 10593                                  ;
 10594                                  ; int1: BIOS drive id
 10595                                  ; int2: BIOS error code
 10596                                  ;
 10597                                  ; Note: does not work with all BIOSes. (With very few, actually.)
 10598                                  ;
 10599                                  
 10600                                  		bits 32
 10601                                  
 10602                                  prim_eject:
 10603 000047FE B201                    		mov dl,t_int
 10604 00004800 E8B4E8FFFF              		call get_1arg
 10605 00004805 7214                    		jc prim_eject_90
 10606 00004807 88C2                    		mov dl,al
 10607 00004809 66B80046                		mov ax,4600h
 10608 0000480D CD13                    		int 13h
 10609 0000480F 31C9                    		xor ecx,ecx
 10610 00004811 B201                    		mov dl,t_int
 10611 00004813 0FB6C4                  		movzx eax,ah
 10612 00004816 E853D1FFFF              		call set_pstack_tos
 10613                                  prim_eject_90:
 10614 0000481B C3                      		ret
 10615                                  
 10616                                  
 10617                                  ;; poweroff  - switch computer off
 10618                                  ;
 10619                                  ; group: system
 10620                                  ;
 10621                                  ; ( -- )
 10622                                  ;
 10623                                  ; Note: uses APM, not ACPI.
 10624                                  ;
 10625                                  
 10626                                  		bits 32
 10627                                  
 10628                                  prim_poweroff:
 10629 0000481C 66B80053                		mov ax,5300h
 10630 00004820 31DB                    		xor ebx,ebx
 10631 00004822 CD15                    		int 15h
 10632 00004824 722E                    		jc prim_poweroff_90
 10633 00004826 66B80453                		mov ax,5304h
 10634 0000482A 31DB                    		xor ebx,ebx
 10635 0000482C CD15                    		int 15h
 10636 0000482E 66B80153                		mov ax,5301h
 10637 00004832 31DB                    		xor ebx,ebx
 10638 00004834 CD15                    		int 15h
 10639 00004836 721C                    		jc prim_poweroff_90
 10640 00004838 66B80E53                		mov ax,530eh
 10641 0000483C 31DB                    		xor ebx,ebx
 10642 0000483E 66B90201                		mov cx,102h
 10643 00004842 CD15                    		int 15h
 10644 00004844 720E                    		jc prim_poweroff_90
 10645 00004846 66B80753                		mov ax,5307h
 10646 0000484A 66B90300                		mov cx,3
 10647 0000484E 66BB0100                		mov bx,1
 10648 00004852 CD15                    		int 15h
 10649                                  prim_poweroff_90:
 10650 00004854 F8                      		clc
 10651 00004855 C3                      		ret
 10652                                  
 10653                                  
 10654                                  ;; reboot  - reboot computer
 10655                                  ;
 10656                                  ; group: system
 10657                                  ;
 10658                                  ; ( -- )
 10659                                  ;
 10660                                  
 10661                                  		bits 32
 10662                                  
 10663                                  prim_reboot:
 10664 00004856 2666C7057204000034-     		mov word [es:472h],1234h
 10665 0000485F 12                 
 10666                                  		pm_leave
 10667                              <1> %%j_pm_1:
 10668 00004860 E805340000          <1>  call switch_to_rm
 10669                              <1> %%j_pm_2:
 10670                              <1>  %if %%j_pm_2 - %%j_pm_1 != 5
 10671                              <1>  %error "pm_leave: not in 32 bit mode"
 10672                              <1>  %endif
 10673                              <1> 
 10674                              <1>  bits 16
 10675 00004865 EA0000FFFF              		jmp 0ffffh:0
 10676                                  		pm_enter
 10677                              <1> %%j_pm_1:
 10678 0000486A E87533              <1>  call switch_to_pm
 10679                              <1> %%j_pm_2:
 10680                              <1>  %if %%j_pm_2 - %%j_pm_1 != 3
 10681                              <1>  %error "pm_enter: not in 16 bit mode"
 10682                              <1>  %endif
 10683                              <1> 
 10684                              <1>  bits 32
 10685 0000486D F8                      		clc
 10686 0000486E C3                      		ret
 10687                                  
 10688                                  
 10689                                  ;; strstr - find string in string
 10690                                  ;
 10691                                  ; group: string
 10692                                  ;
 10693                                  ; ( str1 str2 -- int1 )
 10694                                  ;
 10695                                  ; Search for str2 in str1.
 10696                                  ; int1: offset of str2 in str1 + 1 if found; otherwise 0.
 10697                                  ;
 10698                                  ; Note: a bit strange, I know.
 10699                                  ;
 10700                                  ; example
 10701                                  ;   "abcd" "c" strstr		% 3 (not 2)
 10702                                  ;
 10703                                  
 10704                                  		bits 32
 10705                                  
 10706                                  prim_strstr:
 10707 0000486F 66BA0404                		mov dx,t_string + (t_string << 8)
 10708 00004873 E868E8FFFF              		call get_2args
 10709 00004878 7238                    		jc prim_strstr_90
 10710                                  
 10711 0000487A 31DB                    		xor ebx,ebx
 10712                                  
 10713                                  prim_strstr_20:
 10714 0000487C 50                      		push eax
 10715 0000487D 51                      		push ecx
 10716                                  
 10717 0000487E 53                      		push ebx
 10718 0000487F E820EEFFFF              		call pcmp_str
 10719 00004884 5B                      		pop ebx
 10720                                  
 10721 00004885 7416                    		jz prim_strstr_50
 10722                                  
 10723 00004887 08C0                    		or al,al
 10724 00004889 7504                    		jnz prim_strstr_30
 10725                                  
 10726 0000488B 09D2                    		or edx,edx
 10727 0000488D 750E                    		jnz prim_strstr_50
 10728                                  
 10729                                  prim_strstr_30:
 10730                                  
 10731 0000488F 08C9                    		or cl,cl
 10732 00004891 7406                    		jz prim_strstr_40
 10733                                  		
 10734 00004893 59                      		pop ecx
 10735 00004894 58                      		pop eax
 10736                                  
 10737 00004895 41                      		inc ecx
 10738 00004896 43                      		inc ebx
 10739 00004897 EBE3                    		jmp prim_strstr_20
 10740                                  
 10741                                  prim_strstr_40:
 10742 00004899 31DB                    		xor ebx,ebx
 10743 0000489B EB01                    		jmp prim_strstr_60
 10744                                  prim_strstr_50:
 10745 0000489D 43                      		inc ebx
 10746                                  prim_strstr_60:
 10747 0000489E 83C408                  		add esp,2*4
 10748 000048A1 89D8                    		mov eax,ebx
 10749 000048A3 FF0D[C4000000]          		dec dword [pstack.ptr]
 10750 000048A9 31C9                    		xor ecx,ecx
 10751 000048AB B201                    		mov dl,t_int
 10752 000048AD E8BCD0FFFF              		call set_pstack_tos
 10753                                  
 10754                                  prim_strstr_90:
 10755 000048B2 C3                      		ret
 10756                                  
 10757                                  
 10758                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 10759                                  ; sound primitives
 10760                                  
 10761                                  ;; sound.getvolume - current sound volume
 10762                                  ;
 10763                                  ; group: sound
 10764                                  ;
 10765                                  ; ( -- int1 )
 10766                                  ;
 10767                                  ; int1: volume (0 .. 100)
 10768                                  ;
 10769                                  
 10770                                  		bits 32
 10771                                  
 10772                                  prim_soundgetvolume:
 10773 000048B3 A1[C4000000]            		mov eax,[pstack.ptr]
 10774 000048B8 40                      		inc eax
 10775 000048B9 3905[C0000000]          		cmp [pstack.size],eax
 10776 000048BF 66BD0400                		mov bp,pserr_pstack_overflow
 10777 000048C3 7215                    		jb prim_sgv_90
 10778 000048C5 A3[C4000000]            		mov [pstack.ptr],eax
 10779 000048CA B201                    		mov dl,t_int
 10780 000048CC 0FB605[2C090000]        		movzx eax,byte [sound_vol]
 10781 000048D3 31C9                    		xor ecx,ecx
 10782 000048D5 E894D0FFFF              		call set_pstack_tos
 10783                                  prim_sgv_90:
 10784 000048DA C3                      		ret
 10785                                  
 10786                                  
 10787                                  ;; sound.setvolume - set sound volume
 10788                                  ;
 10789                                  ; group: sound
 10790                                  ;
 10791                                  ; ( int1 -- )
 10792                                  ;
 10793                                  ; int1: volume (0 .. 100)
 10794                                  ;
 10795                                  
 10796                                  		bits 32
 10797                                  
 10798                                  prim_soundsetvolume:
 10799 000048DB B201                    		mov dl,t_int
 10800 000048DD E8D7E7FFFF              		call get_1arg
 10801 000048E2 7227                    		jc prim_ssv_90
 10802 000048E4 FF0D[C4000000]          		dec dword [pstack.ptr]
 10803 000048EA 09C0                    		or eax,eax
 10804 000048EC 7902                    		jns prim_ssv_30
 10805 000048EE 31C0                    		xor eax,eax
 10806                                  prim_ssv_30:
 10807 000048F0 83F864                  		cmp eax,100
 10808 000048F3 7C05                    		jl prim_ssv_50
 10809 000048F5 B864000000              		mov eax,100
 10810                                  prim_ssv_50:
 10811 000048FA 09C0                    		or eax,eax
 10812 000048FC 7902                    		jns prim_ssv_60
 10813 000048FE 31C0                    		xor eax,eax
 10814                                  prim_ssv_60:
 10815 00004900 A2[2C090000]            		mov [sound_vol],al
 10816 00004905 E8A1240000              		call mod_setvolume
 10817 0000490A F8                      		clc
 10818                                  prim_ssv_90:
 10819 0000490B C3                      		ret
 10820                                  
 10821                                  
 10822                                  ;; sound.getsamplerate - current sample rate
 10823                                  ;
 10824                                  ; group: sound
 10825                                  ;
 10826                                  ; ( -- int1 )
 10827                                  ;
 10828                                  ; int1: sample rate
 10829                                  ;
 10830                                  
 10831                                  		bits 32
 10832                                  
 10833                                  prim_soundgetsamplerate:
 10834 0000490C A1[C4000000]            		mov eax,[pstack.ptr]
 10835 00004911 40                      		inc eax
 10836 00004912 3905[C0000000]          		cmp [pstack.size],eax
 10837 00004918 66BD0400                		mov bp,pserr_pstack_overflow
 10838 0000491C 7213                    		jb prim_sgsr_90
 10839 0000491E A3[C4000000]            		mov [pstack.ptr],eax
 10840 00004923 B201                    		mov dl,t_int
 10841 00004925 A1[31090000]            		mov eax,[sound_sample]
 10842 0000492A 31C9                    		xor ecx,ecx
 10843 0000492C E83DD0FFFF              		call set_pstack_tos
 10844                                  prim_sgsr_90:
 10845 00004931 C3                      		ret
 10846                                  
 10847                                  
 10848                                  ;; sound.setsamplerate - set sample rate
 10849                                  ;
 10850                                  ; group: sound
 10851                                  ;
 10852                                  ; (int1 -- )
 10853                                  ;
 10854                                  ; int1: sample rate
 10855                                  ;
 10856                                  
 10857                                  		bits 32
 10858                                  
 10859                                  prim_soundsetsamplerate:
 10860 00004932 B201                    		mov dl,t_int
 10861 00004934 E880E7FFFF              		call get_1arg
 10862 00004939 7213                    		jc prim_sssr_90
 10863 0000493B FF0D[C4000000]          		dec dword [pstack.ptr]
 10864 00004941 50                      		push eax
 10865 00004942 E895220000              		call sound_init
 10866 00004947 58                      		pop eax
 10867 00004948 E8AA230000              		call sound_setsample
 10868 0000494D F8                      		clc
 10869                                  prim_sssr_90:
 10870 0000494E C3                      		ret
 10871                                  
 10872                                  
 10873                                  ;; sound.play - play sound
 10874                                  ;
 10875                                  ; group: sound
 10876                                  ;
 10877                                  ; ( -- )
 10878                                  ;
 10879                                  ; Note: obsolete. Sounds are played using the PC speaker.
 10880                                  ;
 10881                                  
 10882                                  		bits 32
 10883                                  
 10884                                  prim_soundplay:
 10885 0000494F E888220000              		call sound_init
 10886 00004954 7200                    		jc prim_splay_80
 10887                                  prim_splay_80:
 10888 00004956 F8                      		clc
 10889                                  prim_splay_90:
 10890 00004957 C3                      		ret
 10891                                  
 10892                                  
 10893                                  ;; sound.done - turn off sound subsystem
 10894                                  ;
 10895                                  ; group: sound
 10896                                  ;
 10897                                  ; ( -- )
 10898                                  ;
 10899                                  
 10900                                  		bits 32
 10901                                  
 10902                                  prim_sounddone:
 10903 00004958 E824230000              		call sound_done
 10904 0000495D F8                      		clc
 10905 0000495E C3                      		ret
 10906                                  
 10907                                  
 10908                                  ;; mod.load - assign mod file to player
 10909                                  ;
 10910                                  ; group: sound
 10911                                  ;
 10912                                  ; ( int1 ptr1 -- )
 10913                                  ;
 10914                                  ; int1: player
 10915                                  ; ptr1: mod file
 10916                                  ;
 10917                                  
 10918                                  		bits 32
 10919                                  
 10920                                  prim_modload:
 10921 0000495F 66BA0C01                		mov dx,t_ptr + (t_int << 8)
 10922 00004963 E878E7FFFF              		call get_2args
 10923 00004968 7219                    		jc prim_modload_90
 10924 0000496A 832D[C4000000]02        		sub dword [pstack.ptr],2
 10925 00004971 91                      		xchg eax,ecx
 10926                                  
 10927                                  		; ecx mod file
 10928                                  		; eax player
 10929                                  
 10930 00004972 50                      		push eax
 10931 00004973 51                      		push ecx
 10932 00004974 E863220000              		call sound_init
 10933 00004979 5F                      		pop edi
 10934 0000497A 58                      		pop eax
 10935 0000497B 7205                    		jc prim_modload_80
 10936                                  
 10937 0000497D E8B6230000              		call mod_load
 10938                                  prim_modload_80:
 10939 00004982 F8                      		clc
 10940                                  prim_modload_90:
 10941 00004983 C3                      		ret
 10942                                  
 10943                                  
 10944                                  ;; mod.play - play mod file
 10945                                  ;
 10946                                  ; group: sound
 10947                                  ;
 10948                                  ; ( int1 int2 -- )
 10949                                  ;
 10950                                  ; int1: player
 10951                                  ; int2: song start
 10952                                  ;
 10953                                  ; Note: sounds are played using the PC speaker.
 10954                                  ;
 10955                                  
 10956                                  		bits 32
 10957                                  
 10958                                  prim_modplay:
 10959 00004984 66BA0101                		mov dx,t_int + (t_int << 8)
 10960 00004988 E853E7FFFF              		call get_2args
 10961 0000498D 7219                    		jc prim_modplay_90
 10962 0000498F 832D[C4000000]02        		sub dword [pstack.ptr],2
 10963 00004996 91                      		xchg eax,ecx
 10964                                  
 10965                                  		; ecx start
 10966                                  		; eax player
 10967                                  
 10968 00004997 803D[2D090000]00        		cmp byte [sound_ok],0
 10969 0000499E 7408                    		jz prim_modplay_90
 10970                                  
 10971 000049A0 89CB                    		mov ebx,ecx
 10972 000049A2 E89D230000              		call mod_play
 10973                                  
 10974 000049A7 F8                      		clc
 10975                                  prim_modplay_90:
 10976 000049A8 C3                      		ret
 10977                                  
 10978                                  
 10979                                  ;; mod.playsample - play mod sample
 10980                                  ;
 10981                                  ; group: sound
 10982                                  ;
 10983                                  ; ( int1 int2 int3 int4 -- )
 10984                                  ;
 10985                                  ; int1: player
 10986                                  ; int2: channel
 10987                                  ; int3: sample number
 10988                                  ; int4: pitch
 10989                                  ;
 10990                                  
 10991                                  		bits 32
 10992                                  
 10993                                  prim_modplaysample:
 10994 000049A9 66BD0300                		mov bp,pserr_pstack_underflow
 10995 000049AD 833D[C4000000]04        		cmp dword [pstack.ptr],4
 10996 000049B4 724C                    		jc prim_modps_90
 10997 000049B6 66BD0800                		mov bp,pserr_wrong_arg_types
 10998                                  
 10999 000049BA B903000000              		mov ecx,3
 11000 000049BF E895CFFFFF              		call get_pstack_tos
 11001 000049C4 80FA01                  		cmp dl,t_int
 11002 000049C7 F9                      		stc
 11003 000049C8 7538                    		jnz prim_modps_90
 11004                                  
 11005 000049CA B902000000              		mov ecx,2
 11006 000049CF 50                      		push eax
 11007 000049D0 E884CFFFFF              		call get_pstack_tos
 11008 000049D5 5B                      		pop ebx
 11009 000049D6 80FA01                  		cmp dl,t_int
 11010 000049D9 F9                      		stc
 11011 000049DA 7526                    		jnz prim_modps_90
 11012                                  
 11013 000049DC 66BA0101                		mov dx,t_int + (t_int << 8)
 11014 000049E0 53                      		push ebx
 11015 000049E1 50                      		push eax
 11016 000049E2 E8F9E6FFFF              		call get_2args
 11017 000049E7 5B                      		pop ebx
 11018 000049E8 5A                      		pop edx
 11019 000049E9 7217                    		jc prim_modps_90
 11020                                  
 11021 000049EB 832D[C4000000]04        		sub dword [pstack.ptr],4
 11022                                  
 11023 000049F2 92                      		xchg eax,edx
 11024                                  
 11025                                  		; 1: eax
 11026                                  		; 2: ebx
 11027                                  		; 3: ecx
 11028                                  		; 4: edx
 11029                                  
 11030 000049F3 803D[2D090000]00        		cmp byte [sound_ok],0
 11031 000049FA 7406                    		jz prim_modps_90
 11032                                  
 11033 000049FC E856230000              		call mod_playsample
 11034                                  
 11035 00004A01 F8                      		clc
 11036                                  prim_modps_90:
 11037 00004A02 C3                      		ret
 11038                                  
 11039                                  
 11040                                  ;; wav.play - play wav file
 11041                                  ;
 11042                                  ; group: sound
 11043                                  ;
 11044                                  ; ( ptr1 -- )
 11045                                  ;
 11046                                  ; ptr1: wav file
 11047                                  ;
 11048                                  
 11049                                  		bits 32
 11050                                  
 11051                                  prim_wavplay:
 11052 00004A03 E8C3050000              		call pr_setptr_or_none
 11053                                  
 11054 00004A08 E8971F0000              		call snd_activate
 11055                                  
 11056 00004A0D F8                      		clc
 11057 00004A0E C3                      		ret
 11058                                  
 11059                                  prim_test2:
 11060 00004A0F B8[8D090000]            		mov eax,wav_current
 11061 00004A14 0305[140A0000]          		add eax,[prog.base]
 11062 00004A1A E97F050000              		jmp pr_getptr_or_none
 11063                                  
 11064                                  prim_test3:
 11065 00004A1F 0FB705[26090000]        		movzx eax,word [cnt0_start_val]
 11066 00004A26 E97D050000              		jmp pr_getint
 11067                                  
 11068                                  prim_test4:
 11069 00004A2B A1[89090000]            		mov eax,[int8_count]
 11070 00004A30 E973050000              		jmp pr_getint
 11071                                  
 11072                                  prim_test5:
 11073 00004A35 31C0                    		xor eax,eax
 11074 00004A37 A0[2F090000]            		mov al,[sound_playing]
 11075 00004A3C 8A25[9A090000]          		mov ah,[need_sound_update]
 11076 00004A42 E961050000              		jmp pr_getint
 11077                                  
 11078                                  prim_test6:
 11079 00004A47 B8[3D090000]            		mov eax,sound_start
 11080 00004A4C 0305[140A0000]          		add eax,[prog.base]
 11081 00004A52 E947050000              		jmp pr_getptr_or_none
 11082                                  
 11083                                  
 11084                                  
 11085                                  ;; wav.playlater - play wav file after current one
 11086                                  ;
 11087                                  ; group: sound
 11088                                  ;
 11089                                  ; ( ptr1 -- )
 11090                                  ;
 11091                                  ; ptr1: wav file
 11092                                  ;
 11093                                  
 11094                                  		bits 32
 11095                                  
 11096                                  prim_wavplaylater:
 11097 00004A57 A1[8D090000]            		mov eax,[wav_current]
 11098 00004A5C 09C0                    		or eax,eax
 11099 00004A5E 74A3                    		jz prim_wavplay
 11100 00004A60 3B05[91090000]          		cmp eax,[wav_end]
 11101 00004A66 749B                    		jz prim_wavplay
 11102                                  
 11103 00004A68 E85E050000              		call pr_setptr_or_none
 11104                                  
 11105                                  		; eax file
 11106                                  
 11107 00004A6D A3[95090000]            		mov [wav_next],eax
 11108                                  
 11109 00004A72 800D[2F090000]F0        		or byte [sound_playing],0f0h
 11110                                  
 11111 00004A79 F8                      		clc
 11112 00004A7A C3                      		ret
 11113                                  
 11114                                  
 11115                                  ;; settextwrap - set text wrap column
 11116                                  ;
 11117                                  ; group: text
 11118                                  ;
 11119                                  ; ( int1 -- )
 11120                                  ;
 11121                                  ; int1: text wrap column; set to 0 to turn text wrapping off.
 11122                                  ;
 11123                                  
 11124                                  		bits 32
 11125                                  
 11126                                  prim_settextwrap:
 11127 00004A7B E863050000              		call pr_setint
 11128 00004A80 A3[7D010000]            		mov [line_wrap],eax
 11129 00004A85 C3                      		ret
 11130                                  
 11131                                  
 11132                                  ;; currenttextwrap - current text wrap column
 11133                                  ;
 11134                                  ; group: text
 11135                                  ;
 11136                                  ; ( -- int1 )
 11137                                  ;
 11138                                  ; int1: text wrap column
 11139                                  ;
 11140                                  
 11141                                  		bits 32
 11142                                  
 11143                                  prim_currenttextwrap:
 11144 00004A86 A1[7D010000]            		mov eax,[line_wrap]
 11145 00004A8B E918050000              		jmp pr_getint
 11146                                  
 11147                                  
 11148                                  ;; seteotchar - set alternative end-of-text char
 11149                                  ;
 11150                                  ; group: text
 11151                                  ;
 11152                                  ; ( int1 -- )
 11153                                  ;
 11154                                  ; int1: eot char
 11155                                  ;
 11156                                  ; Normally strings are 0 terminated. @seteotchar lets you define an
 11157                                  ; additional char text functions recognize.
 11158                                  ;
 11159                                  
 11160                                  		bits 32
 11161                                  
 11162                                  prim_seteotchar:
 11163 00004A90 E84E050000              		call pr_setint
 11164 00004A95 A3[C0010000]            		mov [char_eot],eax
 11165 00004A9A C3                      		ret
 11166                                  
 11167                                  
 11168                                  ;; currenteotchar - current alternative end-of-text char
 11169                                  ;
 11170                                  ; group: text
 11171                                  ;
 11172                                  ; ( -- int1 )
 11173                                  ;
 11174                                  ; int1: eot char
 11175                                  ;
 11176                                  
 11177                                  		bits 32
 11178                                  
 11179                                  prim_currenteotchar:
 11180 00004A9B A1[C0010000]            		mov eax,[char_eot]
 11181 00004AA0 E903050000              		jmp pr_getint
 11182                                  
 11183                                  
 11184                                  ;; setmaxrows - maximum number of text rows to display
 11185                                  ;
 11186                                  ; group: text
 11187                                  ;
 11188                                  ; ( int1 -- )
 11189                                  ;
 11190                                  ; int1: maximum number of text rows to display in a single @show command.
 11191                                  ;
 11192                                  
 11193                                  		bits 32
 11194                                  
 11195                                  prim_setmaxrows:
 11196 00004AA5 E839050000              		call pr_setint
 11197 00004AAA A3[CC010000]            		mov [max_rows],eax
 11198 00004AAF C3                      		ret
 11199                                  
 11200                                  
 11201                                  ;; currentmaxrows -- current maxium number of text rows to display
 11202                                  ;
 11203                                  ; group: text
 11204                                  ;
 11205                                  ; ( -- int1 )
 11206                                  ;
 11207                                  ; int1: maxium number of text rows to display in a single @show command.
 11208                                  ;
 11209                                  
 11210                                  		bits 32
 11211                                  
 11212                                  prim_currentmaxrows:
 11213 00004AB0 A1[CC010000]            		mov eax,[max_rows]
 11214 00004AB5 E9EE040000              		jmp pr_getint
 11215                                  
 11216                                  
 11217                                  ;; formattext -- format text
 11218                                  ;
 11219                                  ; group: text
 11220                                  ;
 11221                                  ; ( str1 -- )
 11222                                  ;
 11223                                  ; str1: text
 11224                                  ;
 11225                                  ; Preprocess text to find (and remember) line breaks, links and stuff.
 11226                                  ;
 11227                                  
 11228                                  		bits 32
 11229                                  
 11230                                  prim_formattext:
 11231 00004ABA B204                    		mov dl,t_string
 11232 00004ABC E8F8E5FFFF              		call get_1arg
 11233 00004AC1 7250                    		jc prim_formattext_90
 11234 00004AC3 FF0D[C4000000]          		dec dword [pstack.ptr]
 11235 00004AC9 50                      		push eax
 11236                                  
 11237 00004ACA 06                      		push es
 11238 00004ACB 1E                      		push ds
 11239 00004ACC 07                      		pop es
 11240                                  
 11241 00004ACD 31C0                    		xor eax,eax
 11242 00004ACF B980000000              		mov ecx,max_text_rows
 11243 00004AD4 BF[08020000]            		mov edi,row_text
 11244 00004AD9 F3AB                    		rep stosd
 11245 00004ADB B980000000              		mov ecx,max_text_rows
 11246 00004AE0 BF[08040000]            		mov edi,ind_text
 11247 00004AE5 F366AB                  		rep stosw
 11248 00004AE8 B900030000              		mov ecx,link_entries * li.size
 11249 00004AED BF[08050000]            		mov edi,link_list
 11250 00004AF2 F3AA                    		rep stosb
 11251                                  
 11252 00004AF4 07                      		pop es
 11253                                  
 11254 00004AF5 5E                      		pop esi
 11255 00004AF6 800D[E4010000]02        		or byte [txt_state],2
 11256 00004AFD 66C705[81010000]00-     		mov word [gfx_indent],0
 11257 00004B05 00                 
 11258 00004B06 E894110000              		call text_xy
 11259 00004B0B 8025[E4010000]FD        		and byte [txt_state],~2
 11260 00004B12 F8                      		clc
 11261                                  prim_formattext_90:
 11262 00004B13 C3                      		ret
 11263                                  
 11264                                  
 11265                                  ;; gettextrows - number of text rows
 11266                                  ;
 11267                                  ; group: text
 11268                                  ;
 11269                                  ; ( -- int1 )
 11270                                  ;
 11271                                  ; int1: total number of text rows.
 11272                                  ;
 11273                                  ; Note: available after running @formattext.
 11274                                  ;
 11275                                  
 11276                                  		bits 32
 11277                                  
 11278                                  prim_gettextrows:
 11279 00004B14 A1[D4010000]            		mov eax,[cur_row2]
 11280 00004B19 E98A040000              		jmp pr_getint
 11281                                  
 11282                                  
 11283                                  ;; setstartrow - set start row
 11284                                  ;
 11285                                  ; group: text
 11286                                  ;
 11287                                  ; ( int1 -- )
 11288                                  ;
 11289                                  ; int1: start row for next @show command.
 11290                                  ;
 11291                                  ; Note: if a start row > 0 is set, the argument to @show is irrelevant.
 11292                                  ; Instead the internal data built during the last @formattext is used.
 11293                                  ;
 11294                                  
 11295                                  		bits 32
 11296                                  
 11297                                  prim_setstartrow:
 11298 00004B1E E8C0040000              		call pr_setint
 11299 00004B23 A3[D8010000]            		mov [start_row],eax
 11300 00004B28 C3                      		ret
 11301                                  
 11302                                  
 11303                                  ;; getlinks -- number of links in text
 11304                                  ;
 11305                                  ; group: text
 11306                                  ;
 11307                                  ; ( -- int1 )
 11308                                  ;
 11309                                  ; int1: number of links in text.
 11310                                  ;
 11311                                  ; Note: available after running @formattext.
 11312                                  ;
 11313                                  
 11314                                  		bits 32
 11315                                  
 11316                                  prim_getlinks:
 11317 00004B29 A1[DC010000]            		mov eax,[cur_link]
 11318 00004B2E E975040000              		jmp pr_getint
 11319                                  
 11320                                  
 11321                                  ;; settextcolors -- set text markup colors
 11322                                  ;
 11323                                  ; group: text
 11324                                  ;
 11325                                  ; ( int1 int2 int3 int4 -- )
 11326                                  ;
 11327                                  ; int1: normal color
 11328                                  ; int2: highlight color
 11329                                  ; int3: link color
 11330                                  ; int4: selected link color
 11331                                  ; 
 11332                                  ; Note: int1 can be changed using @setcolor, too.
 11333                                  ;
 11334                                  
 11335                                  		bits 32
 11336                                  
 11337                                  prim_settextcolors:
 11338 00004B33 66BD0300                		mov bp,pserr_pstack_underflow
 11339 00004B37 833D[C4000000]04        		cmp dword [pstack.ptr],4
 11340 00004B3E 7268                    		jc prim_settextcolors_90
 11341 00004B40 B903000000              		mov ecx,3
 11342 00004B45 E80FCEFFFF              		call get_pstack_tos
 11343 00004B4A 80FA01                  		cmp dl,t_int
 11344 00004B4D F9                      		stc
 11345 00004B4E 66BD0800                		mov bp,pserr_wrong_arg_types
 11346 00004B52 7554                    		jnz prim_settextcolors_90
 11347 00004B54 E8530E0000              		call encode_color
 11348 00004B59 A3[A8010000]            		mov [gfx_color0],eax
 11349 00004B5E A3[A4010000]            		mov [gfx_color],eax
 11350 00004B63 B902000000              		mov ecx,2
 11351 00004B68 55                      		push ebp
 11352 00004B69 E8EBCDFFFF              		call get_pstack_tos
 11353 00004B6E 5D                      		pop ebp
 11354 00004B6F 80FA01                  		cmp dl,t_int
 11355 00004B72 F9                      		stc
 11356 00004B73 7533                    		jnz prim_settextcolors_90
 11357 00004B75 E8320E0000              		call encode_color
 11358 00004B7A A3[AC010000]            		mov [gfx_color1],eax
 11359 00004B7F 66BA0101                		mov dx,t_int + (t_int << 8)
 11360 00004B83 E858E5FFFF              		call get_2args
 11361 00004B88 721E                    		jc prim_settextcolors_90
 11362                                  
 11363 00004B8A 832D[C4000000]04        		sub dword [pstack.ptr],4
 11364                                  
 11365 00004B91 E8160E0000              		call encode_color
 11366 00004B96 A3[B4010000]            		mov [gfx_color3],eax
 11367 00004B9B 89C8                    		mov eax,ecx
 11368 00004B9D E80A0E0000              		call encode_color
 11369 00004BA2 A3[B0010000]            		mov [gfx_color2],eax
 11370                                  
 11371 00004BA7 F8                      		clc
 11372                                  prim_settextcolors_90:
 11373 00004BA8 C3                      		ret
 11374                                  
 11375                                  
 11376                                  ;; currenttextcolors - current text markup colors
 11377                                  ;
 11378                                  ; group: text
 11379                                  ;
 11380                                  ; ( -- int1 int2 int3 int4 )
 11381                                  ;
 11382                                  ; int1: normal color
 11383                                  ; int2: highlight color
 11384                                  ; int3: link color
 11385                                  ; int4: selected link color
 11386                                  ; 
 11387                                  
 11388                                  		bits 32
 11389                                  
 11390                                  prim_currenttextcolors:
 11391 00004BA9 A1[C4000000]            		mov eax,[pstack.ptr]
 11392 00004BAE 83C004                  		add eax,4
 11393 00004BB1 3905[C0000000]          		cmp [pstack.size],eax
 11394 00004BB7 66BD0400                		mov bp,pserr_pstack_overflow
 11395 00004BBB 725A                    		jb prim_currenttextcolors_90
 11396 00004BBD A3[C4000000]            		mov [pstack.ptr],eax
 11397 00004BC2 B201                    		mov dl,t_int
 11398 00004BC4 A1[B4010000]            		mov eax,[gfx_color3]
 11399 00004BC9 E8030E0000              		call decode_color
 11400 00004BCE 31C9                    		xor ecx,ecx
 11401 00004BD0 E899CDFFFF              		call set_pstack_tos
 11402 00004BD5 B201                    		mov dl,t_int
 11403 00004BD7 A1[B0010000]            		mov eax,[gfx_color2]
 11404 00004BDC E8F00D0000              		call decode_color
 11405 00004BE1 B901000000              		mov ecx,1
 11406 00004BE6 E883CDFFFF              		call set_pstack_tos
 11407 00004BEB B201                    		mov dl,t_int
 11408 00004BED A1[AC010000]            		mov eax,[gfx_color1]
 11409 00004BF2 E8DA0D0000              		call decode_color
 11410 00004BF7 B902000000              		mov ecx,2
 11411 00004BFC E86DCDFFFF              		call set_pstack_tos
 11412 00004C01 B201                    		mov dl,t_int
 11413 00004C03 A1[A8010000]            		mov eax,[gfx_color0]
 11414 00004C08 E8C40D0000              		call decode_color
 11415 00004C0D B903000000              		mov ecx,3
 11416 00004C12 E857CDFFFF              		call set_pstack_tos
 11417                                  prim_currenttextcolors_90:
 11418 00004C17 C3                      		ret
 11419                                  
 11420                                  
 11421                                  ;; setlink - select link
 11422                                  ;
 11423                                  ; group: text
 11424                                  ;
 11425                                  ; ( int1 -- )
 11426                                  ;
 11427                                  ; int1: link number
 11428                                  ;
 11429                                  
 11430                                  		bits 32
 11431                                  
 11432                                  prim_setlink:
 11433 00004C18 E8C6030000              		call pr_setint
 11434 00004C1D 3B05[DC010000]          		cmp eax,[cur_link]
 11435 00004C23 7305                    		jae prim_setlink_90
 11436 00004C25 A3[E0010000]            		mov [sel_link],eax
 11437                                  prim_setlink_90:
 11438 00004C2A C3                      		ret
 11439                                  
 11440                                  
 11441                                  ;; currentlink - currently selected link
 11442                                  ;
 11443                                  ; group: text
 11444                                  ;
 11445                                  ; ( -- int1 )
 11446                                  ;
 11447                                  ; int1: selected link
 11448                                  ;
 11449                                  
 11450                                  		bits 32
 11451                                  
 11452                                  prim_currentlink:
 11453 00004C2B A1[E0010000]            		mov eax,[sel_link]
 11454 00004C30 E973030000              		jmp pr_getint
 11455                                  
 11456                                  
 11457                                  ;; getlink -- get link information
 11458                                  ;
 11459                                  ; group: text
 11460                                  ;
 11461                                  ; ( int1 -- str1 str2 int2 int3 )
 11462                                  ;
 11463                                  ; int1: link number
 11464                                  ; str1: link label
 11465                                  ; str2: link text
 11466                                  ; int1: link text x-offset
 11467                                  ; int2: link text row
 11468                                  ;
 11469                                  
 11470                                  		bits 32
 11471                                  
 11472                                  prim_getlink:
 11473 00004C35 B201                    		mov dl,t_int
 11474 00004C37 E87DE4FFFF              		call get_1arg
 11475 00004C3C 0F8296000000            		jc prim_getlink_90
 11476 00004C42 66BD0B00                		mov bp,pserr_invalid_range
 11477 00004C46 3B05[DC010000]          		cmp eax,[cur_link]
 11478 00004C4C F5                      		cmc
 11479 00004C4D 0F8285000000            		jc prim_getlink_90
 11480 00004C53 C1E002                  		shl eax,2
 11481 00004C56 8DBC40[08050000]        		lea edi,[link_list+2*eax+eax]		; li.size = 12 (3*4)
 11482 00004C5D A1[C4000000]            		mov eax,[pstack.ptr]
 11483 00004C62 83C003                  		add eax,3
 11484 00004C65 3905[C0000000]          		cmp [pstack.size],eax
 11485 00004C6B 66BD0400                		mov bp,pserr_pstack_overflow
 11486 00004C6F 7267                    		jb prim_getlink_90
 11487 00004C71 A3[C4000000]            		mov [pstack.ptr],eax
 11488                                  
 11489 00004C76 B204                    		mov dl,t_string
 11490 00004C78 B8[08080000]            		mov eax,label_buf
 11491 00004C7D 0305[140A0000]          		add eax,[prog.base]
 11492 00004C83 B903000000              		mov ecx,3
 11493 00004C88 E8E1CCFFFF              		call set_pstack_tos
 11494                                  
 11495 00004C8D B204                    		mov dl,t_string
 11496 00004C8F 8B4704                  		mov eax,[edi+li.text]
 11497 00004C92 B902000000              		mov ecx,2
 11498 00004C97 E8D2CCFFFF              		call set_pstack_tos
 11499                                  
 11500 00004C9C B201                    		mov dl,t_int
 11501 00004C9E 0FB74708                		movzx eax,word [edi+li.x]
 11502 00004CA2 B901000000              		mov ecx,1
 11503 00004CA7 E8C2CCFFFF              		call set_pstack_tos
 11504                                  
 11505 00004CAC B201                    		mov dl,t_int
 11506 00004CAE 0FB7470A                		movzx eax,word [edi+li.row]
 11507 00004CB2 31C9                    		xor ecx,ecx
 11508 00004CB4 E8B5CCFFFF              		call set_pstack_tos
 11509                                  
 11510 00004CB9 8B37                    		mov esi,[edi+li.label]
 11511 00004CBB BF[08080000]            		mov edi,label_buf
 11512 00004CC0 B920000000              		mov ecx,32			; sizeof label_buf
 11513                                  prim_getlink_50:
 11514 00004CC5 26AC                    		es lodsb
 11515 00004CC7 3C13                    		cmp al,13h
 11516 00004CC9 7409                    		jz prim_getlink_60
 11517 00004CCB 08C0                    		or al,al
 11518 00004CCD 7405                    		jz prim_getlink_60
 11519 00004CCF 8807                    		mov [edi],al
 11520 00004CD1 47                      		inc edi
 11521 00004CD2 E2F1                    		loop prim_getlink_50
 11522                                  prim_getlink_60:
 11523 00004CD4 C60700                  		mov byte [edi],0
 11524 00004CD7 F8                      		clc
 11525                                  prim_getlink_90:
 11526 00004CD8 C3                      		ret
 11527                                  
 11528                                  
 11529                                  ;; lineheight - current line height
 11530                                  ;
 11531                                  ; group: font
 11532                                  ;
 11533                                  ; ( -- int1 )
 11534                                  ;
 11535                                  ; int1: line height
 11536                                  ;
 11537                                  
 11538                                  		bits 32
 11539                                  
 11540                                  prim_lineheight:
 11541 00004CD9 0FB705[18010000]        		movzx eax,word [font.line_height]
 11542 00004CE0 E9C3020000              		jmp pr_getint
 11543                                  
 11544                                  
 11545                                  ;; currenttitle - current page title
 11546                                  ;
 11547                                  ; group: text
 11548                                  ;
 11549                                  ; ( -- str1 )
 11550                                  ;
 11551                                  ; str1: page title
 11552                                  ;
 11553                                  ; Note: available after running @formattext.
 11554                                  ;
 11555                                  
 11556                                  		bits 32
 11557                                  
 11558                                  prim_currenttitle:
 11559 00004CE5 A1[C8010000]            		mov eax,[page_title]
 11560 00004CEA 09C0                    		or eax,eax
 11561 00004CEC 750B                    		jnz prim_currenttitle_10
 11562 00004CEE 0305[140A0000]          		add eax,[prog.base]
 11563 00004CF4 05[BE0B0000]            		add eax,msg_0
 11564                                  prim_currenttitle_10:
 11565 00004CF9 B204                    		mov dl,t_string
 11566 00004CFB E9AA020000              		jmp pr_getobj
 11567                                  
 11568                                  
 11569                                  ;; usleep - sleep micro seconds
 11570                                  ;
 11571                                  ; group: system
 11572                                  ;
 11573                                  ; ( int1 -- )
 11574                                  ;
 11575                                  ; int1: micro seconds to sleep.
 11576                                  ;
 11577                                  ; Note: the actual granularity is 18Hz, so don't make up too sophisticated
 11578                                  ; timings.
 11579                                  ;
 11580                                  
 11581                                  		bits 32
 11582                                  
 11583                                  prim_usleep:
 11584 00004D00 E8DE020000              		call pr_setint
 11585 00004D05 B9506B0000              		mov ecx,54944/2
 11586 00004D0A 01C8                    		add eax,ecx
 11587 00004D0C 01C9                    		add ecx,ecx
 11588 00004D0E 31D2                    		xor edx,edx
 11589 00004D10 F7F1                    		div ecx
 11590                                  		; or eax,eax
 11591                                  		; jz prim_usleep_90
 11592 00004D12 89C1                    		mov ecx,eax
 11593 00004D14 51                      		push ecx
 11594 00004D15 E832DEFFFF              		call get_time
 11595 00004D1A 59                      		pop ecx
 11596 00004D1B 01C1                    		add ecx,eax
 11597                                  prim_usleep_20:
 11598 00004D1D 51                      		push ecx
 11599 00004D1E E829DEFFFF              		call get_time
 11600 00004D23 59                      		pop ecx
 11601 00004D24 39C8                    		cmp eax,ecx
 11602 00004D26 76F5                    		jbe prim_usleep_20
 11603                                  prim_usleep_90:
 11604 00004D28 C3                      		ret
 11605                                  
 11606                                  
 11607                                  ;; notimeout - turn off initial boot loader timeout
 11608                                  ;
 11609                                  ; group: system
 11610                                  ;
 11611                                  ; ( -- )
 11612                                  ;
 11613                                  ; Turns off any automatic booting.
 11614                                  ;
 11615                                  
 11616                                  		bits 32
 11617                                  
 11618                                  prim_notimeout:
 11619 00004D29 C605[A8080000]01        		mov byte [input_notimeout],1
 11620 00004D30 F8                      		clc
 11621 00004D31 C3                      		ret
 11622                                  
 11623                                  
 11624                                  ;; time - get current time
 11625                                  ;
 11626                                  ; group: system
 11627                                  ;
 11628                                  ; ( -- int1 )
 11629                                  ;
 11630                                  ; int1: time in seconds since midnight.
 11631                                  ;
 11632                                  
 11633                                  		bits 32
 11634                                  
 11635                                  prim_time:
 11636 00004D32 E815DEFFFF              		call get_time
 11637 00004D37 E96C020000              		jmp pr_getint
 11638                                  
 11639                                  
 11640                                  ;; date - get current date
 11641                                  ;
 11642                                  ; group: system
 11643                                  ;
 11644                                  ; ( -- int1 )
 11645                                  ;
 11646                                  ; int1: date (bit 0-7: day, bit 8-15: month, bit 16-31: year)
 11647                                  ;
 11648                                  
 11649                                  		bits 32
 11650                                  
 11651                                  prim_date:
 11652 00004D3C E82ADEFFFF              		call get_date
 11653 00004D41 E962020000              		jmp pr_getint
 11654                                  
 11655                                  
 11656                                  ;; serialputc - write char to serial line
 11657                                  ;
 11658                                  ; group: text
 11659                                  ;
 11660                                  ; ( int1 -- )
 11661                                  ;
 11662                                  ; int1: char (bit 0-23: char, bit 24-31: console id)
 11663                                  ;
 11664                                  
 11665                                  		bits 32
 11666                                  
 11667                                  prim_serialputc:
 11668 00004D46 E898020000              		call pr_setint
 11669 00004D4B E8ABDDFFFF              		call serial_putc
 11670 00004D50 F8                      		clc
 11671 00004D51 C3                      		ret
 11672                                  
 11673                                  
 11674                                  ;; serialsetconfig - set serial line config
 11675                                  ;
 11676                                  ; group: system
 11677                                  ;
 11678                                  ; ( int1 int2 int3 -- )
 11679                                  ;
 11680                                  ; int1: line number (0-4)
 11681                                  ; int2: port
 11682                                  ; int3: baud
 11683                                  ;
 11684                                  
 11685                                  		bits 32
 11686                                  
 11687                                  prim_serialsetconfig:
 11688 00004D52 66BD0300                		mov bp,pserr_pstack_underflow
 11689 00004D56 833D[C4000000]03        		cmp dword [pstack.ptr],3
 11690 00004D5D 0F8299000000            		jc prim_ssc_90
 11691 00004D63 B902000000              		mov ecx,2
 11692 00004D68 E8ECCBFFFF              		call get_pstack_tos
 11693 00004D6D 80FA01                  		cmp dl,t_int
 11694 00004D70 F9                      		stc
 11695 00004D71 66BD0800                		mov bp,pserr_wrong_arg_types
 11696 00004D75 0F8581000000            		jnz prim_ssc_90
 11697 00004D7B 50                      		push eax
 11698 00004D7C 66BA0101                		mov dx,t_int + (t_int << 8)
 11699 00004D80 E85BE3FFFF              		call get_2args
 11700 00004D85 5B                      		pop ebx
 11701 00004D86 7274                    		jc prim_ssc_90
 11702 00004D88 832D[C4000000]03        		sub dword [pstack.ptr],3
 11703                                  		; ebx: line
 11704                                  		; ecx: port
 11705                                  		; eax: baud
 11706                                  
 11707 00004D8F 83FB04                  		cmp ebx,serial.lines.max - 1
 11708 00004D92 7367                    		jae prim_ssc_80
 11709 00004D94 6BF309                  		imul esi,ebx,sl.size
 11710 00004D97 81C6[E2080000]          		add esi,serial.lines
 11711 00004D9D C6460500                		mov byte [esi+sl.status],0
 11712 00004DA1 80C3F0                  		add bl,0f0h
 11713 00004DA4 885E04                  		mov [esi+sl.scancode],bl
 11714 00004DA7 81F900000100            		cmp ecx,10000h
 11715 00004DAD 734C                    		jae prim_ssc_80
 11716 00004DAF 83F904                  		cmp ecx,4
 11717 00004DB2 730E                    		jae prim_ssc_40
 11718 00004DB4 26668B8C0900040000      		mov cx,[es:0x400+ecx*2]
 11719 00004DBD 6609C9                  		or cx,cx
 11720 00004DC0 7439                    		jz prim_ssc_80
 11721                                  prim_ssc_40:
 11722 00004DC2 66890E                  		mov [esi+sl.port],cx
 11723 00004DC5 09C0                    		or eax,eax
 11724 00004DC7 7516                    		jnz prim_ssc_60
 11725 00004DC9 884606                  		mov byte [esi+sl.recv_mask],al
 11726 00004DCC 884607                  		mov byte [esi+sl.recv_cnt],al
 11727 00004DCF 884608                  		mov byte [esi+sl.baud_idx],al
 11728 00004DD2 0FB605[15090000]        		movzx eax,byte [serial.baud_tab]
 11729 00004DD9 804E0504                		or byte [esi+sl.status],4
 11730 00004DDD EB14                    		jmp prim_ssc_70
 11731                                  prim_ssc_60:
 11732 00004DDF 3DC2010000              		cmp eax,450
 11733 00004DE4 7215                    		jb prim_ssc_80
 11734 00004DE6 BB00C20100              		mov ebx,115200
 11735 00004DEB 39D8                    		cmp eax,ebx
 11736 00004DED 770C                    		ja prim_ssc_80
 11737 00004DEF 93                      		xchg eax,ebx
 11738 00004DF0 99                      		cdq
 11739 00004DF1 F7F3                    		div ebx
 11740                                  prim_ssc_70:
 11741 00004DF3 66894602                		mov [esi+sl.baud],ax
 11742 00004DF7 804E0501                		or byte [esi+sl.status],1
 11743                                  prim_ssc_80:
 11744 00004DFB F8                      		clc
 11745                                  prim_ssc_90:
 11746 00004DFC C3                      		ret
 11747                                  
 11748                                  
 11749                                  ;; serialgetbaud - get current baud rate
 11750                                  ;
 11751                                  ; group: text
 11752                                  ;
 11753                                  ; ( int1 -- int2 )
 11754                                  ;
 11755                                  ; int1: console
 11756                                  ; int2: baud (0 = undefined)
 11757                                  ;
 11758                                  
 11759                                  		bits 32
 11760                                  
 11761                                  prim_serialgetbaud:
 11762 00004DFD E8E1010000              		call pr_setint
 11763 00004E02 83F805                  		cmp eax,serial.lines.max
 11764 00004E05 7320                    		jae prim_serialgetbaud_80
 11765 00004E07 6BD809                  		imul ebx,eax,sl.size
 11766 00004E0A 31C0                    		xor eax,eax
 11767 00004E0C F683[E7080000]01        		test byte [serial.lines+ebx+sl.status],1
 11768 00004E13 7412                    		jz prim_serialgetbaud_80
 11769 00004E15 668B83[E4080000]        		mov ax,[serial.lines+ebx+sl.baud]
 11770 00004E1C B900C20100              		mov ecx,115200
 11771 00004E21 91                      		xchg eax,ecx
 11772 00004E22 99                      		cdq
 11773 00004E23 F7F1                    		div ecx
 11774 00004E25 EB02                    		jmp prim_serialgetbaud_90
 11775                                  prim_serialgetbaud_80:
 11776 00004E27 31C0                    		xor eax,eax
 11777                                  prim_serialgetbaud_90:
 11778 00004E29 E97A010000              		jmp pr_getint
 11779                                  
 11780                                  
 11781                                  ;; serial.init - program serial lines
 11782                                  ;
 11783                                  ; group: system
 11784                                  ;
 11785                                  ; ( -- )
 11786                                  ;
 11787                                  
 11788                                  		bits 32
 11789                                  
 11790                                  prim_serialinit:
 11791 00004E2E E8FBDBFFFF              		call serial_setup
 11792 00004E33 F8                      		clc
 11793 00004E34 C3                      		ret
 11794                                  
 11795                                  
 11796                                  ;; idle - run stuff when idle
 11797                                  ;
 11798                                  ; group: system
 11799                                  ;
 11800                                  ; ( ptr1 int1 -- )
 11801                                  ;
 11802                                  ; ptr1: 'kroete' data
 11803                                  ; int1: direction (0 or 1)
 11804                                  ;
 11805                                  ; Run 'kroete' animation while we're waiting for keyboard input.
 11806                                  ;
 11807                                  
 11808                                  		bits 32
 11809                                  
 11810                                  prim_idle:
 11811 00004E35 66BA010C                		mov dx,t_int + (t_ptr << 8)
 11812 00004E39 E8A2E2FFFF              		call get_2args
 11813 00004E3E 7307                    		jnc prim_idle_10
 11814 00004E40 6683FA01                		cmp dx,t_int + (t_none << 8)
 11815 00004E44 F9                      		stc
 11816 00004E45 7565                    		jnz prim_idle_90
 11817                                  prim_idle_10:
 11818 00004E47 832D[C4000000]02        		sub dword [pstack.ptr],2
 11819 00004E4E 80FE00                  		cmp dh,t_none			; undef
 11820 00004E51 751E                    		jnz prim_idle_50
 11821 00004E53 C605[F4010000]00        		mov byte [idle.run],0
 11822 00004E5A A1[E8010000]            		mov eax,[idle.draw_buffer]
 11823 00004E5F 09C0                    		or eax,eax
 11824 00004E61 7448                    		jz prim_idle_80
 11825 00004E63 E848CDFFFF              		call free
 11826 00004E68 8325[E8010000]00        		and dword [idle.draw_buffer],0
 11827 00004E6F EB3A                    		jmp prim_idle_80
 11828                                  prim_idle_50:
 11829 00004E71 890D[EC010000]          		mov [idle.data1],ecx
 11830 00004E77 A3[F0010000]            		mov [idle.data2],eax
 11831                                  
 11832 00004E7C C605[F5010000]01        		mov byte [idle.invalid],1
 11833                                  
 11834 00004E83 833D[E8010000]00        		cmp dword [idle.draw_buffer],0
 11835 00004E8A 7518                    		jnz prim_idle_70
 11836                                  
 11837 00004E8C B908020000              		mov ecx,kroete.width
 11838 00004E91 B8EC000000              		mov eax,kroete.height
 11839 00004E96 E83CF2FFFF              		call alloc_fb
 11840 00004E9B A3[E8010000]            		mov [idle.draw_buffer],eax
 11841 00004EA0 09C0                    		or eax,eax
 11842 00004EA2 7407                    		jz prim_idle_80
 11843                                  
 11844                                  prim_idle_70:
 11845 00004EA4 C605[F4010000]01        		mov byte [idle.run],1
 11846                                  prim_idle_80:
 11847 00004EAB F8                      		clc
 11848                                  prim_idle_90:
 11849 00004EAC C3                      		ret
 11850                                  
 11851                                  
 11852                                  ;; keepmode - keep video mode
 11853                                  ;
 11854                                  ; group: system
 11855                                  ;
 11856                                  ; ( int1 -- )
 11857                                  ;
 11858                                  ; int1 = 1: keep video mode when starting kernel.
 11859                                  ;
 11860                                  
 11861                                  		bits 32
 11862                                  
 11863                                  prim_keepmode:
 11864 00004EAD E831010000              		call pr_setint
 11865 00004EB2 A2[E6010000]            		mov [keep_mode],al
 11866 00004EB7 C3                      		ret
 11867                                  
 11868                                  
 11869                                  ;; blend -- blend image with alpha channel
 11870                                  ;
 11871                                  ; group: image
 11872                                  ;
 11873                                  ; ( obj1 obj2 ptr3 -- )
 11874                                  ;
 11875                                  ; obj1: pointer to source image or color value
 11876                                  ; obj2: pointer to alpha channel or transparency value
 11877                                  ; ptr3: destination
 11878                                  ;
 11879                                  ; An image section of obj1 is copied to ptr3 using obj2 as alpha channel.
 11880                                  ; obj1 may be a color value or an unpacked image (@unpackimage, @savescreen).
 11881                                  ; obj2 may be a transparency value (0..255) or an unpacked image used as alpha channel.
 11882                                  ; The current cursor position is used as offset into obj1 and obj2 if they are images.
 11883                                  ; If both obj1 and obj2 are images, they must have the same dimensions.
 11884                                  ;
 11885                                  ; Note: 16/32-bit modes only.
 11886                                  ;
 11887                                  
 11888                                  		bits 32
 11889                                  
 11890                                  prim_blend:
 11891 00004EB8 66BD0300                		mov bp,pserr_pstack_underflow
 11892 00004EBC 833D[C4000000]03        		cmp dword [pstack.ptr],3
 11893 00004EC3 0F82B2000000            		jc prim_blend_90
 11894                                  
 11895 00004EC9 8325[A0090000]00        		and dword [tmp_var_0],0
 11896                                  
 11897 00004ED0 B902000000              		mov ecx,2
 11898 00004ED5 E87FCAFFFF              		call get_pstack_tos
 11899 00004EDA 80FA00                  		cmp dl,t_none
 11900 00004EDD 7504                    		jnz prim_blend_21
 11901 00004EDF 31C0                    		xor eax,eax
 11902 00004EE1 B201                    		mov dl,t_int
 11903                                  prim_blend_21:
 11904 00004EE3 80FA0C                  		cmp dl,t_ptr
 11905 00004EE6 7416                    		jz prim_blend_23
 11906 00004EE8 800D[A0090000]01        		or byte [tmp_var_0],1
 11907 00004EEF 80FA01                  		cmp dl,t_int
 11908 00004EF2 740A                    		jz prim_blend_23
 11909                                  prim_blend_22:
 11910 00004EF4 F9                      		stc
 11911 00004EF5 66BD0800                		mov bp,pserr_wrong_arg_types
 11912 00004EF9 E97D000000              		jmp prim_blend_90
 11913                                  prim_blend_23:
 11914 00004EFE A3[A4090000]            		mov [tmp_var_1],eax
 11915                                  
 11916 00004F03 B901000000              		mov ecx,1
 11917 00004F08 E84CCAFFFF              		call get_pstack_tos
 11918 00004F0D 80FA00                  		cmp dl,t_none
 11919 00004F10 7504                    		jnz prim_blend_31
 11920 00004F12 31C0                    		xor eax,eax
 11921 00004F14 B201                    		mov dl,t_int
 11922                                  prim_blend_31:
 11923 00004F16 80FA0C                  		cmp dl,t_ptr
 11924 00004F19 740C                    		jz prim_blend_33
 11925 00004F1B 800D[A0090000]02        		or byte [tmp_var_0],2
 11926 00004F22 80FA01                  		cmp dl,t_int
 11927 00004F25 75CD                    		jnz prim_blend_22
 11928                                  prim_blend_33:
 11929 00004F27 A3[A8090000]            		mov [tmp_var_2],eax
 11930                                  
 11931 00004F2C 31C9                    		xor ecx,ecx
 11932 00004F2E E826CAFFFF              		call get_pstack_tos
 11933 00004F33 80FA00                  		cmp dl,t_none
 11934 00004F36 7509                    		jnz prim_blend_35
 11935 00004F38 832D[C4000000]03        		sub dword [pstack.ptr],3
 11936                                  		; CF = 0
 11937 00004F3F EB3A                    		jmp prim_blend_90
 11938                                  prim_blend_35:
 11939 00004F41 80FA0C                  		cmp dl,t_ptr
 11940 00004F44 75AE                    		jnz prim_blend_22
 11941                                  
 11942 00004F46 A3[AC090000]            		mov [tmp_var_3],eax
 11943                                  
 11944 00004F4B 832D[C4000000]03        		sub dword [pstack.ptr],3
 11945                                  
 11946                                  		; tmp_var_0: bit 0, 1: src type, alpha type (0 = ptr, 1 = int)
 11947                                  		; tmp_var_1: src
 11948                                  		; tmp_var_2: alpha
 11949                                  		; tmp_var_3: dst
 11950                                  
 11951 00004F52 8B35[A4090000]          		mov esi,[tmp_var_1]
 11952 00004F58 8B1D[A8090000]          		mov ebx,[tmp_var_2]
 11953                                  
 11954 00004F5E A0[A0090000]            		mov al,[tmp_var_0]
 11955 00004F63 08C0                    		or al,al
 11956 00004F65 7508                    		jnz prim_blend_60
 11957                                  
 11958                                  		; check image domensions
 11959 00004F67 268B0E                  		mov ecx,[es:esi]
 11960 00004F6A 263B0B                  		cmp ecx,[es:ebx]
 11961                                  
 11962 00004F6D 7585                    		jnz prim_blend_22
 11963                                  prim_blend_60:
 11964 00004F6F 8B3D[AC090000]          		mov edi,[tmp_var_3]
 11965                                  
 11966                                  		; invalidates tmp_var_*
 11967 00004F75 E8B6000000              		call blend
 11968                                  
 11969 00004F7A F8                      		clc
 11970                                  prim_blend_90:
 11971 00004F7B C3                      		ret
 11972                                  
 11973                                  
 11974                                  ;; getkey - get keyboard input
 11975                                  ;
 11976                                  ; group: system
 11977                                  ;
 11978                                  ; ( -- int1 )
 11979                                  ;
 11980                                  ; int1: key (bit 0-7: ASCII, bit 8-15: scan code, bit 16-31: kbd status bits)
 11981                                  ;
 11982                                  ; Note: the function does not block. If there is no key pressed, bits 0-15 will be 0.
 11983                                  ;
 11984                                  		bits 32
 11985                                  
 11986                                  prim_getkey:
 11987 00004F7C B411                    		mov ah,11h
 11988 00004F7E CD16                    		int 16h
 11989 00004F80 B800000000              		mov eax,0
 11990 00004F85 7409                    		jz prim_getkey_20
 11991 00004F87 B410                    		mov ah,10h
 11992 00004F89 CD16                    		int 16h
 11993 00004F8B 25FFFF0000              		and eax,0ffffh
 11994                                  prim_getkey_20:
 11995 00004F90 268B0D15040000          		mov ecx,[es:417h-2]
 11996 00004F97 6631C9                  		xor cx,cx
 11997 00004F9A 01C8                    		add eax,ecx
 11998 00004F9C EB0A                    		jmp pr_getint
 11999                                  
 12000                                  
 12001                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12002                                  ; Helper function that covers common cases.
 12003                                  
 12004                                  ; return eax as ptr on stack, returns undef if eax = 0
 12005                                  
 12006                                  		bits 32
 12007                                  
 12008                                  pr_getptr_or_none:
 12009 00004F9E B20C                    		mov dl,t_ptr
 12010 00004FA0 09C0                    		or eax,eax
 12011 00004FA2 7506                    		jnz pr_getobj
 12012 00004FA4 B200                    		mov dl,t_none
 12013 00004FA6 EB02                    		jmp pr_getobj
 12014                                  
 12015                                  ; return eax as integer on stack
 12016                                  pr_getint:
 12017 00004FA8 B201                    		mov dl,t_int
 12018                                  
 12019                                  ; return eax as dl on stack
 12020                                  pr_getobj:
 12021 00004FAA 8B0D[C4000000]          		mov ecx,[pstack.ptr]
 12022 00004FB0 41                      		inc ecx
 12023 00004FB1 390D[C0000000]          		cmp [pstack.size],ecx
 12024 00004FB7 66BD0400                		mov bp,pserr_pstack_overflow
 12025 00004FBB 720D                    		jc pr_getobj_90
 12026 00004FBD 890D[C4000000]          		mov [pstack.ptr],ecx
 12027 00004FC3 31C9                    		xor ecx,ecx
 12028 00004FC5 E8A4C9FFFF              		call set_pstack_tos
 12029                                  pr_getobj_90:
 12030 00004FCA C3                      		ret
 12031                                  
 12032                                  
 12033                                  ; get ptr from stack as eax; if it is undef, don't return to function
 12034                                  pr_setptr_or_none:
 12035 00004FCB B20C                    		mov dl,t_ptr
 12036                                  
 12037                                  ; get obj from stack as eax; if it is undef, don't return to function
 12038                                  pr_setobj_or_none:
 12039 00004FCD E8E7E0FFFF              		call get_1arg
 12040 00004FD2 731A                    		jnc pr_setobj_20
 12041 00004FD4 80FA00                  		cmp dl,t_none
 12042 00004FD7 F9                      		stc
 12043 00004FD8 7512                    		jnz pr_setobj_10
 12044 00004FDA FF0D[C4000000]          		dec dword [pstack.ptr]
 12045 00004FE0 F8                      		clc
 12046 00004FE1 EB09                    		jmp pr_setobj_10
 12047                                  
 12048                                  ; get integer from stack as eax
 12049                                  pr_setint:
 12050 00004FE3 B201                    		mov dl,t_int
 12051                                  
 12052                                  ; get object with type dl from stack as eax
 12053                                  pm_pr_setobj:
 12054 00004FE5 E8CFE0FFFF              		call get_1arg
 12055 00004FEA 7302                    		jnc pr_setobj_20
 12056                                  pr_setobj_10:
 12057 00004FEC 58                      		pop eax			; don't return to function that called us
 12058 00004FED C3                      		ret
 12059                                  pr_setobj_20:
 12060 00004FEE FF0D[C4000000]          		dec dword [pstack.ptr]
 12061 00004FF4 59                      		pop ecx			; put link to clc on stack
 12062 00004FF5 68[FC4F0000]            		push dword pr_setobj_30
 12063 00004FFA FFE1                    		jmp ecx
 12064                                  pr_setobj_30:
 12065 00004FFC F8                      		clc
 12066 00004FFD C3                      		ret
 12067                                  
 12068                                  
 12069                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12070                                  ;
 12071                                  ;
 12072                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12073                                  
 12074                                  
 12075                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12076                                  ; Get object size.
 12077                                  ;
 12078                                  ; eax, dl	obj, obj tyoe
 12079                                  ;
 12080                                  ; return:
 12081                                  ;
 12082                                  ;  eax		length
 12083                                  ;   CF		0/1 ok/not ok
 12084                                  ;
 12085                                  
 12086                                  		bits 32
 12087                                  
 12088                                  get_length:
 12089 00004FFE 80FA0C                  		cmp dl,t_ptr
 12090 00005001 740D                    		jz get_length_10
 12091 00005003 80FA0A                  		cmp dl,t_array
 12092 00005006 740F                    		jz get_length_20
 12093 00005008 80FA04                  		cmp dl,t_string
 12094 0000500B 7410                    		jz get_length_30
 12095 0000500D F9                      		stc
 12096 0000500E EB1F                    		jmp get_length_90
 12097                                  get_length_10:
 12098 00005010 E84BCEFFFF              		call find_mem_size
 12099 00005015 EB17                    		jmp get_length_80
 12100                                  get_length_20:
 12101 00005017 260FB700                		movzx eax,word [es:eax]
 12102 0000501B EB11                    		jmp get_length_80
 12103                                  get_length_30:
 12104 0000501D 96                      		xchg eax,esi
 12105 0000501E 31C9                    		xor ecx,ecx
 12106 00005020 31C0                    		xor eax,eax
 12107                                  get_length_40:
 12108 00005022 26AC                    		es lodsb
 12109 00005024 E8A90F0000              		call is_eot
 12110 00005029 E0F7                    		loopnz get_length_40
 12111 0000502B F7D1                    		not ecx
 12112 0000502D 91                      		xchg eax,ecx
 12113                                  get_length_80:
 12114 0000502E F8                      		clc
 12115                                  get_length_90:
 12116 0000502F C3                      		ret
 12117                                  
 12118                                  
 12119                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12120                                  ; Blend src & dst using alpha channel.
 12121                                  ;
 12122                                  ;  al		arg type; bit 0, 1: src, alpha (0 = ptr, 1 = int)
 12123                                  ;  esi		src
 12124                                  ;  ebx		alpha
 12125                                  ;  edi		dst
 12126                                  ;  word [gfx_cur_x]	offset into src
 12127                                  ;  word [gfx_cur_y]	dto
 12128                                  ;
 12129                                  
 12130                                  		bits 32
 12131                                  
 12132                                  blend:
 12133 00005030 FF35[05010000]          		push dword [transp]
 12134                                  
 12135 00005036 803D[6B010000]02        		cmp byte [pixel_bytes],2
 12136 0000503D 740D                    		jz blend_10
 12137 0000503F 803D[6B010000]04        		cmp byte [pixel_bytes],4
 12138 00005046 0F85D7000000            		jnz blend_90
 12139                                  
 12140                                  blend_10:
 12141 0000504C 268B2F                  		mov ebp,[es:edi]
 12142 0000504F A802                    		test al,2
 12143 00005051 7503                    		jnz blend_12
 12144 00005053 268B2B                  		mov ebp,[es:ebx]
 12145                                  blend_12:
 12146 00005056 A801                    		test al,1
 12147 00005058 7503                    		jnz blend_14
 12148 0000505A 268B2E                  		mov ebp,[es:esi]
 12149                                  blend_14:
 12150                                  
 12151 0000505D A2[A0090000]            		mov [tmp_var_0],al
 12152 00005062 892D[A4090000]          		mov [tmp_var_1],ebp		; width, height (src)
 12153                                  
 12154 00005068 26FF37                  		push dword [es:edi]
 12155 0000506B 8F05[A8090000]          		pop dword [tmp_var_2]		; width, height (dst)
 12156                                  
 12157 00005071 8935[AC090000]          		mov [tmp_var_3],esi		; color
 12158                                  
 12159 00005077 0FB6C3                  		movzx eax,bl
 12160 0000507A A3[05010000]            		mov [transp],eax		; alpha transp
 12161                                  
 12162 0000507F 0FB7ED                  		movzx ebp,bp			; src width
 12163                                  
 12164 00005082 0FB705[77010000]        		movzx eax,word [gfx_cur_y]
 12165 00005089 F7E5                    		mul ebp
 12166 0000508B 0FB70D[75010000]        		movzx ecx,word [gfx_cur_x]
 12167 00005092 01C8                    		add eax,ecx
 12168 00005094 0FAF05[6B010000]        		imul eax,[pixel_bytes]
 12169 0000509B 83C004                  		add eax,4
 12170                                  
 12171 0000509E F605[A0090000]01        		test byte [tmp_var_0],1
 12172 000050A5 7502                    		jnz blend_16
 12173 000050A7 01C6                    		add esi,eax
 12174                                  blend_16:
 12175 000050A9 F605[A0090000]02        		test byte [tmp_var_0],2
 12176 000050B0 7502                    		jnz blend_17
 12177 000050B2 01C3                    		add ebx,eax
 12178                                  blend_17:
 12179                                  
 12180 000050B4 83C704                  		add edi,4
 12181                                  
 12182 000050B7 BA[30510000]            		mov edx,blend_pixel_16
 12183 000050BC 803D[6B010000]02        		cmp byte [pixel_bytes],2
 12184 000050C3 7405                    		jz blend_18
 12185 000050C5 BA[40510000]            		mov edx,blend_pixel_32
 12186                                  blend_18:
 12187 000050CA 0FB60D[A0090000]        		movzx ecx,byte [tmp_var_0]
 12188 000050D1 80E103                  		and cl,3
 12189 000050D4 FF348A                  		push dword [edx+ecx*4]
 12190 000050D7 8F05[2C510000]          		pop dword [blend_pixel]
 12191                                  
 12192 000050DD 668B0D[AA090000]        		mov cx,[tmp_var_2 + 2]		; dst height
 12193                                  
 12194                                  blend_20:
 12195 000050E4 6651                    		push cx
 12196                                  
 12197 000050E6 668B15[A8090000]        		mov dx,[tmp_var_2]		; dst width
 12198                                  
 12199                                  blend_40:
 12200 000050ED FF15[2C510000]          		call [blend_pixel]
 12201                                  
 12202 000050F3 0335[6B010000]          		add esi,[pixel_bytes]
 12203 000050F9 031D[6B010000]          		add ebx,[pixel_bytes]
 12204 000050FF 033D[6B010000]          		add edi,[pixel_bytes]
 12205                                  
 12206 00005105 664A                    		dec dx
 12207 00005107 75E4                    		jnz blend_40
 12208                                  
 12209 00005109 6659                    		pop cx
 12210                                  
 12211 0000510B 0FB705[A8090000]        		movzx eax,word [tmp_var_2]	; dst width
 12212 00005112 29E8                    		sub eax,ebp			; src width
 12213 00005114 0FAF05[6B010000]        		imul eax,[pixel_bytes]
 12214                                  
 12215 0000511B 29C6                    		sub esi,eax
 12216 0000511D 29C3                    		sub ebx,eax
 12217                                  
 12218 0000511F 6649                    		dec cx
 12219 00005121 75C1                    		jnz blend_20
 12220                                  
 12221                                  blend_90:
 12222 00005123 8F05[05010000]          		pop dword [transp]
 12223                                  
 12224 00005129 C3                      		ret
 12225                                  
 12226                                  
 12227 0000512A 00<rept>                		align 4, db 0
 12228 0000512C 00000000                blend_pixel	dd 0
 12229                                  
 12230 00005130 [50510000]              blend_pixel_16	dd blend_pixel_00_16
 12231 00005134 [83510000]              		dd blend_pixel_01_16
 12232 00005138 [B2510000]              		dd blend_pixel_10_16
 12233 0000513C [D4510000]              		dd blend_pixel_11_16
 12234                                  
 12235 00005140 [F2510000]              blend_pixel_32	dd blend_pixel_00_32
 12236 00005144 [0C520000]              		dd blend_pixel_01_32
 12237 00005148 [29520000]              		dd blend_pixel_10_32
 12238 0000514C [38520000]              		dd blend_pixel_11_32
 12239                                  
 12240                                  
 12241                                  ; src: image, alpha: image
 12242                                  blend_pixel_00_16:
 12243 00005150 26668B03                		mov ax,[es:ebx]
 12244 00005154 E878080000              		call decode_color
 12245                                  
 12246 00005159 0FB6C4                  		movzx eax,ah
 12247 0000515C A3[05010000]            		mov [transp],eax
 12248                                  
 12249 00005161 26668B06                		mov ax,[es:esi]
 12250 00005165 E867080000              		call decode_color
 12251 0000516A 91                      		xchg ecx,eax
 12252                                  
 12253 0000516B 26668B07                		mov ax,[es:edi]
 12254 0000516F E85D080000              		call decode_color
 12255 00005174 E8360A0000              		call enc_transp
 12256 00005179 E82E080000              		call encode_color
 12257                                  
 12258 0000517E 26668907                		mov [es:edi],ax
 12259 00005182 C3                      		ret
 12260                                  
 12261                                  ; src: color, alpha: image
 12262                                  blend_pixel_01_16:
 12263 00005183 26668B03                		mov ax,[es:ebx]
 12264 00005187 E845080000              		call decode_color
 12265                                  
 12266 0000518C 0FB6C4                  		movzx eax,ah
 12267 0000518F A3[05010000]            		mov [transp],eax
 12268                                  
 12269 00005194 8B0D[AC090000]          		mov ecx,[tmp_var_3]
 12270                                  
 12271 0000519A 26668B07                		mov ax,[es:edi]
 12272 0000519E E82E080000              		call decode_color
 12273 000051A3 E8070A0000              		call enc_transp
 12274 000051A8 E8FF070000              		call encode_color
 12275                                  
 12276 000051AD 26668907                		mov [es:edi],ax
 12277 000051B1 C3                      		ret
 12278                                  
 12279                                  ; src: image, alpha: fixed
 12280                                  blend_pixel_10_16:
 12281 000051B2 26668B06                		mov ax,[es:esi]
 12282 000051B6 E816080000              		call decode_color
 12283 000051BB 91                      		xchg eax,ecx
 12284                                  
 12285 000051BC 26668B07                		mov ax,[es:edi]
 12286 000051C0 E80C080000              		call decode_color
 12287 000051C5 E8E5090000              		call enc_transp
 12288 000051CA E8DD070000              		call encode_color
 12289                                  
 12290 000051CF 26668907                		mov [es:edi],ax
 12291 000051D3 C3                      		ret
 12292                                  
 12293                                  ; src: color, alpha: fixed
 12294                                  blend_pixel_11_16:
 12295 000051D4 8B0D[AC090000]          		mov ecx,[tmp_var_3]
 12296                                  
 12297 000051DA 26668B07                		mov ax,[es:edi]
 12298 000051DE E8EE070000              		call decode_color
 12299 000051E3 E8C7090000              		call enc_transp
 12300 000051E8 E8BF070000              		call encode_color
 12301                                  
 12302 000051ED 26668907                		mov [es:edi],ax
 12303 000051F1 C3                      		ret
 12304                                  
 12305                                  ; src: image, alpha: image
 12306                                  blend_pixel_00_32:
 12307 000051F2 268B03                  		mov eax,[es:ebx]
 12308 000051F5 0FB6C4                  		movzx eax,ah
 12309 000051F8 A3[05010000]            		mov [transp],eax
 12310                                  
 12311 000051FD 268B0E                  		mov ecx,[es:esi]
 12312                                  
 12313 00005200 268B07                  		mov eax,[es:edi]
 12314 00005203 E8A7090000              		call enc_transp
 12315                                  
 12316 00005208 268907                  		mov [es:edi],eax
 12317 0000520B C3                      		ret
 12318                                  
 12319                                  ; src: color, alpha: image
 12320                                  blend_pixel_01_32:
 12321 0000520C 268B03                  		mov eax,[es:ebx]
 12322 0000520F 0FB6C4                  		movzx eax,ah
 12323 00005212 A3[05010000]            		mov [transp],eax
 12324                                  
 12325 00005217 8B0D[AC090000]          		mov ecx,[tmp_var_3]
 12326                                  
 12327 0000521D 268B07                  		mov eax,[es:edi]
 12328 00005220 E88A090000              		call enc_transp
 12329                                  
 12330 00005225 268907                  		mov [es:edi],eax
 12331 00005228 C3                      		ret
 12332                                  
 12333                                  ; src: image, alpha: fixed
 12334                                  blend_pixel_10_32:
 12335 00005229 268B0E                  		mov ecx,[es:esi]
 12336                                  
 12337 0000522C 268B07                  		mov eax,[es:edi]
 12338 0000522F E87B090000              		call enc_transp
 12339                                  
 12340 00005234 268907                  		mov [es:edi],eax
 12341 00005237 C3                      		ret
 12342                                  
 12343                                  ; src: color, alpha: fixed
 12344                                  blend_pixel_11_32:
 12345 00005238 8B0D[AC090000]          		mov ecx,[tmp_var_3]
 12346                                  
 12347 0000523E 268B07                  		mov eax,[es:edi]
 12348 00005241 E869090000              		call enc_transp
 12349                                  
 12350 00005246 268907                  		mov [es:edi],eax
 12351 00005249 C3                      		ret
 12352                                  
 12353                                  
 12354                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12355                                  ;  ebx		string
 12356                                  ;  esi		ptr to char (rel. to ebx)
 12357                                  ;
 12358                                  ; return:
 12359                                  ;  esi		points to prev char
 12360                                  ;
 12361                                  ;  Changes no other regs.
 12362                                  ;
 12363                                  
 12364                                  		bits 32
 12365                                  
 12366                                  utf8_prev:
 12367 0000524A 50                      		push eax
 12368 0000524B 09F6                    		or esi,esi
 12369 0000524D 740E                    		jz utf8_prev_90
 12370                                  utf8_prev_50:
 12371 0000524F 4E                      		dec esi
 12372 00005250 740B                    		jz utf8_prev_90
 12373 00005252 268A0433                		mov al,[es:ebx+esi]
 12374 00005256 C0E806                  		shr al,6
 12375 00005259 3C02                    		cmp al,2
 12376 0000525B 74F2                    		jz utf8_prev_50
 12377                                  utf8_prev_90:
 12378 0000525D 58                      		pop eax
 12379 0000525E C3                      		ret
 12380                                  
 12381                                  
 12382                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12383                                  ;
 12384                                  ;  ebx		string
 12385                                  ;  esi		ptr to char (rel. to ebx)
 12386                                  ;
 12387                                  ; return:
 12388                                  ;  esi		points to next char
 12389                                  ;
 12390                                  ;  Changes no other regs.
 12391                                  ;
 12392                                  
 12393                                  		bits 32
 12394                                  
 12395                                  utf8_next:
 12396 0000525F 50                      		push eax
 12397 00005260 26803C3300              		cmp byte [es:ebx+esi],0
 12398 00005265 740C                    		jz utf8_next_90
 12399                                  utf8_next_50:
 12400 00005267 46                      		inc esi
 12401 00005268 268A0433                		mov al,[es:ebx+esi]
 12402 0000526C C0E806                  		shr al,6
 12403 0000526F 3C02                    		cmp al,2
 12404 00005271 74F4                    		jz utf8_next_50
 12405                                  utf8_next_90:
 12406 00005273 58                      		pop eax
 12407 00005274 C3                      		ret
 12408                                  
 12409                                  
 12410                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12411                                  ;
 12412                                  ; eax		key (bits 0-23: key, 24-31: scan code)
 12413                                  ;
 12414                                  
 12415                                  		bits 32
 12416                                  
 12417                                  edit_input:
 12418 00005275 89C2                    		mov edx,eax
 12419 00005277 C1EA18                  		shr edx,24
 12420 0000527A 25FFFF1F00              		and eax,1fffffh
 12421 0000527F 8B35[C8080000]          		mov esi,[edit_buf]
 12422                                  
 12423 00005285 8025[D0080000]FD        		and byte [edit_flags],~2		; clear redraw flag
 12424                                  
 12425 0000528C 89F3                    		mov ebx,esi
 12426 0000528E 4E                      		dec esi
 12427                                  
 12428                                  edit_input_10:
 12429 0000528F 46                      		inc esi
 12430 00005290 26803E00                		cmp byte [es:esi],0
 12431 00005294 75F9                    		jnz edit_input_10
 12432 00005296 89F1                    		mov ecx,esi
 12433 00005298 29D9                    		sub ecx,ebx
 12434                                  
 12435                                  		; ecx: string length
 12436                                  
 12437 0000529A 0FB735[CE080000]        		movzx esi,word [edit_buf_ptr]
 12438                                  
 12439 000052A1 80FA4B                  		cmp dl,keyLeft
 12440 000052A4 751B                    		jnz edit_input_20
 12441 000052A6 89F7                    		mov edi,esi
 12442 000052A8 E89DFFFFFF              		call utf8_prev
 12443 000052AD 39F7                    		cmp edi,esi
 12444 000052AF 0F8467010000            		jz edit_input_90
 12445 000052B5 668935[CE080000]        		mov [edit_buf_ptr],si
 12446 000052BC E915010000              		jmp edit_input_80
 12447                                  edit_input_20:
 12448 000052C1 80FA4D                  		cmp dl,keyRight
 12449 000052C4 751B                    		jnz edit_input_21
 12450 000052C6 89F7                    		mov edi,esi
 12451 000052C8 E892FFFFFF              		call utf8_next
 12452 000052CD 39F7                    		cmp edi,esi
 12453 000052CF 0F8447010000            		jz edit_input_90
 12454 000052D5 668935[CE080000]        		mov [edit_buf_ptr],si
 12455 000052DC E9F5000000              		jmp edit_input_80
 12456                                  edit_input_21:
 12457 000052E1 80FA4F                  		cmp dl,keyEnd
 12458 000052E4 7517                    		jnz edit_input_22
 12459 000052E6 26803C3300              		cmp byte [es:ebx+esi],0
 12460 000052EB 0F842B010000            		jz edit_input_90
 12461 000052F1 66890D[CE080000]        		mov [edit_buf_ptr],cx
 12462 000052F8 E9D9000000              		jmp edit_input_80
 12463                                  edit_input_22:
 12464 000052FD 80FA47                  		cmp dl,keyHome
 12465 00005300 7515                    		jnz edit_input_23
 12466 00005302 09F6                    		or esi,esi
 12467 00005304 0F8412010000            		jz edit_input_90
 12468 0000530A 668325[CE080000]00      		and word [edit_buf_ptr],0
 12469 00005312 E9BF000000              		jmp edit_input_80
 12470                                  edit_input_23:
 12471 00005317 80FA53                  		cmp dl,keyDel
 12472 0000531A 7529                    		jnz edit_input_30
 12473                                  edit_input_24:
 12474 0000531C 89F7                    		mov edi,esi
 12475 0000531E E83CFFFFFF              		call utf8_next
 12476 00005323 39F7                    		cmp edi,esi
 12477 00005325 0F84F1000000            		jz edit_input_90
 12478                                  edit_input_25:
 12479 0000532B 268A0433                		mov al,[es:ebx+esi]
 12480 0000532F 2688043B                		mov [es:ebx+edi],al
 12481 00005333 46                      		inc esi
 12482 00005334 47                      		inc edi
 12483 00005335 08C0                    		or al,al
 12484 00005337 75F2                    		jnz edit_input_25
 12485 00005339 800D[D0080000]02        		or byte [edit_flags],2		; redraw
 12486 00005340 E991000000              		jmp edit_input_80
 12487                                  edit_input_30:
 12488 00005345 83F808                  		cmp eax,keyBS
 12489 00005348 7518                    		jnz edit_input_35
 12490 0000534A 89F7                    		mov edi,esi
 12491 0000534C E8F9FEFFFF              		call utf8_prev
 12492 00005351 39F7                    		cmp edi,esi
 12493 00005353 0F84C3000000            		jz edit_input_90
 12494 00005359 668935[CE080000]        		mov [edit_buf_ptr],si
 12495 00005360 EBBA                    		jmp edit_input_24
 12496                                  edit_input_35:
 12497                                  
 12498 00005362 83F820                  		cmp eax,20h
 12499 00005365 0F82B1000000            		jb edit_input_90
 12500                                  
 12501                                  		; reject chars we can't display
 12502 0000536B 60                      		pusha
 12503 0000536C E843120000              		call char_width
 12504 00005371 09C9                    		or ecx,ecx
 12505 00005373 61                      		popa
 12506 00005374 0F84A2000000            		jz edit_input_90
 12507                                  
 12508 0000537A 800D[D0080000]02        		or byte [edit_flags],2		; redraw
 12509                                  
 12510 00005381 51                      		push ecx
 12511 00005382 53                      		push ebx
 12512 00005383 56                      		push esi
 12513 00005384 E81D0D0000              		call utf8_enc
 12514 00005389 5E                      		pop esi
 12515 0000538A 5B                      		pop ebx
 12516 0000538B 58                      		pop eax
 12517                                  
 12518 0000538C 0FB715[CC080000]        		movzx edx,word [edit_buf_len]
 12519 00005393 29C2                    		sub edx,eax
 12520 00005395 29CA                    		sub edx,ecx
 12521 00005397 0F827F000000            		jb edit_input_90
 12522 0000539D 83FA01                  		cmp edx,1
 12523 000053A0 727A                    		jb edit_input_90
 12524 000053A2 662B05[CE080000]        		sub ax,[edit_buf_ptr]
 12525 000053A9 66010D[CE080000]        		add [edit_buf_ptr],cx
 12526                                  
 12527                                  		; eax: bytes to copy (excl. final 0)
 12528                                  		; ecx: utf8 size
 12529                                  
 12530 000053B0 56                      		push esi
 12531                                  
 12532 000053B1 01C6                    		add esi,eax
 12533 000053B3 89F7                    		mov edi,esi
 12534 000053B5 01CF                    		add edi,ecx
 12535 000053B7 40                      		inc eax
 12536                                  edit_input_70:
 12537 000053B8 268A1433                		mov dl,[es:ebx+esi]
 12538 000053BC 2688143B                		mov [es:ebx+edi],dl
 12539 000053C0 4E                      		dec esi
 12540 000053C1 4F                      		dec edi
 12541 000053C2 48                      		dec eax
 12542 000053C3 75F3                    		jnz edit_input_70
 12543                                  
 12544 000053C5 5E                      		pop esi
 12545                                  
 12546 000053C6 BF[55010000]            		mov edi,utf8_buf
 12547                                  edit_input_75:
 12548 000053CB 8A07                    		mov al,[edi]
 12549 000053CD 26880433                		mov [es:ebx+esi],al
 12550 000053D1 47                      		inc edi
 12551 000053D2 46                      		inc esi
 12552 000053D3 49                      		dec ecx
 12553 000053D4 75F5                    		jnz edit_input_75
 12554                                  
 12555                                  edit_input_80:
 12556 000053D6 0FB735[CE080000]        		movzx esi,word [edit_buf_ptr]
 12557 000053DD B000                    		mov al,0
 12558 000053DF 26860433                		xchg al,[es:ebx+esi]
 12559 000053E3 50                      		push eax
 12560 000053E4 56                      		push esi
 12561 000053E5 53                      		push ebx
 12562                                  
 12563 000053E6 89DE                    		mov esi,ebx
 12564 000053E8 E8F00B0000              		call str_size
 12565                                  
 12566 000053ED 5B                      		pop ebx
 12567 000053EE 5E                      		pop esi
 12568 000053EF 58                      		pop eax
 12569 000053F0 26860433                		xchg al,[es:ebx+esi]
 12570 000053F4 66890D[D8080000]        		mov [edit_cursor],cx
 12571                                  
 12572 000053FB 89DE                    		mov esi,ebx
 12573 000053FD E8DB0B0000              		call str_size
 12574 00005402 66890D[DE080000]        		mov [edit_length],cx
 12575                                  
 12576 00005409 E8B2000000              		call edit_align
 12577                                  
 12578 0000540E F605[D0080000]02        		test byte [edit_flags],2	; redraw
 12579 00005415 7405                    		jz edit_input_90
 12580                                  
 12581                                  		; wait32
 12582                                  
 12583 00005417 E81C010000              		call edit_redraw
 12584                                  edit_input_90:
 12585 0000541C C3                      		ret
 12586                                  
 12587                                  
 12588                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12589                                  ; Write char at current cursor position.
 12590                                  ;
 12591                                  ;  eax		char
 12592                                  ;  [edit_bg]	background pixmap
 12593                                  ;
 12594                                  ; return:
 12595                                  ;  cursor position gets advanced
 12596                                  ;
 12597                                  
 12598                                  		bits 32
 12599                                  
 12600                                  edit_char:
 12601 0000541D 66FF35[85010000]        		push word [clip_r]
 12602 00005424 66FF35[83010000]        		push word [clip_l]
 12603                                  
 12604 0000542B 50                      		push eax
 12605                                  
 12606 0000542C 668B0D[BC080000]        		mov cx,[edit_x]
 12607 00005433 66890D[83010000]        		mov [clip_l],cx
 12608 0000543A 66030D[C0080000]        		add cx,[edit_width]
 12609 00005441 66890D[85010000]        		mov [clip_r],cx
 12610                                  
 12611 00005448 E89F100000              		call find_char
 12612                                  
 12613 0000544D 66833D[44010000]00      		cmp word [chr.x_advance],0
 12614 00005455 7E54                    		jle edit_char_80
 12615                                  
 12616 00005457 8B3D[C4080000]          		mov edi,[edit_bg]
 12617 0000545D 83C704                  		add edi,4
 12618 00005460 668B1D[C0080000]        		mov bx,[edit_width]
 12619 00005467 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
 12620 0000546F 66A1[DC080000]          		mov ax,[edit_y_ofs]
 12621 00005475 66F7EB                  		imul bx
 12622 00005478 0FB7C0                  		movzx eax,ax
 12623 0000547B 01C7                    		add edi,eax
 12624 0000547D 668B0D[75010000]        		mov cx,[gfx_cur_x]
 12625 00005484 662B0D[BC080000]        		sub cx,[edit_x]
 12626 0000548B 660FAF0D[6B010000]      		imul cx,[pixel_bytes]
 12627 00005493 0FBFC9                  		movsx ecx,cx
 12628 00005496 01CF                    		add edi,ecx
 12629                                  
 12630 00005498 668B15[44010000]        		mov dx,[chr.x_advance]
 12631 0000549F 668B0D[14010000]        		mov cx,[font.height]
 12632                                  
 12633 000054A6 E8CE130000              		call restore_bg
 12634                                  
 12635                                  edit_char_80:
 12636 000054AB 58                      		pop eax
 12637                                  
 12638 000054AC E8860C0000              		call char_xy
 12639                                  
 12640 000054B1 668F05[83010000]        		pop word [clip_l]
 12641 000054B8 668F05[85010000]        		pop word [clip_r]
 12642                                  
 12643                                  edit_char_90:
 12644 000054BF C3                      		ret
 12645                                  
 12646                                  
 12647                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12648                                  ; Ensure the cursor is always within the visible area.
 12649                                  ;
 12650                                  
 12651                                  		bits 32
 12652                                  
 12653                                  edit_align:
 12654 000054C0 668B2D[DA080000]        		mov bp,[edit_shift]
 12655 000054C7 668B0D[C0080000]        		mov cx,[edit_width]
 12656 000054CE 6689EB                  		mov bx,bp
 12657 000054D1 6609ED                  		or bp,bp
 12658 000054D4 741E                    		jz edit_align_30
 12659 000054D6 66A1[DE080000]          		mov ax,[edit_length]
 12660 000054DC 6640                    		inc ax
 12661 000054DE 6629D8                  		sub ax,bx
 12662 000054E1 6629C8                  		sub ax,cx
 12663 000054E4 7D0E                    		jge edit_align_30
 12664 000054E6 66F7D8                  		neg ax
 12665 000054E9 6639D8                  		cmp ax,bx
 12666 000054EC 7C03                    		jl edit_align_20
 12667 000054EE 6689D8                  		mov ax,bx
 12668                                  edit_align_20:
 12669 000054F1 6629C3                  		sub bx,ax
 12670                                  edit_align_30:
 12671                                  
 12672 000054F4 6689CA                  		mov dx,cx
 12673 000054F7 66D1EA                  		shr dx,1
 12674 000054FA 66A1[D8080000]          		mov ax,[edit_cursor]
 12675 00005500 6629E8                  		sub ax,bp
 12676 00005503 6639D0                  		cmp ax,dx
 12677 00005506 7F10                    		jg edit_align_50
 12678                                  
 12679 00005508 6683E800                		sub ax,0		; still 0 pixel away?
 12680 0000550C 7D16                    		jge edit_align_80
 12681 0000550E 6601C3                  		add bx,ax
 12682 00005511 7D11                    		jge edit_align_80
 12683 00005513 6631DB                  		xor bx,bx
 12684 00005516 EB0C                    		jmp edit_align_80
 12685                                  edit_align_50:
 12686 00005518 6629C1                  		sub cx,ax
 12687 0000551B 6683E901                		sub cx,1		; still 1 pixel away?
 12688 0000551F 7D03                    		jge edit_align_80
 12689 00005521 6629CB                  		sub bx,cx
 12690                                  edit_align_80:
 12691 00005524 6639EB                  		cmp bx,bp
 12692 00005527 740E                    		jz edit_align_90
 12693 00005529 66891D[DA080000]        		mov [edit_shift],bx
 12694 00005530 800D[D0080000]02        		or byte [edit_flags],2	; redraw
 12695                                  edit_align_90:
 12696 00005537 C3                      		ret
 12697                                  
 12698                                  
 12699                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12700                                  ;
 12701                                  		bits 32
 12702                                  
 12703                                  edit_redraw:
 12704 00005538 66A1[BC080000]          		mov ax,[edit_x]
 12705 0000553E 662B05[DA080000]        		sub ax,[edit_shift]
 12706 00005545 66A3[75010000]          		mov [gfx_cur_x],ax
 12707 0000554B 66A1[BE080000]          		mov ax,[edit_y]
 12708 00005551 660305[DC080000]        		add ax,[edit_y_ofs]
 12709 00005558 66A3[77010000]          		mov [gfx_cur_y],ax
 12710                                  
 12711 0000555E 8B35[C8080000]          		mov esi,[edit_buf]
 12712                                  edit_redraw_20:
 12713 00005564 E8E50A0000              		call utf8_dec
 12714 00005569 09C0                    		or eax,eax
 12715 0000556B 7409                    		jz edit_redraw_50
 12716 0000556D 56                      		push esi
 12717 0000556E E8AAFEFFFF              		call edit_char
 12718 00005573 5E                      		pop esi
 12719 00005574 EBEE                    		jmp edit_redraw_20
 12720                                  edit_redraw_50:
 12721 00005576 66A1[BC080000]          		mov ax,[edit_x]
 12722 0000557C 660305[C0080000]        		add ax,[edit_width]
 12723 00005583 662B05[75010000]        		sub ax,[gfx_cur_x]
 12724 0000558A 7E47                    		jle edit_redraw_90
 12725                                  
 12726 0000558C 66FF35[BE080000]        		push word [edit_y]
 12727 00005593 668F05[77010000]        		pop word [gfx_cur_y]
 12728 0000559A 6689C2                  		mov dx,ax
 12729 0000559D 660FAF05[6B010000]      		imul ax,[pixel_bytes]
 12730 000055A5 668B0D[C2080000]        		mov cx,[edit_height]
 12731 000055AC 668B1D[C0080000]        		mov bx,[edit_width]
 12732 000055B3 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
 12733 000055BB 8B3D[C4080000]          		mov edi,[edit_bg]
 12734 000055C1 83C704                  		add edi,4
 12735 000055C4 0FB7DB                  		movzx ebx,bx
 12736 000055C7 0FB7C0                  		movzx eax,ax
 12737 000055CA 01DF                    		add edi,ebx
 12738 000055CC 29C7                    		sub edi,eax
 12739                                  
 12740 000055CE E8A6120000              		call restore_bg
 12741                                  edit_redraw_90:
 12742 000055D3 C3                      		ret
 12743                                  
 12744                                  
 12745                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12746                                  ;
 12747                                  
 12748                                  		bits 32
 12749                                  
 12750                                  edit_hide_cursor:
 12751 000055D4 F605[D0080000]01        		test byte [edit_flags],1
 12752 000055DB 7457                    		jz edit_hide_cursor_90
 12753 000055DD 8B3D[D4080000]          		mov edi,[edit_saved_cursor]
 12754 000055E3 09FF                    		or edi,edi
 12755 000055E5 744D                    		jz edit_hide_cursor_90
 12756                                  
 12757 000055E7 668B15[D8080000]        		mov dx,[edit_cursor]
 12758 000055EE 662B15[DA080000]        		sub dx,[edit_shift]
 12759 000055F5 660315[BC080000]        		add dx,[edit_x]
 12760 000055FC 668915[75010000]        		mov [gfx_cur_x],dx
 12761 00005603 66FF35[BE080000]        		push word [edit_y]
 12762 0000560A 668F05[77010000]        		pop word [gfx_cur_y]
 12763                                  
 12764 00005611 26668B17                		mov dx,[es:edi]
 12765 00005615 26668B4F02              		mov cx,[es:edi+2]
 12766 0000561A 83C704                  		add edi,4
 12767 0000561D 6689D3                  		mov bx,dx
 12768 00005620 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
 12769 00005628 E84C120000              		call restore_bg
 12770                                  
 12771 0000562D 8025[D0080000]FE        		and byte [edit_flags],~1
 12772                                  edit_hide_cursor_90:
 12773 00005634 C3                      		ret
 12774                                  
 12775                                  
 12776                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12777                                  ;
 12778                                  
 12779                                  		bits 32
 12780                                  
 12781                                  edit_show_cursor:
 12782 00005635 F605[D0080000]01        		test byte [edit_flags],1
 12783 0000563C 0F858E000000            		jnz edit_show_cursor_90
 12784 00005642 A1[D4080000]            		mov eax,[edit_saved_cursor]
 12785 00005647 09C0                    		or eax,eax
 12786 00005649 7518                    		jnz edit_show_cursor_10
 12787 0000564B 31C9                    		xor ecx,ecx
 12788 0000564D 41                      		inc ecx
 12789 0000564E 0FB705[C2080000]        		movzx eax,word [edit_height]
 12790 00005655 E87DEAFFFF              		call alloc_fb
 12791 0000565A 09C0                    		or eax,eax
 12792 0000565C 7472                    		jz edit_show_cursor_90
 12793 0000565E A3[D4080000]            		mov [edit_saved_cursor],eax
 12794                                  edit_show_cursor_10:
 12795                                  
 12796 00005663 668B15[D8080000]        		mov dx,[edit_cursor]
 12797 0000566A 662B15[DA080000]        		sub dx,[edit_shift]
 12798 00005671 660315[BC080000]        		add dx,[edit_x]
 12799 00005678 668915[75010000]        		mov [gfx_cur_x],dx
 12800 0000567F 66FF35[BE080000]        		push word [edit_y]
 12801 00005686 668F05[77010000]        		pop word [gfx_cur_y]
 12802                                  
 12803 0000568D 31D2                    		xor edx,edx
 12804 0000568F 42                      		inc edx
 12805 00005690 668B0D[C2080000]        		mov cx,[edit_height]
 12806 00005697 8D7804                  		lea edi,[eax+4]
 12807 0000569A E82A110000              		call save_bg
 12808                                  
 12809 0000569F 0FA0                    		push fs
 12810 000056A1 0FA8                    		push gs
 12811                                  
 12812 000056A3 E880120000              		call screen_segs
 12813                                  
 12814 000056A8 0FB70D[C2080000]        		movzx ecx,word [edit_height]
 12815                                  edit_show_cursor_60:
 12816 000056AF 51                      		push ecx
 12817 000056B0 E8BF020000              		call goto_xy
 12818 000056B5 FF15[F9000000]          		call [setpixel_t]
 12819 000056BB 59                      		pop ecx
 12820 000056BC 66FF05[77010000]        		inc word [gfx_cur_y]
 12821 000056C3 E2EA                    		loop edit_show_cursor_60
 12822                                  
 12823 000056C5 0FA9                    		pop gs
 12824 000056C7 0FA1                    		pop fs
 12825                                  
 12826 000056C9 800D[D0080000]01        		or byte [edit_flags],1
 12827                                  
 12828                                  edit_show_cursor_90:
 12829 000056D0 C3                      		ret
 12830                                  
 12831                                  
 12832                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12833                                  ;
 12834                                  ; esi		initial text
 12835                                  ;
 12836                                  
 12837                                  		bits 32
 12838                                  
 12839                                  edit_init:
 12840 000056D1 31C9                    		xor ecx,ecx
 12841 000056D3 66890D[DA080000]        		mov [edit_shift],cx
 12842 000056DA 8B3D[C8080000]          		mov edi,[edit_buf]
 12843                                  edit_init_10:
 12844 000056E0 26AC                    		es lodsb
 12845 000056E2 08C0                    		or al,al
 12846 000056E4 740D                    		jz edit_init_20
 12847 000056E6 AA                      		stosb
 12848 000056E7 41                      		inc ecx
 12849 000056E8 663B0D[CC080000]        		cmp cx,[edit_buf_len]
 12850 000056EF 72EF                    		jb edit_init_10
 12851 000056F1 49                      		dec ecx
 12852 000056F2 4F                      		dec edi
 12853                                  edit_init_20:
 12854 000056F3 26C60700                		mov byte [es:edi],0
 12855 000056F7 66890D[CE080000]        		mov [edit_buf_ptr],cx
 12856                                  
 12857 000056FE 8B35[C8080000]          		mov esi,[edit_buf]
 12858 00005704 E8D4080000              		call str_size
 12859                                  
 12860 00005709 66890D[D8080000]        		mov [edit_cursor],cx
 12861                                  
 12862 00005710 E8ABFDFFFF              		call edit_align
 12863 00005715 E81EFEFFFF              		call edit_redraw
 12864 0000571A E816FFFFFF              		call edit_show_cursor
 12865                                  edit_init_90:
 12866 0000571F C3                      		ret
 12867                                  
 12868                                  
 12869                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12870                                  ; Initialize internal edit data.
 12871                                  ;
 12872                                  ;  esi		parameter array
 12873                                  ;
 12874                                  ; return:
 12875                                  ;  CF		invalid array/out of memory
 12876                                  ;
 12877                                  ; Note:
 12878                                  ;  esi unchanged
 12879                                  ;
 12880                                  
 12881                                  		bits 32
 12882                                  
 12883                                  edit_init_params:
 12884 00005720 2666833E06              		cmp word [es:esi],6
 12885 00005725 7237                    		jc edit_init_params_90
 12886                                  
 12887 00005727 56                      		push esi
 12888 00005728 B81B000000              		mov eax,2+5*5
 12889 0000572D E8BCC3FFFF              		call calloc
 12890 00005732 5E                      		pop esi
 12891 00005733 09C0                    		or eax,eax
 12892 00005735 7426                    		jz edit_init_params_80
 12893                                  
 12894 00005737 26C6461B0A              		mov byte [es:esi+2+5*5],t_array
 12895 0000573C 2689461C                		mov [es:esi+2+5*5+1],eax
 12896                                  
 12897 00005740 2666C7000500            		mov word [es:eax],5
 12898                                  
 12899 00005746 26C6400201              		mov byte [es:eax+2+5*0],t_int
 12900 0000574B 26C6400701              		mov byte [es:eax+2+5*1],t_int
 12901 00005750 26C6400C01              		mov byte [es:eax+2+5*2],t_int
 12902 00005755 26C6401101              		mov byte [es:eax+2+5*3],t_int
 12903                                  
 12904 0000575A F8                      		clc
 12905 0000575B EB01                    		jmp edit_init_params_90
 12906                                  
 12907                                  edit_init_params_80:
 12908 0000575D F9                      		stc
 12909                                  
 12910                                  edit_init_params_90:
 12911 0000575E C3                      		ret
 12912                                  
 12913                                  
 12914                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12915                                  ; Free internal edit data.
 12916                                  ;
 12917                                  ;  esi		parameter array
 12918                                  ;
 12919                                  ; Note:
 12920                                  ;  esi unchanged
 12921                                  ;
 12922                                  
 12923                                  		bits 32
 12924                                  
 12925                                  edit_done_params:
 12926 0000575F 2666833E06              		cmp word [es:esi],6
 12927 00005764 7226                    		jc edit_done_params_90
 12928                                  
 12929 00005766 26807E1B0A              		cmp byte [es:esi+2+5*5],t_array
 12930 0000576B 751F                    		jnz edit_done_params_90
 12931                                  
 12932 0000576D 268B7E1C                		mov edi,[es:esi+2+5*5+1]
 12933 00005771 2666833F03              		cmp word [es:edi],3
 12934 00005776 7214                    		jc edit_done_params_90
 12935                                  
 12936                                  		; mov byte [es:eax+2+5*0],t_int
 12937                                  		; mov byte [es:eax+2+5*1],t_int
 12938                                  		; mov byte [es:eax+2+5*2],t_int
 12939                                  
 12940 00005778 89F8                    		mov eax,edi
 12941 0000577A 56                      		push esi
 12942 0000577B E830C4FFFF              		call free
 12943 00005780 5E                      		pop esi
 12944                                  
 12945 00005781 31C0                    		xor eax,eax
 12946 00005783 26C6461B00              		mov byte [es:esi+2+5*5],t_none
 12947 00005788 2689461C                		mov [es:esi+2+5*5+1],eax
 12948                                  
 12949                                  edit_done_params_90:
 12950 0000578C C3                      		ret
 12951                                  
 12952                                  
 12953                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12954                                  ; Store internal input field state.
 12955                                  ;
 12956                                  ;  esi		parameter array
 12957                                  ;
 12958                                  ; Notes:
 12959                                  ;  - no consistency checks done, esi _must_ point to a valid array
 12960                                  ;  - esi unchanged
 12961                                  ;
 12962                                  
 12963                                  		bits 32
 12964                                  
 12965                                  edit_put_params:
 12966 0000578D 26807E1B0A              		cmp byte [es:esi+2+5*5],t_array
 12967 00005792 754E                    		jnz edit_put_params_90
 12968                                  
 12969 00005794 268B7E1C                		mov edi,[es:esi+2+5*5+1]
 12970 00005798 2666833F05              		cmp word [es:edi],5
 12971 0000579D 7243                    		jb edit_put_params_90
 12972                                  
 12973 0000579F 66FF35[CE080000]        		push word [edit_buf_ptr]
 12974 000057A6 26668F4703              		pop word [es:edi+2+5*0+1]
 12975                                  		
 12976 000057AB 66FF35[D8080000]        		push word [edit_cursor]
 12977 000057B2 26668F4708              		pop word [es:edi+2+5*1+1]
 12978                                  		
 12979 000057B7 66FF35[DA080000]        		push word [edit_shift]
 12980 000057BE 26668F470D              		pop word [es:edi+2+5*2+1]
 12981                                  
 12982 000057C3 FF35[D0080000]          		push dword [edit_flags]
 12983 000057C9 268F4712                		pop dword [es:edi+2+5*3+1]
 12984                                  
 12985 000057CD A1[D4080000]            		mov eax,[edit_saved_cursor]
 12986 000057D2 26894717                		mov [es:edi+2+5*4+1],eax
 12987 000057D6 B200                    		mov dl,t_none
 12988 000057D8 09C0                    		or eax,eax
 12989 000057DA 7402                    		jz edit_put_params_50
 12990 000057DC B20C                    		mov dl,t_ptr
 12991                                  edit_put_params_50:
 12992 000057DE 26885716                		mov [es:edi+2+5*4],dl
 12993                                  
 12994                                  edit_put_params_90:
 12995 000057E2 C3                      		ret
 12996                                  
 12997                                  
 12998                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 12999                                  ; Copy input field parameters into internal structures.
 13000                                  ;
 13001                                  ;  esi		parameter array
 13002                                  ;
 13003                                  ; return:
 13004                                  ;  edi:		internal data array
 13005                                  ;  CF		invalid data
 13006                                  ;
 13007                                  
 13008                                  		bits 32
 13009                                  
 13010                                  edit_get_params:
 13011 000057E3 2666833E06              		cmp word [es:esi],6
 13012 000057E8 0F823B010000            		jc edit_get_params_90
 13013                                  
 13014 000057EE 26807E0201              		cmp byte [es:esi+2+5*0],t_int
 13015 000057F3 0F852F010000            		jnz edit_get_params_80
 13016 000057F9 2666FF7603              		push word [es:esi+2+5*0+1]
 13017 000057FE 668F05[BC080000]        		pop word [edit_x]
 13018                                  
 13019 00005805 26807E0701              		cmp byte [es:esi+2+5*1],t_int
 13020 0000580A 0F8518010000            		jnz edit_get_params_80
 13021 00005810 2666FF7608              		push word [es:esi+2+5*1+1]
 13022 00005815 668F05[BE080000]        		pop word [edit_y]
 13023                                  
 13024 0000581C 26807E0C0C              		cmp byte [es:esi+2+5*2],t_ptr
 13025 00005821 0F8501010000            		jnz edit_get_params_80
 13026 00005827 26FF760D                		push dword [es:esi+2+5*2+1]
 13027 0000582B 8F05[C4080000]          		pop dword [edit_bg]
 13028                                  
 13029 00005831 26807E1104              		cmp byte [es:esi+2+5*3],t_string
 13030 00005836 0F85EC000000            		jnz edit_get_params_80
 13031 0000583C 268B4612                		mov eax,[es:esi+2+5*3+1]
 13032 00005840 A3[C8080000]            		mov [edit_buf],eax
 13033                                  
 13034 00005845 26807E1601              		cmp byte [es:esi+2+5*4],t_int
 13035 0000584A 0F85D8000000            		jnz edit_get_params_80
 13036 00005850 2666FF7617              		push word [es:esi+2+5*4+1]
 13037 00005855 668F05[CC080000]        		pop word [edit_buf_len]
 13038                                  
 13039 0000585C 26807E1B00              		cmp byte [es:esi+2+5*5],t_none
 13040 00005861 7507                    		jnz edit_get_params_40
 13041 00005863 31FF                    		xor edi,edi
 13042 00005865 E9BF000000              		jmp edit_get_params_90
 13043                                  edit_get_params_40:
 13044 0000586A 26807E1B0A              		cmp byte [es:esi+2+5*5],t_array
 13045 0000586F 0F85B3000000            		jnz edit_get_params_80
 13046 00005875 268B7E1C                		mov edi,[es:esi+2+5*5+1]
 13047 00005879 2666833F05              		cmp word [es:edi],5		; array length
 13048 0000587E 0F82A4000000            		jb edit_get_params_80
 13049                                  
 13050 00005884 26807F0201              		cmp byte [es:edi+2+5*0],t_int
 13051 00005889 0F8599000000            		jnz edit_get_params_80
 13052 0000588F 2666FF7703              		push word [es:edi+2+5*0+1]
 13053 00005894 668F05[CE080000]        		pop word [edit_buf_ptr]
 13054                                  
 13055 0000589B 26807F0701              		cmp byte [es:edi+2+5*1],t_int
 13056 000058A0 0F8582000000            		jnz edit_get_params_80
 13057 000058A6 2666FF7708              		push word [es:edi+2+5*1+1]
 13058 000058AB 668F05[D8080000]        		pop word [edit_cursor]
 13059                                  
 13060 000058B2 26807F0C01              		cmp byte [es:edi+2+5*2],t_int
 13061 000058B7 756F                    		jnz edit_get_params_80
 13062 000058B9 2666FF770D              		push word [es:edi+2+5*2+1]
 13063 000058BE 668F05[DA080000]        		pop word [edit_shift]
 13064                                  
 13065 000058C5 26807F1101              		cmp byte [es:edi+2+5*3],t_int
 13066 000058CA 755C                    		jnz edit_get_params_80
 13067 000058CC 26FF7712                		push dword [es:edi+2+5*3+1]
 13068 000058D0 8F05[D0080000]          		pop dword [edit_flags]
 13069                                  
 13070 000058D6 26807F1600              		cmp byte [es:edi+2+5*4],t_none
 13071 000058DB 7411                    		jz edit_get_params_60
 13072 000058DD 26807F160C              		cmp byte [es:edi+2+5*4],t_ptr
 13073 000058E2 7544                    		jnz edit_get_params_80
 13074 000058E4 26FF7717                		push dword [es:edi+2+5*4+1]
 13075 000058E8 8F05[D4080000]          		pop dword [edit_saved_cursor]
 13076                                  edit_get_params_60:
 13077 000058EE A1[C4080000]            		mov eax,[edit_bg]
 13078 000058F3 26668B10                		mov dx,[es:eax]
 13079 000058F7 668915[C0080000]        		mov [edit_width],dx
 13080 000058FE 26668B5002              		mov dx,[es:eax+2]
 13081 00005903 668915[C2080000]        		mov [edit_height],dx
 13082                                  
 13083 0000590A 668B0D[14010000]        		mov cx,[font.height]
 13084 00005911 6629CA                  		sub dx,cx
 13085 00005914 66D1FA                  		sar dx,1
 13086 00005917 668915[DC080000]        		mov [edit_y_ofs],dx
 13087                                  
 13088 0000591E 66833D[CC080000]02      		cmp word [edit_buf_len],2		; at least 1 char
 13089 00005926 7301                    		jnc edit_get_params_90
 13090                                  
 13091                                  edit_get_params_80:
 13092                                  
 13093 00005928 F9                      		stc
 13094                                  edit_get_params_90:
 13095 00005929 C3                      		ret
 13096                                  
 13097                                  
 13098                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13099                                  ;
 13100                                  ; basic graphics functions
 13101                                  ;
 13102                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13103                                  
 13104                                  
 13105                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13106                                  ; Map next window segment.
 13107                                  ;
 13108                                  
 13109                                  		bits 32
 13110                                  
 13111                                  inc_winseg:
 13112 0000592A 50                      		push eax
 13113 0000592B A0[74010000]            		mov al,[mapped_window]
 13114 00005930 FEC0                    		inc al
 13115 00005932 E802000000              		call set_win
 13116 00005937 58                      		pop eax
 13117 00005938 C3                      		ret
 13118                                  
 13119                                  
 13120                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13121                                  ; Map window segment.
 13122                                  ;
 13123                                  ;  al		window segment
 13124                                  ;
 13125                                  
 13126                                  		bits 32
 13127                                  
 13128                                  set_win:
 13129 00005939 57                      		push edi
 13130 0000593A 803D[68010000]00        		cmp byte [vbe_active],0
 13131 00005941 742F                    		jz set_win_90
 13132 00005943 3805[74010000]          		cmp [mapped_window],al
 13133 00005949 7427                    		jz set_win_90
 13134 0000594B 60                      		pusha
 13135 0000594C A2[74010000]            		mov [mapped_window],al
 13136 00005951 8A25[73010000]          		mov ah,[window_inc]
 13137 00005957 F6E4                    		mul ah
 13138 00005959 92                      		xchg eax,edx
 13139 0000595A 66B8054F                		mov ax,4f05h
 13140 0000595E 31DB                    		xor ebx,ebx
 13141 00005960 66833D[71010000]00      		cmp word [window_seg_r],0
 13142 00005968 7405                    		jz set_win_50
 13143 0000596A 60                      		pusha
 13144 0000596B 43                      		inc ebx
 13145 0000596C CD10                    		int 10h
 13146 0000596E 61                      		popa
 13147                                  set_win_50:
 13148 0000596F CD10                    		int 10h
 13149 00005971 61                      		popa
 13150                                  set_win_90:
 13151 00005972 5F                      		pop edi
 13152 00005973 C3                      		ret
 13153                                  
 13154                                  
 13155                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13156                                  ; Go to current cursor position.
 13157                                  ;
 13158                                  ; return:
 13159                                  ;  edi		offset
 13160                                  ;  correct gfx segment is mapped
 13161                                  ;
 13162                                  ; Notes:
 13163                                  ;  - changes no regs other than edi
 13164                                  ;
 13165                                  
 13166                                  		bits 32
 13167                                  
 13168                                  goto_xy:
 13169 00005974 50                      		push eax
 13170 00005975 52                      		push edx
 13171 00005976 66A1[77010000]          		mov ax,[gfx_cur_y]
 13172 0000597C 0FB73D[75010000]        		movzx edi,word [gfx_cur_x]
 13173 00005983 0FAF3D[6B010000]        		imul edi,[pixel_bytes]
 13174 0000598A 66F725[ED000000]        		mul word [screen_line_len]
 13175 00005991 6601F8                  		add ax,di
 13176 00005994 6683D200                		adc dx,0
 13177 00005998 6650                    		push ax
 13178 0000599A 6692                    		xchg ax,dx
 13179 0000599C E898FFFFFF              		call set_win
 13180 000059A1 665F                    		pop di
 13181 000059A3 5A                      		pop edx
 13182 000059A4 58                      		pop eax
 13183 000059A5 C3                      		ret
 13184                                  
 13185                                  
 13186                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13187                                  ; Set active color.
 13188                                  ;
 13189                                  ; eax		color
 13190                                  ;
 13191                                  ; return:
 13192                                  ;  [gfx_color]	color
 13193                                  ;
 13194                                  
 13195                                  		bits 32
 13196                                  
 13197                                  setcolor:
 13198 000059A6 A3[A4010000]            		mov [gfx_color],eax
 13199 000059AB C3                      		ret
 13200                                  
 13201                                  
 13202                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13203                                  ; Encode rgb value to color.
 13204                                  ;
 13205                                  ;  eax		rgb value
 13206                                  ;
 13207                                  ; return:
 13208                                  ;  eax		color
 13209                                  ;
 13210                                  
 13211                                  		bits 32
 13212                                  
 13213                                  encode_color:
 13214 000059AC 803D[69010000]10        		cmp byte [pixel_bits],16
 13215 000059B3 751B                    		jnz encode_color_90
 13216 000059B5 52                      		push edx
 13217 000059B6 31D2                    		xor edx,edx
 13218 000059B8 C1E008                  		shl eax,8
 13219 000059BB 0FA4C205                		shld edx,eax,5
 13220 000059BF C1E008                  		shl eax,8
 13221 000059C2 0FA4C206                		shld edx,eax,6
 13222 000059C6 C1E008                  		shl eax,8
 13223 000059C9 0FA4C205                		shld edx,eax,5
 13224 000059CD 89D0                    		mov eax,edx
 13225 000059CF 5A                      		pop edx
 13226                                  encode_color_90:
 13227 000059D0 C3                      		ret
 13228                                  
 13229                                  
 13230                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13231                                  ; Decode color to rgb.
 13232                                  ;
 13233                                  ;  eax		color
 13234                                  ;
 13235                                  ; return:
 13236                                  ;  eax		rgb value
 13237                                  ;
 13238                                  
 13239                                  		bits 32
 13240                                  
 13241                                  decode_color:
 13242 000059D1 803D[69010000]10        		cmp byte [pixel_bits],16
 13243 000059D8 7527                    		jnz decode_color_90
 13244 000059DA 52                      		push edx
 13245 000059DB 31D2                    		xor edx,edx
 13246 000059DD C1E010                  		shl eax,16
 13247 000059E0 0FA4C205                		shld edx,eax,5
 13248 000059E4 0FA4C203                		shld edx,eax,3
 13249 000059E8 C1E005                  		shl eax,5
 13250 000059EB 0FA4C206                		shld edx,eax,6
 13251 000059EF 0FA4C202                		shld edx,eax,2
 13252 000059F3 C1E006                  		shl eax,6
 13253 000059F6 0FA4C205                		shld edx,eax,5
 13254 000059FA 0FA4C203                		shld edx,eax,3
 13255 000059FE 89D0                    		mov eax,edx
 13256 00005A00 5A                      		pop edx
 13257                                  decode_color_90:
 13258 00005A01 C3                      		ret
 13259                                  
 13260                                  
 13261                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13262                                  ; Look up rgb value for palette entry.
 13263                                  ;
 13264                                  ;  eax		palette index
 13265                                  ;
 13266                                  ; return:
 13267                                  ;  eax		color
 13268                                  ;
 13269                                  
 13270                                  		bits 32
 13271                                  
 13272                                  pal_to_color:
 13273 00005A02 8D0440                  		lea eax,[eax+2*eax]
 13274 00005A05 0305[5D010000]          		add eax,[gfx_pal]
 13275 00005A0B 268B00                  		mov eax,[es:eax]
 13276 00005A0E 0FC8                    		bswap eax
 13277 00005A10 C1E808                  		shr eax,8
 13278 00005A13 C3                      		ret
 13279                                  
 13280                                  
 13281                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13282                                  ; Draw a line.
 13283                                  ;
 13284                                  ; [line_x0], [line_y0]	start
 13285                                  ; [line_x1], [line_y1]	end
 13286                                  ;
 13287                                  
 13288                                  		bits 32
 13289                                  
 13290                                  line:
 13291 00005A14 0FA0                    		push fs
 13292 00005A16 0FA8                    		push gs
 13293                                  
 13294 00005A18 31C0                    		xor eax,eax
 13295 00005A1A 31DB                    		xor ebx,ebx
 13296 00005A1C 6640                    		inc ax
 13297 00005A1E 6643                    		inc bx
 13298 00005A20 8B35[93010000]          		mov esi,[line_x1]
 13299 00005A26 2B35[8B010000]          		sub esi,[line_x0]
 13300 00005A2C 7904                    		jns line_10
 13301 00005A2E F7DE                    		neg esi
 13302 00005A30 F7D8                    		neg eax
 13303                                  line_10:
 13304 00005A32 8B2D[97010000]          		mov ebp,[line_y1]
 13305 00005A38 2B2D[8F010000]          		sub ebp,[line_y0]
 13306 00005A3E 7904                    		jns line_20
 13307 00005A40 F7DD                    		neg ebp
 13308 00005A42 F7DB                    		neg ebx
 13309                                  line_20:
 13310 00005A44 E8DF0E0000              		call screen_segs
 13311                                  
 13312 00005A49 91                      		xchg eax,ecx
 13313 00005A4A A1[ED000000]            		mov eax,[screen_line_len]
 13314 00005A4F F7EB                    		imul ebx
 13315 00005A51 92                      		xchg eax,edx
 13316                                  		
 13317 00005A52 A1[8F010000]            		mov eax,[line_y0]
 13318 00005A57 52                      		push edx
 13319 00005A58 F72D[ED000000]          		imul dword [screen_line_len]
 13320 00005A5E 5A                      		pop edx
 13321 00005A5F 97                      		xchg eax,edi
 13322                                  
 13323 00005A60 A1[8B010000]            		mov eax,[line_x0]
 13324 00005A65 0FAF05[6B010000]        		imul eax,[pixel_bytes]
 13325                                  
 13326 00005A6C 01C7                    		add edi,eax
 13327                                  
 13328 00005A6E 803D[6B010000]01        		cmp byte [pixel_bytes],1
 13329 00005A75 762A                    		jbe line_25
 13330 00005A77 803D[6B010000]02        		cmp byte [pixel_bytes],2
 13331 00005A7E 7413                    		jz line_23
 13332 00005A80 C125[8B010000]02        		shl dword [line_x0],2
 13333 00005A87 C125[93010000]02        		shl dword [line_x1],2
 13334 00005A8E C1E102                  		shl ecx,2
 13335 00005A91 EB0E                    		jmp line_25
 13336                                  line_23:
 13337 00005A93 D125[8B010000]          		shl dword [line_x0],1
 13338 00005A99 D125[93010000]          		shl dword [line_x1],1
 13339 00005A9F D1E1                    		shl ecx,1
 13340                                  line_25:
 13341                                  
 13342                                  		; edi -> address
 13343                                  		; ecx -> d_x
 13344                                  		; edx -> d_y
 13345                                  
 13346 00005AA1 39EE                    		cmp esi,ebp
 13347 00005AA3 7C36                    		jl hline_40
 13348                                  
 13349 00005AA5 09F6                    		or esi,esi
 13350 00005AA7 7468                    		jz line_60
 13351                                  
 13352 00005AA9 8935[9B010000]          		mov [line_tmp],esi
 13353 00005AAF D1EE                    		shr esi,1
 13354 00005AB1 F7DE                    		neg esi
 13355                                  
 13356 00005AB3 A1[93010000]            		mov eax,[line_x1]
 13357 00005AB8 2905[8B010000]          		sub [line_x0],eax
 13358                                  
 13359                                  line_30:
 13360 00005ABE E86A000000              		call line_pp
 13361                                  
 13362 00005AC3 01CF                    		add edi,ecx
 13363 00005AC5 010D[8B010000]          		add [line_x0],ecx
 13364 00005ACB 7444                    		jz line_60
 13365 00005ACD 01EE                    		add esi,ebp
 13366 00005ACF 73ED                    		jnc line_30
 13367 00005AD1 2B35[9B010000]          		sub esi,[line_tmp]
 13368 00005AD7 01D7                    		add edi,edx
 13369 00005AD9 EBE3                    		jmp line_30
 13370                                  
 13371                                  hline_40:
 13372 00005ADB 09ED                    		or ebp,ebp
 13373 00005ADD 7432                    		jz line_60
 13374                                  
 13375 00005ADF 892D[9B010000]          		mov [line_tmp],ebp
 13376 00005AE5 D1ED                    		shr ebp,1
 13377 00005AE7 F7DD                    		neg ebp
 13378                                  
 13379 00005AE9 A1[97010000]            		mov eax,[line_y1]
 13380 00005AEE 2905[8F010000]          		sub [line_y0],eax
 13381                                  
 13382                                  line_50:
 13383 00005AF4 E834000000              		call line_pp
 13384                                  
 13385 00005AF9 01D7                    		add edi,edx
 13386 00005AFB 011D[8F010000]          		add [line_y0],ebx
 13387 00005B01 740E                    		jz line_60
 13388 00005B03 01F5                    		add ebp,esi
 13389 00005B05 73ED                    		jnc line_50
 13390 00005B07 2B2D[9B010000]          		sub ebp,[line_tmp]
 13391 00005B0D 01CF                    		add edi,ecx
 13392 00005B0F EBE3                    		jmp line_50
 13393                                  line_60:
 13394                                  		; now draw final point
 13395                                  
 13396 00005B11 A1[97010000]            		mov eax,[line_y1]
 13397 00005B16 F72D[ED000000]          		imul dword [screen_line_len]
 13398 00005B1C 0305[93010000]          		add eax,[line_x1]
 13399 00005B22 97                      		xchg eax,edi
 13400                                  
 13401 00005B23 E805000000              		call line_pp
 13402                                  
 13403 00005B28 0FA9                    		pop gs
 13404 00005B2A 0FA1                    		pop fs
 13405 00005B2C C3                      		ret
 13406                                  
 13407                                  line_pp:
 13408 00005B2D 89F8                    		mov eax,edi
 13409 00005B2F C1E810                  		shr eax,16
 13410 00005B32 E802FEFFFF              		call set_win
 13411 00005B37 57                      		push edi
 13412 00005B38 81E7FFFF0000            		and edi,0xffff
 13413 00005B3E FF15[F9000000]          		call [setpixel_t]
 13414 00005B44 5F                      		pop edi
 13415 00005B45 C3                      		ret
 13416                                  
 13417                                  
 13418                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13419                                  ; Set pixel at gs:edi.
 13420                                  ;
 13421                                  ; setpixel_* read from [fs:edi] and write to [gs:edi]
 13422                                  ;
 13423                                  
 13424                                  		bits 32
 13425                                  
 13426                                  setpixel_8:
 13427 00005B46 A0[A4010000]            		mov al,[gfx_color]
 13428                                  
 13429                                  setpixel_a_8:
 13430 00005B4B 658807                  		mov [gs:edi],al
 13431 00005B4E C3                      		ret
 13432                                  
 13433                                  setpixel_16:
 13434 00005B4F 66A1[A4010000]          		mov ax,[gfx_color]
 13435                                  
 13436                                  setpixel_a_16:
 13437 00005B55 65668907                		mov [gs:edi],ax
 13438 00005B59 C3                      		ret
 13439                                  
 13440                                  setpixel_32:
 13441 00005B5A A1[A4010000]            		mov eax,[gfx_color]
 13442                                  
 13443                                  setpixel_a_32:
 13444 00005B5F 658907                  		mov [gs:edi],eax
 13445 00005B62 C3                      		ret
 13446                                  
 13447                                  
 13448                                  ; set pixel with transparency
 13449                                  setpixel_t_16:
 13450 00005B63 66A1[A4010000]          		mov ax,[gfx_color]
 13451                                  
 13452                                  setpixel_ta_16:
 13453 00005B69 833D[05010000]00        		cmp dword [transp],0
 13454 00005B70 74E3                    		jz setpixel_a_16
 13455 00005B72 E85AFEFFFF              		call decode_color
 13456 00005B77 51                      		push ecx
 13457 00005B78 91                      		xchg eax,ecx
 13458 00005B79 64668B07                		mov ax,[fs:edi]
 13459 00005B7D E84FFEFFFF              		call decode_color
 13460 00005B82 91                      		xchg eax,ecx
 13461 00005B83 E827000000              		call enc_transp
 13462 00005B88 59                      		pop ecx
 13463 00005B89 E81EFEFFFF              		call encode_color
 13464 00005B8E 65668907                		mov [gs:edi],ax
 13465 00005B92 C3                      		ret
 13466                                  
 13467                                  setpixel_t_32:
 13468 00005B93 A1[A4010000]            		mov eax,[gfx_color]
 13469                                  
 13470                                  setpixel_ta_32:
 13471 00005B98 833D[05010000]00        		cmp dword [transp],0
 13472 00005B9F 74BE                    		jz setpixel_a_32
 13473 00005BA1 51                      		push ecx
 13474 00005BA2 648B0F                  		mov ecx,[fs:edi]
 13475 00005BA5 E805000000              		call enc_transp
 13476 00005BAA 59                      		pop ecx
 13477 00005BAB 658907                  		mov [gs:edi],eax
 13478 00005BAE C3                      		ret
 13479                                  
 13480                                  ; (1 - t) eax + t * ecx -> eax
 13481                                  enc_transp:
 13482 00005BAF C1C910                  		ror ecx,16
 13483 00005BB2 C1C810                  		ror eax,16
 13484 00005BB5 E819000000              		call add_transp
 13485 00005BBA C1C108                  		rol ecx,8
 13486 00005BBD C1C008                  		rol eax,8
 13487 00005BC0 E80E000000              		call add_transp
 13488 00005BC5 C1C108                  		rol ecx,8
 13489 00005BC8 C1C008                  		rol eax,8
 13490 00005BCB E803000000              		call add_transp
 13491 00005BD0 89C8                    		mov eax,ecx
 13492 00005BD2 C3                      		ret
 13493                                  
 13494                                  ; cl, al -> cl
 13495                                  add_transp:
 13496 00005BD3 50                      		push eax
 13497 00005BD4 51                      		push ecx
 13498 00005BD5 0FB6C0                  		movzx eax,al
 13499 00005BD8 0FB6C9                  		movzx ecx,cl
 13500 00005BDB 29C1                    		sub ecx,eax
 13501 00005BDD 0FAF0D[05010000]        		imul ecx,[transp]
 13502 00005BE4 C1F908                  		sar ecx,8
 13503 00005BE7 01C1                    		add ecx,eax
 13504 00005BE9 83F900                  		cmp ecx,0
 13505 00005BEC 7D04                    		jge add_transp_10
 13506 00005BEE B100                    		mov cl,0
 13507 00005BF0 EB0A                    		jmp add_transp_20
 13508                                  add_transp_10:
 13509 00005BF2 81F900010000            		cmp ecx,100h
 13510 00005BF8 7202                    		jb add_transp_20
 13511 00005BFA B1FF                    		mov cl,0ffh
 13512                                  add_transp_20:
 13513 00005BFC 880C24                  		mov [esp],cl
 13514 00005BFF 59                      		pop ecx
 13515 00005C00 58                      		pop eax
 13516 00005C01 C3                      		ret
 13517                                  
 13518                                  
 13519                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13520                                  ; Get pixel from fs:edi.
 13521                                  ;
 13522                                  ; getpixel_* read from [fs:edi]
 13523                                  ;
 13524                                  
 13525                                  		bits 32
 13526                                  
 13527                                  getpixel_8:
 13528 00005C02 648A07                  		mov al,[fs:edi]
 13529 00005C05 C3                      		ret
 13530                                  
 13531                                  getpixel_16:
 13532 00005C06 64668B07                		mov ax,[fs:edi]
 13533 00005C0A C3                      		ret
 13534                                  
 13535                                  getpixel_32:
 13536 00005C0B 648B07                  		mov eax,[fs:edi]
 13537 00005C0E C3                      		ret
 13538                                  
 13539                                  
 13540                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13541                                  ; Initialize console font (used for debug output).
 13542                                  ;
 13543                                  
 13544                                  		bits 32
 13545                                  
 13546                                  cfont_init:
 13547                                  		; 3: 8x8, 2: 8x14, 6: 8x16
 13548 00005C0F B706                    		mov bh,6
 13549 00005C11 66B83011                		mov ax,1130h
 13550 00005C15 CD10                    		int 10h
 13551 00005C17 0FB7ED                  		movzx ebp,bp
 13552 00005C1A 0FB705[0E0A0000]        		movzx eax,word [rm_seg.es]
 13553 00005C21 C1E004                  		shl eax,4
 13554 00005C24 01E8                    		add eax,ebp
 13555 00005C26 A3[1C010000]            		mov [cfont.lin],eax
 13556                                  
 13557 00005C2B C705[20010000]1000-     		mov dword [cfont_height],16
 13558 00005C33 0000               
 13559 00005C35 C3                      		ret
 13560                                  
 13561                                  
 13562                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13563                                  ; Initialize font.
 13564                                  ;
 13565                                  ; eax		ptr to font header
 13566                                  ;  cl		font properties
 13567                                  ;
 13568                                  
 13569                                  		bits 32
 13570                                  
 13571                                  font_init:
 13572 00005C36 89C3                    		mov ebx,eax
 13573 00005C38 09C0                    		or eax,eax
 13574 00005C3A 7508                    		jnz font_init_10
 13575                                  		; just set font properties if font ptr is 0
 13576 00005C3C 880D[1A010000]          		mov [font.properties],cl
 13577 00005C42 EB5A                    		jmp font_init_90
 13578                                  font_init_10:
 13579 00005C44 26813B068E82D2          		cmp dword [es:ebx+foh.magic],0d2828e06h		; magic
 13580 00005C4B 7412                    		jz font_init_20
 13581                                  		; legacy: maybe font properties were passed via bit 31
 13582 00005C4D 81F300000080            		xor ebx,1 << 31
 13583 00005C53 80F101                  		xor cl,1
 13584 00005C56 26813B068E82D2          		cmp dword [es:ebx+foh.magic],0d2828e06h		; magic
 13585 00005C5D 743F                    		jz font_init_90
 13586                                  font_init_20:
 13587 00005C5F 880D[1A010000]          		mov [font.properties],cl
 13588 00005C65 268B4304                		mov eax,[es:ebx+foh.entries]
 13589 00005C69 268A5308                		mov dl,[es:ebx+foh.height]
 13590 00005C6D 268A730A                		mov dh,[es:ebx+foh.line_height]
 13591 00005C71 26660FBE4B09            		movsx cx,byte [es:ebx+foh.baseline]
 13592 00005C77 09C0                    		or eax,eax
 13593 00005C79 7423                    		jz font_init_90
 13594 00005C7B 6609D2                  		or dx,dx
 13595 00005C7E 741E                    		jz font_init_90
 13596 00005C80 A3[10010000]            		mov [font.entries],eax
 13597 00005C85 8815[14010000]          		mov [font.height],dl
 13598 00005C8B 8835[18010000]          		mov [font.line_height],dh
 13599 00005C91 66890D[16010000]        		mov [font.baseline],cx
 13600 00005C98 891D[0C010000]          		mov [font],ebx
 13601                                  font_init_90:
 13602 00005C9E C3                      		ret
 13603                                  
 13604                                  
 13605                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13606                                  ; Write a string. '\n' is a line break.
 13607                                  ;
 13608                                  ;  esi		string
 13609                                  ;  [gfx_indent]	initial indentation (normally 0)
 13610                                  ;
 13611                                  ; return:
 13612                                  ;  cursor position gets advanced
 13613                                  ;
 13614                                  ; special chars:
 13615                                  ;   char_eot	same as \x00
 13616                                  ;   \x10	back to normal (color, text output)
 13617                                  ;   \x11	set alternative text color (gfx_color1)
 13618                                  ;   \x12	label start, no text output; label end = \x13
 13619                                  ;   \x13	set link text color (gfx_color2/3); typically label end
 13620                                  ;   \x14	start page description; ends with \x10
 13621                                  ;   \x15	vspace
 13622                                  ;   \x16	start list item (ends with \x15 or \x16 or text end)
 13623                                  ;   \x17	set indentation
 13624                                  ;
 13625                                  
 13626                                  		bits 32
 13627                                  
 13628                                  text_xy:
 13629 00005C9F 31C0                    		xor eax,eax
 13630 00005CA1 A3[C4010000]            		mov [last_label],eax
 13631 00005CA6 A3[D0010000]            		mov [cur_row],eax
 13632 00005CAB 8025[E4010000]FE        		and byte [txt_state],~1
 13633                                  
 13634 00005CB2 F605[E4010000]02        		test byte [txt_state],2
 13635 00005CB9 742E                    		jz text_xy_05
 13636                                  
 13637 00005CBB 8935[08020000]          		mov [row_text],esi
 13638 00005CC1 A3[D4010000]            		mov [cur_row2],eax
 13639 00005CC6 A3[DC010000]            		mov [cur_link],eax
 13640 00005CCB A3[E0010000]            		mov [sel_link],eax
 13641 00005CD0 A3[C8010000]            		mov [page_title],eax
 13642 00005CD5 56                      		push esi
 13643 00005CD6 E873030000              		call utf8_dec
 13644 00005CDB 5E                      		pop esi
 13645 00005CDC E8F1020000              		call is_eot
 13646 00005CE1 7406                    		jz text_xy_05
 13647 00005CE3 FF05[D4010000]          		inc dword [cur_row2]
 13648                                  text_xy_05:
 13649 00005CE9 66FF35[75010000]        		push word [gfx_cur_x]
 13650 00005CF0 66A1[81010000]          		mov ax,[gfx_indent]
 13651 00005CF6 660105[75010000]        		add [gfx_cur_x],ax
 13652                                  text_xy_10:
 13653 00005CFD 89F7                    		mov edi,esi
 13654 00005CFF E84A030000              		call utf8_dec
 13655                                  
 13656 00005D04 E8C9020000              		call is_eot
 13657 00005D09 0F845D010000            		jz text_xy_90
 13658                                  
 13659 00005D0F 833D[7D010000]00        		cmp dword [line_wrap],0
 13660 00005D16 7449                    		jz text_xy_60
 13661                                  
 13662 00005D18 3D00300000              		cmp eax,3000h
 13663 00005D1D 7307                    		jae text_xy_20
 13664                                  
 13665 00005D1F E8A5020000              		call is_space
 13666 00005D24 753B                    		jnz text_xy_60
 13667                                  text_xy_20:
 13668                                  
 13669 00005D26 56                      		push esi
 13670 00005D27 89FE                    		mov esi,edi
 13671 00005D29 57                      		push edi
 13672 00005D2A E828020000              		call word_width
 13673 00005D2F 5F                      		pop edi
 13674 00005D30 5E                      		pop esi
 13675 00005D31 0FB715[75010000]        		movzx edx,word [gfx_cur_x]
 13676 00005D38 01D1                    		add ecx,edx
 13677 00005D3A 3B0D[7D010000]          		cmp ecx,[line_wrap]
 13678 00005D40 761F                    		jbe text_xy_60
 13679                                  text_xy_30:
 13680 00005D42 E882020000              		call is_space
 13681 00005D47 7514                    		jnz text_xy_50
 13682                                  
 13683 00005D49 89F7                    		mov edi,esi
 13684 00005D4B E8FE020000              		call utf8_dec
 13685                                  
 13686 00005D50 E87D020000              		call is_eot
 13687 00005D55 0F8411010000            		jz text_xy_90
 13688 00005D5B EBE5                    		jmp text_xy_30
 13689                                  text_xy_50:
 13690 00005D5D 89FE                    		mov esi,edi
 13691 00005D5F EB05                    		jmp text_xy_65
 13692                                  text_xy_60:
 13693 00005D61 83F80A                  		cmp eax,0ah
 13694 00005D64 7579                    		jnz text_xy_70
 13695                                  text_xy_65:
 13696                                  		; newline
 13697 00005D66 66A1[18010000]          		mov ax,[font.line_height]
 13698 00005D6C 660105[77010000]        		add [gfx_cur_y],ax
 13699 00005D73 6658                    		pop ax
 13700 00005D75 6650                    		push ax
 13701 00005D77 660305[81010000]        		add ax,[gfx_indent]
 13702 00005D7E 66A3[75010000]          		mov [gfx_cur_x],ax
 13703 00005D84 FF05[D0010000]          		inc dword [cur_row]
 13704 00005D8A 8B15[CC010000]          		mov edx,[max_rows]
 13705 00005D90 A1[D0010000]            		mov eax,[cur_row]
 13706 00005D95 09D2                    		or edx,edx
 13707 00005D97 7408                    		jz text_xy_67
 13708 00005D99 39D0                    		cmp eax,edx
 13709 00005D9B 0F83CB000000            		jae text_xy_90
 13710                                  text_xy_67:
 13711 00005DA1 F605[E4010000]02        		test byte [txt_state],2
 13712 00005DA8 0F844FFFFFFF            		jz text_xy_10
 13713 00005DAE 3D80000000              		cmp eax,max_text_rows
 13714 00005DB3 0F8344FFFFFF            		jae text_xy_10
 13715 00005DB9 A3[D4010000]            		mov [cur_row2],eax
 13716 00005DBE FF05[D4010000]          		inc dword [cur_row2]
 13717 00005DC4 893485[08020000]        		mov [row_text+4*eax],esi
 13718 00005DCB 66FF35[81010000]        		push word [gfx_indent]
 13719 00005DD2 668F8400[08040000]      		pop word [ind_text+2*eax]
 13720 00005DDA E91EFFFFFF              		jmp text_xy_10
 13721                                  text_xy_70:
 13722 00005DDF 83F815                  		cmp eax,15h		; vspace
 13723 00005DE2 7405                    		jz text_xy_71
 13724 00005DE4 83F816                  		cmp eax,16h		; list item
 13725 00005DE7 751F                    		jnz text_xy_74
 13726                                  text_xy_71:
 13727                                  		; vspace/list item are basically optional newlines
 13728 00005DE9 66C705[81010000]00-     		mov word [gfx_indent],0
 13729 00005DF1 00                 
 13730 00005DF2 6658                    		pop ax
 13731 00005DF4 6650                    		push ax
 13732 00005DF6 663B05[75010000]        		cmp ax,[gfx_cur_x]
 13733 00005DFD 0F8563FFFFFF            		jnz text_xy_65
 13734 00005E03 E9F5FEFFFF              		jmp text_xy_10
 13735                                  
 13736                                  text_xy_74:
 13737 00005E08 83F817                  		cmp eax,17h		; set indentation
 13738 00005E0B 7519                    		jnz text_xy_78
 13739 00005E0D 6658                    		pop ax
 13740 00005E0F 6650                    		push ax
 13741 00005E11 662B05[75010000]        		sub ax,[gfx_cur_x]
 13742 00005E18 66F7D8                  		neg ax
 13743 00005E1B 66A3[81010000]          		mov [gfx_indent],ax
 13744 00005E21 E9D7FEFFFF              		jmp text_xy_10
 13745                                  
 13746                                  text_xy_78:
 13747 00005E26 56                      		push esi
 13748 00005E27 83F81F                  		cmp eax,1fh
 13749 00005E2A 7307                    		jae text_xy_80
 13750 00005E2C E84A000000              		call text_special
 13751 00005E31 EB33                    		jmp text_xy_89
 13752                                  text_xy_80:
 13753 00005E33 F605[E4010000]01        		test byte [txt_state],1
 13754 00005E3A 752A                    		jnz text_xy_89
 13755                                  
 13756                                  ;;
 13757 00005E3C 5E                      		pop esi
 13758 00005E3D 56                      		push esi
 13759 00005E3E 89C2                    		mov edx,eax
 13760 00005E40 E809020000              		call utf8_dec
 13761 00005E45 92                      		xchg eax,edx
 13762 00005E46 81FA3F0A0000            		cmp edx,0a3fh		; Sihari (Gurmukhi 'i')
 13763 00005E4C 7408                    		jz text_xy_85
 13764 00005E4E 81FA3F090000            		cmp edx,093fh		; (Devanagari 'i')
 13765 00005E54 750B                    		jnz text_xy_88
 13766                                  text_xy_85:
 13767 00005E56 5F                      		pop edi
 13768 00005E57 56                      		push esi
 13769 00005E58 50                      		push eax
 13770 00005E59 89D0                    		mov eax,edx
 13771 00005E5B E8D7020000              		call char_xy
 13772 00005E60 58                      		pop eax
 13773                                  text_xy_88:
 13774                                  ;;
 13775                                  
 13776 00005E61 E8D1020000              		call char_xy
 13777                                  text_xy_89:
 13778 00005E66 5E                      		pop esi
 13779 00005E67 E991FEFFFF              		jmp text_xy_10
 13780                                  text_xy_90:
 13781 00005E6C 6658                    		pop ax
 13782 00005E6E FF35[A8010000]          		push dword [gfx_color0]
 13783 00005E74 8F05[A4010000]          		pop dword [gfx_color]
 13784 00005E7A C3                      		ret
 13785                                  
 13786                                  
 13787                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13788                                  ; Handle special chars.
 13789                                  ;
 13790                                  ;  eax		char
 13791                                  ;  esi		ptr to next char
 13792                                  ;
 13793                                  
 13794                                  		bits 32
 13795                                  
 13796                                  text_special:
 13797 00005E7B 83F810                  		cmp eax,10h
 13798 00005E7E 7518                    		jnz text_special_20
 13799                                  
 13800 00005E80 8025[E4010000]FE        		and byte [txt_state],~1
 13801 00005E87 50                      		push eax
 13802 00005E88 A1[A8010000]            		mov eax,[gfx_color0]
 13803 00005E8D E814FBFFFF              		call setcolor
 13804 00005E92 58                      		pop eax
 13805 00005E93 E9BE000000              		jmp text_special_90
 13806                                  text_special_20:
 13807 00005E98 83F811                  		cmp eax,11h
 13808 00005E9B 7518                    		jnz text_special_30
 13809                                  
 13810 00005E9D 8025[E4010000]FE        		and byte [txt_state],~1
 13811 00005EA4 50                      		push eax
 13812 00005EA5 A1[AC010000]            		mov eax,[gfx_color1]
 13813 00005EAA E8F7FAFFFF              		call setcolor
 13814 00005EAF 58                      		pop eax
 13815 00005EB0 E9A1000000              		jmp text_special_90
 13816                                  text_special_30:
 13817 00005EB5 83F812                  		cmp eax,12h
 13818 00005EB8 7512                    		jnz text_special_40
 13819                                  
 13820 00005EBA 800D[E4010000]01        		or byte [txt_state],1
 13821 00005EC1 8935[C4010000]          		mov [last_label],esi
 13822                                  
 13823 00005EC7 E98A000000              		jmp text_special_90
 13824                                  text_special_40:
 13825 00005ECC 83F813                  		cmp eax,13h
 13826 00005ECF 7578                    		jnz text_special_50
 13827                                  
 13828 00005ED1 8025[E4010000]FE        		and byte [txt_state],~1
 13829                                  
 13830                                  		; check for selected link
 13831 00005ED8 8B1D[E0010000]          		mov ebx,[sel_link]
 13832 00005EDE C1E302                  		shl ebx,2
 13833 00005EE1 8B945B[0C050000]        		mov edx,[link_list+li.text+2*ebx+ebx]		; li.size = 12 (4*3)
 13834 00005EE8 39D6                    		cmp esi,edx
 13835                                  
 13836 00005EEA 50                      		push eax
 13837 00005EEB A1[B4010000]            		mov eax,[gfx_color3]
 13838 00005EF0 7405                    		jz text_special_45
 13839 00005EF2 A1[B0010000]            		mov eax,[gfx_color2]
 13840                                  text_special_45:
 13841 00005EF7 E8AAFAFFFF              		call setcolor
 13842 00005EFC 58                      		pop eax
 13843                                  
 13844 00005EFD F605[E4010000]02        		test byte [txt_state],2
 13845 00005F04 7450                    		jz text_special_90
 13846                                  
 13847 00005F06 8B1D[DC010000]          		mov ebx,[cur_link]
 13848 00005F0C 83FB40                  		cmp ebx,link_entries
 13849 00005F0F 7345                    		jae text_special_90
 13850 00005F11 FF05[DC010000]          		inc dword [cur_link]
 13851 00005F17 C1E302                  		shl ebx,2
 13852 00005F1A 8D9C5B[08050000]        		lea ebx,[link_list+2*ebx+ebx]			; li.size = 12 (4*3)
 13853 00005F21 FF35[C4010000]          		push dword [last_label]
 13854 00005F27 8F03                    		pop dword [ebx+li.label]
 13855 00005F29 897304                  		mov [ebx+li.text],esi
 13856 00005F2C 66FF35[75010000]        		push word [gfx_cur_x]
 13857 00005F33 668F4308                		pop word [ebx+li.x]
 13858 00005F37 8B15[D4010000]          		mov edx,[cur_row2]
 13859 00005F3D 83EA01                  		sub edx,1		; 0-- -> 0
 13860 00005F40 83D200                  		adc edx,0
 13861 00005F43 6689530A                		mov [ebx+li.row],dx
 13862                                  
 13863 00005F47 EB0D                    		jmp text_special_90
 13864                                  text_special_50:
 13865 00005F49 83F814                  		cmp eax,14h
 13866 00005F4C 7508                    		jnz text_special_60
 13867                                  
 13868 00005F4E 8935[C8010000]          		mov [page_title],esi
 13869                                  
 13870 00005F54 EB00                    		jmp text_special_90
 13871                                  text_special_60:
 13872                                  
 13873                                  
 13874                                  text_special_90:
 13875 00005F56 C3                      		ret
 13876                                  
 13877                                  
 13878                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13879                                  ; String width until end of next word.
 13880                                  ;
 13881                                  ;  esi		string
 13882                                  ;
 13883                                  ; return:
 13884                                  ;  ecx		width
 13885                                  ;
 13886                                  
 13887                                  		bits 32
 13888                                  
 13889                                  word_width:
 13890 00005F57 56                      		push esi
 13891 00005F58 50                      		push eax
 13892                                  
 13893 00005F59 31D2                    		xor edx,edx
 13894 00005F5B 31DB                    		xor ebx,ebx
 13895                                  
 13896                                  word_width_10:
 13897 00005F5D E8EC000000              		call utf8_dec
 13898                                  
 13899                                  word_width_20:
 13900 00005F62 E86B000000              		call is_eot
 13901 00005F67 745B                    		jz word_width_90
 13902                                  
 13903 00005F69 83F80A                  		cmp eax,0ah
 13904 00005F6C 7456                    		jz word_width_90
 13905                                  
 13906 00005F6E 83F810                  		cmp eax,10h
 13907 00005F71 7502                    		jnz word_width_30
 13908 00005F73 31DB                    		xor ebx,ebx
 13909                                  word_width_30:
 13910 00005F75 83F811                  		cmp eax,11h
 13911 00005F78 7502                    		jnz word_width_31
 13912 00005F7A B701                    		mov bh,1
 13913                                  word_width_31:
 13914 00005F7C 83F812                  		cmp eax,12h
 13915 00005F7F 7502                    		jnz word_width_32
 13916 00005F81 B301                    		mov bl,1
 13917                                  word_width_32:
 13918 00005F83 83F813                  		cmp eax,13h
 13919 00005F86 7504                    		jnz word_width_33
 13920 00005F88 B701                    		mov bh,1
 13921 00005F8A B300                    		mov bl,0
 13922                                  word_width_33:
 13923 00005F8C 83F814                  		cmp eax,14h
 13924 00005F8F 7502                    		jnz word_width_34
 13925 00005F91 B701                    		mov bh,1
 13926                                  word_width_34:
 13927                                  
 13928 00005F93 08DB                    		or bl,bl
 13929 00005F95 750F                    		jnz word_width_70
 13930                                  
 13931 00005F97 50                      		push eax
 13932 00005F98 53                      		push ebx
 13933 00005F99 52                      		push edx
 13934 00005F9A 56                      		push esi
 13935 00005F9B E814060000              		call char_width
 13936 00005FA0 5E                      		pop esi
 13937 00005FA1 5A                      		pop edx
 13938 00005FA2 5B                      		pop ebx
 13939 00005FA3 58                      		pop eax
 13940                                  
 13941 00005FA4 01CA                    		add edx,ecx
 13942                                  
 13943                                  word_width_70:
 13944 00005FA6 E81E000000              		call is_space
 13945 00005FAB 74B0                    		jz word_width_10
 13946                                  
 13947 00005FAD E89C000000              		call utf8_dec
 13948                                  
 13949 00005FB2 09DB                    		or ebx,ebx
 13950 00005FB4 7507                    		jnz word_width_80
 13951 00005FB6 3D00300000              		cmp eax,3000h
 13952 00005FBB 7307                    		jae word_width_90
 13953                                  word_width_80:
 13954                                  
 13955 00005FBD E807000000              		call is_space
 13956 00005FC2 759E                    		jnz word_width_20
 13957                                  
 13958                                  word_width_90:
 13959 00005FC4 89D1                    		mov ecx,edx
 13960                                  
 13961 00005FC6 58                      		pop eax
 13962 00005FC7 5E                      		pop esi
 13963 00005FC8 C3                      		ret
 13964                                  
 13965                                  
 13966                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13967                                  ; Test for white space (space or tab).
 13968                                  ;
 13969                                  ;  eax		char
 13970                                  ;
 13971                                  ; return:
 13972                                  ;  ZF		0 = no, 1 = yes
 13973                                  ;
 13974                                  
 13975                                  		bits 32
 13976                                  
 13977                                  is_space:
 13978 00005FC9 83F820                  		cmp eax,20h
 13979 00005FCC 7403                    		jz is_space_90
 13980 00005FCE 83F809                  		cmp eax,9
 13981                                  is_space_90:
 13982 00005FD1 C3                      		ret
 13983                                  
 13984                                  
 13985                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 13986                                  ; Test for end of text.
 13987                                  ;
 13988                                  ; eax		char
 13989                                  ;
 13990                                  ; return:
 13991                                  ;  ZF		0 = no, 1 = yes
 13992                                  ;
 13993                                  
 13994                                  		bits 32
 13995                                  
 13996                                  is_eot:
 13997 00005FD2 09C0                    		or eax,eax
 13998 00005FD4 7406                    		jz is_eot_90
 13999 00005FD6 3B05[C0010000]          		cmp eax,[char_eot]
 14000                                  is_eot_90:
 14001 00005FDC C3                      		ret
 14002                                  
 14003                                  
 14004                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14005                                  ; Get string dimensions (in pixel).
 14006                                  ;
 14007                                  ;  esi		string
 14008                                  ;
 14009                                  ; return:
 14010                                  ;  ecx		width
 14011                                  ;  edx		height
 14012                                  ;
 14013                                  
 14014                                  		bits 32
 14015                                  
 14016                                  str_size:
 14017 00005FDD 31C9                    		xor ecx,ecx
 14018 00005FDF 31D2                    		xor edx,edx
 14019                                  str_size_20:
 14020 00005FE1 51                      		push ecx
 14021 00005FE2 52                      		push edx
 14022 00005FE3 E83C000000              		call str_len
 14023 00005FE8 91                      		xchg eax,ecx
 14024 00005FE9 5A                      		pop edx
 14025 00005FEA 59                      		pop ecx
 14026 00005FEB 39C8                    		cmp eax,ecx
 14027 00005FED 7202                    		jb str_size_40
 14028 00005FEF 89C1                    		mov ecx,eax
 14029                                  str_size_40:
 14030 00005FF1 42                      		inc edx
 14031                                  
 14032                                  		; suppress final line break
 14033 00005FF2 E857000000              		call utf8_dec
 14034 00005FF7 83F80A                  		cmp eax,0ah
 14035 00005FFA 7506                    		jnz str_size_60
 14036 00005FFC 26803E00                		cmp byte [es:esi],0
 14037 00006000 740E                    		jz str_size_80
 14038                                  str_size_60:
 14039 00006002 09C0                    		or eax,eax
 14040 00006004 740A                    		jz str_size_80
 14041 00006006 3B05[C0010000]          		cmp eax,[char_eot]
 14042 0000600C 7402                    		jz str_size_80
 14043 0000600E EBD1                    		jmp str_size_20
 14044                                  str_size_80:
 14045 00006010 4A                      		dec edx
 14046 00006011 0FB705[18010000]        		movzx eax,word [font.line_height]
 14047 00006018 F7E2                    		mul edx
 14048 0000601A 0FB715[14010000]        		movzx edx,word [font.height]
 14049 00006021 01C2                    		add edx,eax
 14050                                  str_size_90:
 14051 00006023 C3                      		ret
 14052                                  
 14053                                  
 14054                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14055                                  ; Get string length (in pixel).
 14056                                  ; *** Use str_size instead. ***
 14057                                  ;
 14058                                  ;  esi		string
 14059                                  ;
 14060                                  ; return:
 14061                                  ;  ecx		width
 14062                                  ;  esi		points to string end or line break
 14063                                  ;
 14064                                  ; notes:
 14065                                  ;  - stops at linebreak ('\n')
 14066                                  ;
 14067                                  
 14068                                  		bits 32
 14069                                  
 14070                                  str_len:
 14071 00006024 31C9                    		xor ecx,ecx
 14072                                  str_len_10:
 14073 00006026 89F7                    		mov edi,esi
 14074 00006028 E821000000              		call utf8_dec
 14075 0000602D 09C0                    		or eax,eax
 14076 0000602F 741A                    		jz str_len_70
 14077 00006031 3B05[C0010000]          		cmp eax,[char_eot]
 14078 00006037 7412                    		jz str_len_70
 14079 00006039 83F80A                  		cmp eax,0ah
 14080 0000603C 740D                    		jz str_len_70
 14081 0000603E 51                      		push ecx
 14082 0000603F 56                      		push esi
 14083 00006040 E86F050000              		call char_width
 14084 00006045 5E                      		pop esi
 14085 00006046 58                      		pop eax
 14086 00006047 01C1                    		add ecx,eax
 14087 00006049 EBDB                    		jmp str_len_10
 14088                                  str_len_70:
 14089 0000604B 89FE                    		mov esi,edi
 14090 0000604D C3                      		ret
 14091                                  
 14092                                  
 14093                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14094                                  ; Decode next utf8 char.
 14095                                  ;
 14096                                  ;  esi		string
 14097                                  ;
 14098                                  ; return:
 14099                                  ;  eax		char (invalid char: 0)
 14100                                  ;  esi		points past char
 14101                                  ;
 14102                                  ; Note: changes only eax, esi
 14103                                  ;
 14104                                  
 14105                                  		bits 32
 14106                                  
 14107                                  utf8_dec:
 14108 0000604E 31C0                    		xor eax,eax
 14109 00006050 26AC                    		es lodsb
 14110 00006052 3C80                    		cmp al,80h
 14111 00006054 724F                    		jb utf8_dec_90
 14112                                  
 14113 00006056 51                      		push ecx
 14114 00006057 52                      		push edx
 14115                                  
 14116 00006058 31D2                    		xor edx,edx
 14117 0000605A 31C9                    		xor ecx,ecx
 14118 0000605C 88C2                    		mov dl,al
 14119                                  
 14120 0000605E 3CC0                    		cmp al,0c0h		; invalid
 14121 00006060 723F                    		jb utf8_dec_70
 14122                                  
 14123 00006062 41                      		inc ecx			; 2 bytes
 14124 00006063 80E21F                  		and dl,1fh
 14125 00006066 3CE0                    		cmp al,0e0h
 14126 00006068 7220                    		jb utf8_dec_10
 14127                                  
 14128 0000606A 41                      		inc ecx			; 3 bytes
 14129 0000606B 80E20F                  		and dl,0fh
 14130 0000606E 3CF0                    		cmp al,0f0h
 14131 00006070 7218                    		jb utf8_dec_10
 14132                                  
 14133 00006072 41                      		inc ecx			; 4 bytes
 14134 00006073 80E207                  		and dl,7
 14135 00006076 3CF8                    		cmp al,0f8h
 14136 00006078 7210                    		jb utf8_dec_10
 14137                                  
 14138 0000607A 41                      		inc ecx			; 5 bytes
 14139 0000607B 80E203                  		and dl,3
 14140 0000607E 3CFC                    		cmp al,0fch
 14141 00006080 7208                    		jb utf8_dec_10
 14142                                  
 14143 00006082 41                      		inc ecx			; 6 bytes
 14144 00006083 80E201                  		and dl,1
 14145 00006086 3CFE                    		cmp al,0feh
 14146 00006088 7317                    		jae utf8_dec_70
 14147                                  utf8_dec_10:
 14148 0000608A 26AC                    		es lodsb
 14149 0000608C 3C80                    		cmp al,80h
 14150 0000608E 7211                    		jb utf8_dec_70
 14151 00006090 3CC0                    		cmp al,0c0h
 14152 00006092 730D                    		jae utf8_dec_70
 14153 00006094 243F                    		and al,3fh
 14154 00006096 C1E206                  		shl edx,6
 14155 00006099 08C2                    		or dl,al
 14156 0000609B 49                      		dec ecx
 14157 0000609C 75EC                    		jnz utf8_dec_10
 14158 0000609E 92                      		xchg eax,edx
 14159 0000609F EB02                    		jmp utf8_dec_80
 14160                                  		
 14161                                  utf8_dec_70:
 14162 000060A1 31C0                    		xor eax,eax
 14163                                  utf8_dec_80:
 14164 000060A3 5A                      		pop edx
 14165 000060A4 59                      		pop ecx
 14166                                  
 14167                                  utf8_dec_90:
 14168 000060A5 C3                      		ret
 14169                                  
 14170                                  
 14171                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14172                                  ; Encode utf8 char.
 14173                                  ;
 14174                                  ;  eax		char
 14175                                  ;
 14176                                  ; return:
 14177                                  ;  ecx		length
 14178                                  ;  utf8_buf	char
 14179                                  ;
 14180                                  
 14181                                  		bits 32
 14182                                  
 14183                                  utf8_enc:
 14184 000060A6 BE[55010000]            		mov esi,utf8_buf
 14185 000060AB 31C9                    		xor ecx,ecx
 14186 000060AD 31D2                    		xor edx,edx
 14187                                  
 14188 000060AF 3D80000000              		cmp eax,80h
 14189 000060B4 7305                    		jae utf8_enc_10
 14190 000060B6 8806                    		mov [esi],al
 14191 000060B8 46                      		inc esi
 14192 000060B9 EB77                    		jmp utf8_enc_80
 14193                                  utf8_enc_10:
 14194 000060BB 41                      		inc ecx
 14195 000060BC 3D00080000              		cmp eax,800h
 14196 000060C1 730E                    		jae utf8_enc_20
 14197 000060C3 C1E015                  		shl eax,21
 14198 000060C6 B206                    		mov dl,6
 14199 000060C8 0FA4C205                		shld edx,eax,5
 14200 000060CC C1E005                  		shl eax,5
 14201 000060CF EB4D                    		jmp utf8_enc_60
 14202                                  utf8_enc_20:
 14203 000060D1 41                      		inc ecx
 14204 000060D2 3D00000100              		cmp eax,10000h
 14205 000060D7 730E                    		jae utf8_enc_30
 14206 000060D9 C1E010                  		shl eax,16
 14207 000060DC B20E                    		mov dl,0eh
 14208 000060DE 0FA4C204                		shld edx,eax,4
 14209 000060E2 C1E004                  		shl eax,4
 14210 000060E5 EB37                    		jmp utf8_enc_60
 14211                                  utf8_enc_30:
 14212 000060E7 41                      		inc ecx
 14213 000060E8 3D00002000              		cmp eax,200000h
 14214 000060ED 730E                    		jae utf8_enc_40
 14215 000060EF C1E00B                  		shl eax,11
 14216 000060F2 B21E                    		mov dl,1eh
 14217 000060F4 0FA4C203                		shld edx,eax,3
 14218 000060F8 C1E003                  		shl eax,3
 14219 000060FB EB21                    		jmp utf8_enc_60
 14220                                  utf8_enc_40:
 14221 000060FD 41                      		inc ecx
 14222 000060FE 3D00000004              		cmp eax,4000000h
 14223 00006103 730E                    		jae utf8_enc_50
 14224 00006105 C1E006                  		shl eax,6
 14225 00006108 B23E                    		mov dl,3eh
 14226 0000610A 0FA4C202                		shld edx,eax,2
 14227 0000610E C1E002                  		shl eax,2
 14228 00006111 EB0B                    		jmp utf8_enc_60
 14229                                  utf8_enc_50:
 14230 00006113 41                      		inc ecx
 14231 00006114 D1E0                    		shl eax,1
 14232 00006116 B27E                    		mov dl,7eh
 14233 00006118 0FA4C201                		shld edx,eax,1
 14234 0000611C 01C0                    		add eax,eax
 14235                                  utf8_enc_60:
 14236 0000611E 89CB                    		mov ebx,ecx
 14237 00006120 8816                    		mov [esi],dl
 14238 00006122 46                      		inc esi
 14239                                  utf8_enc_70:
 14240 00006123 B202                    		mov dl,2
 14241 00006125 0FA4C206                		shld edx,eax,6
 14242 00006129 C1E006                  		shl eax,6
 14243 0000612C 8816                    		mov [esi],dl
 14244 0000612E 46                      		inc esi
 14245 0000612F 4B                      		dec ebx
 14246 00006130 75F1                    		jnz utf8_enc_70
 14247                                  utf8_enc_80:
 14248 00006132 C60600                  		mov byte [esi],0
 14249 00006135 41                      		inc ecx
 14250                                  utf8_enc_90:
 14251 00006136 C3                      		ret
 14252                                  
 14253                                  
 14254                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14255                                  ; Write a char at the current cursor position.
 14256                                  ;
 14257                                  ;  eax		char
 14258                                  ;
 14259                                  ; return:
 14260                                  ;  cursor position gets advanced
 14261                                  ;
 14262                                  
 14263                                  		bits 32
 14264                                  
 14265                                  char_xy:
 14266 00006137 0FA0                    		push fs
 14267 00006139 0FA8                    		push gs
 14268                                  
 14269 0000613B 83F81F                  		cmp eax,1fh			; \x1f looks like a space, but isn't
 14270 0000613E 7502                    		jnz char_xy_10
 14271 00006140 B020                    		mov al,' '
 14272                                  char_xy_10:
 14273 00006142 E8A5030000              		call find_char
 14274 00006147 7246                    		jc char_xy_90
 14275                                  
 14276 00006149 F605[E4010000]02        		test byte [txt_state],2		; don't actually write
 14277 00006150 752F                    		jnz char_xy_80
 14278                                  
 14279 00006152 66833D[3C010000]00      		cmp word [chr.bitmap_width],0
 14280 0000615A 7425                    		jz char_xy_80
 14281 0000615C 66833D[3E010000]00      		cmp word [chr.bitmap_height],0
 14282 00006164 741B                    		jz char_xy_80
 14283                                  
 14284 00006166 8A15[46010000]          		mov dl,[chr.type]
 14285 0000616C 08D2                    		or dl,dl
 14286 0000616E 7507                    		jnz char_xy_30
 14287 00006170 E81F000000              		call char0_xy
 14288 00006175 EB0A                    		jmp char_xy_80
 14289                                  char_xy_30:
 14290 00006177 80FA01                  		cmp dl,1
 14291 0000617A 7505                    		jnz char_xy_80
 14292 0000617C E8E5000000              		call char1_xy
 14293                                  
 14294                                  char_xy_80:
 14295 00006181 668B0D[44010000]        		mov cx,[chr.x_advance]
 14296 00006188 66010D[75010000]        		add [gfx_cur_x],cx
 14297                                  char_xy_90:
 14298 0000618F 0FA9                    		pop gs
 14299 00006191 0FA1                    		pop fs
 14300 00006193 C3                      		ret
 14301                                  
 14302                                  
 14303                                  char0_xy:
 14304 00006194 66FF35[75010000]        		push word [gfx_cur_x]
 14305 0000619B 66FF35[77010000]        		push word [gfx_cur_y]
 14306                                  
 14307 000061A2 66A1[40010000]          		mov ax,[chr.x_ofs]
 14308 000061A8 660105[75010000]        		add [gfx_cur_x],ax
 14309                                  
 14310 000061AF 66A1[14010000]          		mov ax,[font.height]
 14311 000061B5 662B05[16010000]        		sub ax,[font.baseline]
 14312 000061BC 662B05[42010000]        		sub ax,[chr.y_ofs]
 14313 000061C3 662B05[3E010000]        		sub ax,[chr.bitmap_height]
 14314 000061CA 660105[77010000]        		add [gfx_cur_y],ax
 14315                                  
 14316 000061D1 E89EF7FFFF              		call goto_xy
 14317 000061D6 E84D070000              		call screen_segs
 14318                                  
 14319 000061DB 8B1D[34010000]          		mov ebx,[chr.data]
 14320 000061E1 8B35[38010000]          		mov esi,[chr.bitmap]
 14321                                  
 14322 000061E7 31D2                    		xor edx,edx
 14323                                  char0_xy_20:
 14324 000061E9 31C9                    		xor ecx,ecx
 14325                                  char0_xy_30:
 14326 000061EB 260FA333                		bt [es:ebx],esi
 14327 000061EF 7321                    		jnc char0_xy_40
 14328 000061F1 66A1[75010000]          		mov ax,[gfx_cur_x]
 14329 000061F7 6601C8                  		add ax,cx
 14330 000061FA 663B05[85010000]        		cmp ax,[clip_r]
 14331 00006201 7D0F                    		jge char0_xy_40
 14332 00006203 663B05[83010000]        		cmp ax,[clip_l]
 14333 0000620A 7C06                    		jl char0_xy_40
 14334 0000620C FF15[F9000000]          		call [setpixel_t]
 14335                                  char0_xy_40:
 14336 00006212 46                      		inc esi
 14337 00006213 66033D[6B010000]        		add di,[pixel_bytes]
 14338 0000621A 7305                    		jnc char0_xy_50
 14339 0000621C E809F7FFFF              		call inc_winseg
 14340                                  char0_xy_50:
 14341 00006221 41                      		inc ecx
 14342 00006222 663B0D[3C010000]        		cmp cx,[chr.bitmap_width]
 14343 00006229 75C0                    		jnz char0_xy_30
 14344                                  
 14345 0000622B 66A1[ED000000]          		mov ax,[screen_line_len]
 14346 00006231 668B2D[3C010000]        		mov bp,[chr.bitmap_width]
 14347 00006238 660FAF2D[6B010000]      		imul bp,[pixel_bytes]
 14348 00006240 6629E8                  		sub ax,bp
 14349 00006243 6601C7                  		add di,ax
 14350 00006246 7305                    		jnc char0_xy_60
 14351 00006248 E8DDF6FFFF              		call inc_winseg
 14352                                  char0_xy_60:
 14353 0000624D 42                      		inc edx
 14354 0000624E 663B15[3E010000]        		cmp dx,[chr.bitmap_height]
 14355 00006255 7592                    		jnz char0_xy_20
 14356                                  
 14357 00006257 668F05[77010000]        		pop word [gfx_cur_y]
 14358 0000625E 668F05[75010000]        		pop word [gfx_cur_x]
 14359                                  
 14360 00006265 C3                      		ret
 14361                                  
 14362                                  
 14363                                  char1_xy:
 14364 00006266 66FF35[75010000]        		push word [gfx_cur_x]
 14365 0000626D 66FF35[77010000]        		push word [gfx_cur_y]
 14366                                  
 14367 00006274 E81D010000              		call char1_unpack
 14368 00006279 0F8208010000            		jc char1_xy_90
 14369                                  
 14370 0000627F 66A1[40010000]          		mov ax,[chr.x_ofs]
 14371 00006285 660105[75010000]        		add [gfx_cur_x],ax
 14372                                  
 14373 0000628C 66A1[14010000]          		mov ax,[font.height]
 14374 00006292 662B05[16010000]        		sub ax,[font.baseline]
 14375 00006299 662B05[42010000]        		sub ax,[chr.y_ofs]
 14376 000062A0 662B05[3E010000]        		sub ax,[chr.bitmap_height]
 14377 000062A7 660105[77010000]        		add [gfx_cur_y],ax
 14378                                  
 14379                                  		; save_bg does not clip, do it here (sort of)
 14380 000062AE 66A1[75010000]          		mov ax,[gfx_cur_x]
 14381 000062B4 663B05[85010000]        		cmp ax,[clip_r]
 14382 000062BB 7D27                    		jge char1_xy_20
 14383 000062BD 660305[3C010000]        		add ax,[chr.bitmap_width]
 14384 000062C4 663B05[83010000]        		cmp ax,[clip_l]
 14385 000062CB 7C17                    		jl char1_xy_20
 14386                                  
 14387 000062CD 8B3D[30010000]          		mov edi,[chr.pixel_buf]
 14388 000062D3 26668B17                		mov dx,[es:edi]
 14389 000062D7 26668B4F02              		mov cx,[es:edi+2]
 14390 000062DC 83C704                  		add edi,4
 14391 000062DF E8E5040000              		call save_bg
 14392                                  
 14393                                  char1_xy_20:
 14394                                  
 14395 000062E4 FF35[05010000]          		push dword [transp]
 14396                                  
 14397 000062EA 8B3D[30010000]          		mov edi,[chr.pixel_buf]
 14398 000062F0 8B35[28010000]          		mov esi,[chr.buf]
 14399 000062F6 26668B07                		mov ax,[es:edi]
 14400 000062FA 2666F76702              		mul word [es:edi+2]
 14401 000062FF 0FB7C8                  		movzx ecx,ax
 14402 00006302 83C704                  		add edi,4
 14403 00006305 83C604                  		add esi,4
 14404                                  
 14405 00006308 A1[A4010000]            		mov eax,[gfx_color]
 14406 0000630D E8BFF6FFFF              		call decode_color
 14407 00006312 A3[A0090000]            		mov [tmp_var_0],eax
 14408                                  
 14409                                  char1_xy_30:
 14410 00006317 51                      		push ecx
 14411                                  
 14412 00006318 260FB606                		movzx eax,byte [es:esi]
 14413 0000631C 46                      		inc esi
 14414 0000631D A3[05010000]            		mov [transp],eax
 14415 00006322 8B0D[A0090000]          		mov ecx,[tmp_var_0]
 14416                                  
 14417 00006328 833D[6B010000]02        		cmp dword [pixel_bytes],2
 14418 0000632F 7519                    		jnz char1_xy_40
 14419                                  
 14420 00006331 26668B07                		mov ax,[es:edi]
 14421 00006335 E897F6FFFF              		call decode_color
 14422 0000633A E870F8FFFF              		call enc_transp
 14423 0000633F E868F6FFFF              		call encode_color
 14424 00006344 26668907                		mov [es:edi],ax
 14425                                  
 14426 00006348 EB0B                    		jmp char1_xy_60
 14427                                  char1_xy_40:
 14428                                  
 14429 0000634A 268B07                  		mov eax,[es:edi]
 14430 0000634D E85DF8FFFF              		call enc_transp
 14431 00006352 268907                  		mov [es:edi],eax
 14432                                  
 14433                                  char1_xy_60:
 14434 00006355 59                      		pop ecx
 14435 00006356 033D[6B010000]          		add edi,[pixel_bytes]
 14436 0000635C 49                      		dec ecx
 14437 0000635D 75B8                    		jnz char1_xy_30
 14438                                  
 14439 0000635F 8F05[05010000]          		pop dword [transp]
 14440                                  
 14441 00006365 8B3D[30010000]          		mov edi,[chr.pixel_buf]
 14442 0000636B 26668B17                		mov dx,[es:edi]
 14443 0000636F 26668B4F02              		mov cx,[es:edi+2]
 14444 00006374 83C704                  		add edi,4
 14445 00006377 6689D3                  		mov bx,dx
 14446 0000637A 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
 14447 00006382 E8F2040000              		call restore_bg
 14448                                  
 14449                                  char1_xy_90:
 14450 00006387 668F05[77010000]        		pop word [gfx_cur_y]
 14451 0000638E 668F05[75010000]        		pop word [gfx_cur_x]
 14452                                  
 14453 00006395 C3                      		ret
 14454                                  
 14455                                  
 14456                                  char1_unpack:
 14457 00006396 66A1[3C010000]          		mov ax,[chr.bitmap_width]
 14458 0000639C 66F725[3E010000]        		mul word [chr.bitmap_height]
 14459 000063A3 0FB7C0                  		movzx eax,ax
 14460 000063A6 89C5                    		mov ebp,eax
 14461 000063A8 89C3                    		mov ebx,eax
 14462 000063AA 0FAF1D[6B010000]        		imul ebx,[pixel_bytes]
 14463 000063B1 83C004                  		add eax,4
 14464 000063B4 83C304                  		add ebx,4
 14465 000063B7 3B05[2C010000]          		cmp eax,[chr.buf_len]
 14466 000063BD 725D                    		jb char1_unpack_10
 14467 000063BF 55                      		push ebp
 14468 000063C0 53                      		push ebx
 14469 000063C1 50                      		push eax
 14470 000063C2 A1[28010000]            		mov eax,[chr.buf]
 14471 000063C7 E8E4B7FFFF              		call free
 14472 000063CC A1[30010000]            		mov eax,[chr.pixel_buf]
 14473 000063D1 E8DAB7FFFF              		call free
 14474 000063D6 31C0                    		xor eax,eax
 14475 000063D8 A3[28010000]            		mov [chr.buf],eax
 14476 000063DD A3[30010000]            		mov [chr.pixel_buf],eax
 14477 000063E2 A3[2C010000]            		mov [chr.buf_len],eax
 14478 000063E7 58                      		pop eax
 14479 000063E8 50                      		push eax
 14480 000063E9 E800B7FFFF              		call calloc
 14481 000063EE 59                      		pop ecx
 14482 000063EF 5B                      		pop ebx
 14483 000063F0 5D                      		pop ebp
 14484 000063F1 09C0                    		or eax,eax
 14485 000063F3 F9                      		stc
 14486 000063F4 0F84A4000000            		jz char1_unpack_90
 14487 000063FA 890D[2C010000]          		mov [chr.buf_len],ecx
 14488 00006400 A3[28010000]            		mov [chr.buf],eax
 14489 00006405 89D8                    		mov eax,ebx
 14490 00006407 55                      		push ebp
 14491 00006408 E8E1B6FFFF              		call calloc
 14492 0000640D 5D                      		pop ebp
 14493 0000640E 09C0                    		or eax,eax
 14494 00006410 F9                      		stc
 14495 00006411 0F8487000000            		jz char1_unpack_90
 14496 00006417 A3[30010000]            		mov [chr.pixel_buf],eax
 14497                                  char1_unpack_10:
 14498 0000641C 8B3D[28010000]          		mov edi,[chr.buf]
 14499 00006422 8B35[30010000]          		mov esi,[chr.pixel_buf]
 14500                                  
 14501 00006428 668B0D[3C010000]        		mov cx,[chr.bitmap_width]
 14502 0000642F 2666890F                		mov [es:edi],cx
 14503 00006433 2666890E                		mov [es:esi],cx
 14504 00006437 668B0D[3E010000]        		mov cx,[chr.bitmap_height]
 14505 0000643E 2666894F02              		mov [es:edi+2],cx
 14506 00006443 2666894E02              		mov [es:esi+2],cx
 14507                                  
 14508 00006448 83C704                  		add edi,4
 14509                                  
 14510                                  		; ebp: pixel
 14511                                  
 14512 0000644B 8B1D[34010000]          		mov ebx,[chr.data]
 14513 00006451 8B35[38010000]          		mov esi,[chr.bitmap]
 14514                                  
 14515                                  char1_unpack_20:
 14516 00006457 55                      		push ebp
 14517 00006458 57                      		push edi
 14518 00006459 B104                    		mov cl,cbm_gray_bits
 14519 0000645B E83F000000              		call get_u_bits
 14520 00006460 5F                      		pop edi
 14521 00006461 5D                      		pop ebp
 14522                                  
 14523 00006462 3C0D                    		cmp al,cbm_max_gray
 14524 00006464 770C                    		ja char1_unpack_30
 14525 00006466 8A80[47010000]          		mov al,[chr.gray_values + eax]
 14526 0000646C AA                      		stosb
 14527 0000646D 4D                      		dec ebp
 14528 0000646E 75E7                    		jnz char1_unpack_20
 14529 00006470 EB2B                    		jmp char1_unpack_80
 14530                                  char1_unpack_30:
 14531 00006472 8A15[47010000]          		mov dl,[chr.gray_values + 0]
 14532 00006478 3C0F                    		cmp al,cbm_rep_white
 14533 0000647A 7506                    		jnz char1_unpack_40
 14534 0000647C 8A15[54010000]          		mov dl,[chr.gray_values + cbm_max_gray]
 14535                                  char1_unpack_40:
 14536 00006482 52                      		push edx
 14537 00006483 55                      		push ebp
 14538 00006484 57                      		push edi
 14539 00006485 B103                    		mov cl,cbm_gray_bit_count
 14540 00006487 E813000000              		call get_u_bits
 14541 0000648C 5F                      		pop edi
 14542 0000648D 5D                      		pop ebp
 14543 0000648E 5A                      		pop edx
 14544 0000648F 0403                    		add al,3
 14545 00006491 86D0                    		xchg dl,al
 14546                                  char1_unpack_50:
 14547 00006493 AA                      		stosb
 14548 00006494 4D                      		dec ebp
 14549 00006495 7406                    		jz char1_unpack_80
 14550 00006497 FECA                    		dec dl
 14551 00006499 75F8                    		jnz char1_unpack_50
 14552 0000649B EBBA                    		jmp char1_unpack_20
 14553                                  char1_unpack_80:
 14554 0000649D F8                      		clc
 14555                                  
 14556                                  char1_unpack_90:
 14557 0000649E C3                      		ret
 14558                                  
 14559                                  
 14560                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14561                                  ; Read bits and convert to unsigned int.
 14562                                  ;
 14563                                  ; ebx		buffer
 14564                                  ; esi		bit offset
 14565                                  ; cl		bits
 14566                                  ;
 14567                                  ; return:
 14568                                  ;  eax		(unsigned) number
 14569                                  ;  ebx		buffer
 14570                                  ;  esi		updated bit offset
 14571                                  ;  ecx		bits
 14572                                  ;
 14573                                  get_u_bits:
 14574 0000649F 0FB6C9                  		movzx ecx,cl
 14575 000064A2 89F7                    		mov edi,esi
 14576 000064A4 89F5                    		mov ebp,esi
 14577 000064A6 01CE                    		add esi,ecx
 14578 000064A8 C1EF03                  		shr edi,3
 14579 000064AB 83E507                  		and ebp,7
 14580 000064AE 268B043B                		mov eax,[es:ebx+edi]
 14581 000064B2 87CD                    		xchg ecx,ebp
 14582 000064B4 268B543B04              		mov edx,[es:ebx+edi+4]
 14583 000064B9 0FADD0                  		shrd eax,edx,cl
 14584 000064BC 87CD                    		xchg ecx,ebp
 14585 000064BE 83F920                  		cmp ecx,32
 14586 000064C1 730A                    		jae get_u_bits_90
 14587 000064C3 BD01000000              		mov ebp,1
 14588 000064C8 D3E5                    		shl ebp,cl
 14589 000064CA 4D                      		dec ebp
 14590 000064CB 21E8                    		and eax,ebp
 14591                                  get_u_bits_90:
 14592 000064CD C3                      		ret
 14593                                  
 14594                                  
 14595                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14596                                  ; Read bits and convert to signed int.
 14597                                  ;
 14598                                  ; ebx		buffer
 14599                                  ; esi		bit offset
 14600                                  ; cl		bits
 14601                                  ;
 14602                                  ; return:
 14603                                  ;  eax		(signed) number
 14604                                  ;  ebx		buffer
 14605                                  ;  esi		updated bit offset
 14606                                  ;  ecx		bits
 14607                                  ;
 14608                                  get_s_bits:
 14609 000064CE E8CCFFFFFF              		call get_u_bits
 14610 000064D3 09C9                    		or ecx,ecx
 14611 000064D5 7414                    		jz get_s_bits_90
 14612 000064D7 49                      		dec ecx
 14613 000064D8 BD01000000              		mov ebp,1
 14614 000064DD D3E5                    		shl ebp,cl
 14615 000064DF 41                      		inc ecx
 14616 000064E0 85E8                    		test eax,ebp
 14617 000064E2 7407                    		jz get_s_bits_90
 14618 000064E4 31ED                    		xor ebp,ebp
 14619 000064E6 4D                      		dec ebp
 14620 000064E7 D3E5                    		shl ebp,cl
 14621 000064E9 01E8                    		add eax,ebp
 14622                                  get_s_bits_90:
 14623 000064EB C3                      		ret
 14624                                  
 14625                                  
 14626                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14627                                  ; Look for char in font.
 14628                                  ;
 14629                                  ;  eax		char
 14630                                  ;
 14631                                  ; return:
 14632                                  ;  CF		0 = found, 1 = not found
 14633                                  ;  [chr.*]	updated
 14634                                  ;
 14635                                  
 14636                                  		bits 32
 14637                                  
 14638                                  find_char:
 14639 000064EC 25FFFF1F00              		and eax,1fffffh
 14640 000064F1 50                      		push eax
 14641 000064F2 833D[0C010000]00        		cmp dword [font],0
 14642 000064F9 F9                      		stc
 14643 000064FA 0F84B2000000            		jz find_char_90
 14644                                  
 14645 00006500 F605[1A010000]01        		test byte [font.properties],1
 14646 00006507 7405                    		jz find_char_10
 14647 00006509 B82A000000              		mov eax,'*'
 14648                                  find_char_10:
 14649                                  
 14650 0000650E 8B1D[0C010000]          		mov ebx,[font]
 14651 00006514 83C30B                  		add ebx,foh.size
 14652 00006517 8B0D[10010000]          		mov ecx,[font.entries]
 14653                                  
 14654                                  		; do a binary search for char
 14655                                  
 14656                                  find_char_20:
 14657 0000651D 89CE                    		mov esi,ecx
 14658 0000651F D1EE                    		shr esi,1
 14659                                  
 14660 00006521 8D34B6                  		lea esi,[esi+4*esi]			; offset table has 5-byte entries
 14661 00006524 268B1433                		mov edx,[es:ebx+esi]
 14662 00006528 81E2FFFF1F00            		and edx,1fffffh				; 21 bits
 14663 0000652E 39D0                    		cmp eax,edx
 14664                                  
 14665 00006530 7413                    		jz find_char_80
 14666                                  
 14667 00006532 7C0A                    		jl find_char_50
 14668                                  
 14669 00006534 01F3                    		add ebx,esi
 14670 00006536 F6C101                  		test cl,1
 14671 00006539 7403                    		jz find_char_50
 14672 0000653B 83C305                  		add ebx,5				; offset table has 5-byte entries
 14673                                  find_char_50:
 14674 0000653E D1E9                    		shr ecx,1
 14675 00006540 75DB                    		jnz find_char_20
 14676                                  
 14677 00006542 F9                      		stc
 14678 00006543 EB6D                    		jmp find_char_90
 14679                                  
 14680                                  find_char_80:
 14681 00006545 268B543301              		mov edx,[es:ebx+esi+1]
 14682 0000654A C1EA0D                  		shr edx,13				; 19 bit offset
 14683 0000654D 0315[0C010000]          		add edx,[font]
 14684 00006553 8915[34010000]          		mov [chr.data],edx
 14685                                  
 14686 00006559 89D3                    		mov ebx,edx
 14687 0000655B 31F6                    		xor esi,esi
 14688 0000655D B102                    		mov cl,2
 14689 0000655F E83BFFFFFF              		call get_u_bits
 14690 00006564 A2[46010000]            		mov [chr.type],al
 14691 00006569 B103                    		mov cl,3
 14692 0000656B E82FFFFFFF              		call get_u_bits
 14693 00006570 88C1                    		mov cl,al
 14694 00006572 FEC1                    		inc cl
 14695                                  
 14696 00006574 E826FFFFFF              		call get_u_bits
 14697 00006579 66A3[3C010000]          		mov [chr.bitmap_width],ax
 14698 0000657F E81BFFFFFF              		call get_u_bits
 14699 00006584 66A3[3E010000]          		mov [chr.bitmap_height],ax
 14700 0000658A E83FFFFFFF              		call get_s_bits
 14701 0000658F 66A3[40010000]          		mov [chr.x_ofs],ax
 14702 00006595 E834FFFFFF              		call get_s_bits
 14703 0000659A 66A3[42010000]          		mov [chr.y_ofs],ax
 14704 000065A0 E829FFFFFF              		call get_s_bits
 14705 000065A5 66A3[44010000]          		mov [chr.x_advance],ax
 14706                                  
 14707 000065AB 8935[38010000]          		mov [chr.bitmap],esi
 14708                                  
 14709 000065B1 F8                      		clc
 14710                                  find_char_90:
 14711 000065B2 58                      		pop eax
 14712 000065B3 C3                      		ret
 14713                                  
 14714                                  
 14715                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14716                                  ; Get char width.
 14717                                  ;
 14718                                  ;  eax		char
 14719                                  ;
 14720                                  ; return:
 14721                                  ;  eax		char
 14722                                  ;  ecx		char width
 14723                                  ;
 14724                                  
 14725                                  		bits 32
 14726                                  
 14727                                  char_width:
 14728 000065B4 50                      		push eax
 14729 000065B5 83F81F                  		cmp eax,1fh		; \x1f looks like a space, but isn't
 14730 000065B8 7502                    		jnz char_width_10
 14731 000065BA B020                    		mov al,' '
 14732                                  char_width_10:
 14733 000065BC E82BFFFFFF              		call find_char
 14734 000065C1 B900000000              		mov ecx,0
 14735 000065C6 7207                    		jc char_width_90
 14736 000065C8 0FBF0D[44010000]        		movsx ecx,word [chr.x_advance]
 14737                                  char_width_90:
 14738 000065CF 58                      		pop eax
 14739 000065D0 C3                      		ret
 14740                                  
 14741                                  
 14742                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14743                                  ; Write char at the current console cursor position.
 14744                                  ;
 14745                                  ;  al		char
 14746                                  ;  ebx		color
 14747                                  ;
 14748                                  ; return:
 14749                                  ;  console cursor position gets advanced
 14750                                  ;
 14751                                  
 14752                                  		bits 32
 14753                                  
 14754                                  con_char_xy:
 14755 000065D1 0FA0                    		push fs
 14756 000065D3 0FA8                    		push gs
 14757                                  
 14758 000065D5 FF35[A4010000]          		push dword [gfx_color]
 14759                                  
 14760 000065DB 66FF35[75010000]        		push word [gfx_cur_x]
 14761 000065E2 66FF35[77010000]        		push word [gfx_cur_y]
 14762                                  
 14763 000065E9 891D[A4010000]          		mov [gfx_color],ebx
 14764                                  
 14765 000065EF 66FF35[24010000]        		push word [con_x]
 14766 000065F6 668F05[75010000]        		pop word [gfx_cur_x]
 14767                                  
 14768 000065FD 66FF35[26010000]        		push word [con_y]
 14769 00006604 668F05[77010000]        		pop word [gfx_cur_y]
 14770                                  
 14771 0000660B E864F3FFFF              		call goto_xy
 14772 00006610 E813030000              		call screen_segs
 14773                                  
 14774 00006615 8B35[1C010000]          		mov esi,[cfont.lin]
 14775                                  
 14776 0000661B 0FB6C0                  		movzx eax,al
 14777                                  
 14778 0000661E F625[20010000]          		mul byte [cfont_height]
 14779 00006624 01C6                    		add esi,eax
 14780                                  
 14781 00006626 31D2                    		xor edx,edx
 14782                                  
 14783                                  con_char_xy_20:
 14784 00006628 B907000000              		mov ecx,7
 14785                                  con_char_xy_30:
 14786 0000662D 260FA30E                		bt [es:esi],ecx
 14787 00006631 A1[A4010000]            		mov eax,[gfx_color]
 14788 00006636 7202                    		jc con_char_xy_40
 14789 00006638 31C0                    		xor eax,eax
 14790                                  con_char_xy_40:
 14791 0000663A FF15[F5000000]          		call [setpixel_a]
 14792 00006640 66033D[6B010000]        		add di,[pixel_bytes]
 14793 00006647 7305                    		jnc con_char_xy_50
 14794 00006649 E8DCF2FFFF              		call inc_winseg
 14795                                  con_char_xy_50:
 14796 0000664E 49                      		dec ecx
 14797 0000664F 79DC                    		jns con_char_xy_30
 14798                                  
 14799 00006651 46                      		inc esi
 14800                                  
 14801 00006652 A1[ED000000]            		mov eax,[screen_line_len]
 14802 00006657 8B1D[6B010000]          		mov ebx,[pixel_bytes]
 14803 0000665D C1E303                  		shl ebx,3
 14804 00006660 29D8                    		sub eax,ebx
 14805 00006662 6601C7                  		add di,ax
 14806 00006665 7305                    		jnc con_char_xy_60
 14807 00006667 E8BEF2FFFF              		call inc_winseg
 14808                                  con_char_xy_60:
 14809 0000666C 42                      		inc edx
 14810 0000666D 3B15[20010000]          		cmp edx,[cfont_height]
 14811 00006673 75B3                    		jnz con_char_xy_20
 14812                                  
 14813 00006675 668305[24010000]08      		add word [con_x],8
 14814                                  
 14815 0000667D 668F05[77010000]        		pop word [gfx_cur_y]
 14816 00006684 668F05[75010000]        		pop word [gfx_cur_x]
 14817                                  
 14818 0000668B 8F05[A4010000]          		pop dword [gfx_color]
 14819                                  
 14820 00006691 0FA9                    		pop gs
 14821 00006693 0FA1                    		pop fs
 14822 00006695 C3                      		ret
 14823                                  
 14824                                  
 14825                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14826                                  ; Get some memory for palette data
 14827                                  ;
 14828                                  
 14829                                  		bits 32
 14830                                  
 14831                                  pal_init:
 14832 00006696 B800030000              		mov eax,300h
 14833 0000669B E84EB4FFFF              		call calloc
 14834 000066A0 A3[5D010000]            		mov [gfx_pal],eax
 14835 000066A5 09C0                    		or eax,eax
 14836 000066A7 F9                      		stc
 14837 000066A8 7415                    		jz pal_init_90
 14838 000066AA B800030000              		mov eax,300h
 14839 000066AF E83AB4FFFF              		call calloc
 14840 000066B4 A3[61010000]            		mov [gfx_pal_tmp],eax
 14841 000066B9 09C0                    		or eax,eax
 14842 000066BB F9                      		stc
 14843 000066BC 7401                    		jz pal_init_90
 14844 000066BE F8                      		clc
 14845                                  pal_init_90:		
 14846 000066BF C3                      		ret
 14847                                  
 14848                                  
 14849                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14850                                  ; Load palette data.
 14851                                  ;
 14852                                  ; ecx		number of palette entries
 14853                                  ; edx		start entry
 14854                                  ;
 14855                                  
 14856                                  		bits 32
 14857                                  
 14858                                  load_palette:
 14859 000066C0 803D[6B010000]01        		cmp byte [pixel_bytes],1
 14860 000066C7 775E                    		ja load_palette_90
 14861                                  
 14862 000066C9 81FA00010000            		cmp edx,100h
 14863 000066CF 7356                    		jae load_palette_90
 14864                                  
 14865 000066D1 89D0                    		mov eax,edx
 14866 000066D3 01C8                    		add eax,ecx
 14867 000066D5 2D00010000              		sub eax,100h
 14868 000066DA 7602                    		jbe load_palette_10
 14869 000066DC 29C1                    		sub ecx,eax
 14870                                  load_palette_10:
 14871 000066DE 09C9                    		or ecx,ecx
 14872 000066E0 7445                    		jz load_palette_90
 14873                                  
 14874 000066E2 8D2C52                  		lea ebp,[edx+2*edx]
 14875                                  
 14876 000066E5 89D3                    		mov ebx,edx
 14877 000066E7 51                      		push ecx
 14878                                  
 14879                                  		; vga function wants 6 bit values
 14880                                  
 14881 000066E8 8B35[5D010000]          		mov esi,[gfx_pal]
 14882 000066EE 8B3D[61010000]          		mov edi,[gfx_pal_tmp]
 14883                                  
 14884 000066F4 01EE                    		add esi,ebp
 14885 000066F6 01EF                    		add edi,ebp
 14886                                  
 14887 000066F8 8D0C49                  		lea ecx,[ecx+2*ecx]
 14888                                  
 14889                                  load_palette_50:
 14890 000066FB 26AC                    		es lodsb
 14891 000066FD C0E802                  		shr al,2
 14892 00006700 AA                      		stosb
 14893 00006701 E2F8                    		loop load_palette_50
 14894                                  
 14895 00006703 59                      		pop ecx
 14896                                  
 14897 00006704 8B15[61010000]          		mov edx,[gfx_pal_tmp]
 14898 0000670A 01EA                    		add edx,ebp
 14899                                  
 14900 0000670C 89D0                    		mov eax,edx
 14901 0000670E 83E20F                  		and edx,0fh
 14902 00006711 C1E804                  		shr eax,4
 14903                                  
 14904                                  		; check seg value
 14905 00006714 3D00000100              		cmp eax,10000h
 14906 00006719 730C                    		jae load_palette_90
 14907                                  
 14908 0000671B 66A3[0E0A0000]          		mov [rm_seg.es],ax
 14909                                  
 14910 00006721 66B81210                		mov ax,1012h
 14911 00006725 CD10                    		int 10h
 14912                                  
 14913                                  load_palette_90:
 14914 00006727 C3                      		ret
 14915                                  
 14916                                  
 14917                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14918                                  ; Clip drawing area.
 14919                                  ;
 14920                                  ;  [gfx_cur_x]		left border
 14921                                  ;  [gfx_cur_y]		top border
 14922                                  ;  [gfx_width]		width
 14923                                  ;  [gfx_height]		height
 14924                                  ;
 14925                                  ; return:
 14926                                  ;  CF			1 = empty area
 14927                                  ;  If CF = 0		Area adjusted to fit within [clip_*].
 14928                                  ;  If CF = 1		Undefined values in [gfx_*].
 14929                                  ;
 14930                                  ;  Changed registers: -
 14931                                  ;
 14932                                  
 14933                                  		bits 32
 14934                                  
 14935                                  clip_it:
 14936 00006728 60                      		pusha
 14937                                  
 14938 00006729 66A1[75010000]          		mov ax,[gfx_cur_x]
 14939 0000672F 668B15[79010000]        		mov dx,[gfx_width]
 14940 00006736 668B0D[83010000]        		mov cx,[clip_l]
 14941 0000673D 6601C2                  		add dx,ax
 14942                                  
 14943 00006740 6629C8                  		sub ax,cx
 14944 00006743 7D0E                    		jge clip_it_10
 14945 00006745 660105[79010000]        		add [gfx_width],ax
 14946 0000674C 66890D[75010000]        		mov [gfx_cur_x],cx
 14947                                  clip_it_10:
 14948 00006753 662B15[85010000]        		sub dx,[clip_r]
 14949 0000675A 7C07                    		jl clip_it_20
 14950 0000675C 662915[79010000]        		sub [gfx_width],dx
 14951                                  clip_it_20:
 14952 00006763 66833D[79010000]00      		cmp word [gfx_width],0
 14953 0000676B 7F0C                    		jg clip_it_30
 14954 0000676D 66C705[79010000]00-     		mov word [gfx_width],0
 14955 00006775 00                 
 14956 00006776 F9                      		stc
 14957 00006777 EB4E                    		jmp clip_it_90
 14958                                  clip_it_30:
 14959                                  
 14960 00006779 66A1[77010000]          		mov ax,[gfx_cur_y]
 14961 0000677F 668B15[7B010000]        		mov dx,[gfx_height]
 14962 00006786 668B0D[87010000]        		mov cx,[clip_t]
 14963 0000678D 6601C2                  		add dx,ax
 14964                                  
 14965 00006790 6629C8                  		sub ax,cx
 14966 00006793 7D0E                    		jge clip_it_40
 14967 00006795 660105[7B010000]        		add [gfx_height],ax
 14968 0000679C 66890D[77010000]        		mov [gfx_cur_y],cx
 14969                                  clip_it_40:
 14970 000067A3 662B15[89010000]        		sub dx,[clip_b]
 14971 000067AA 7C07                    		jl clip_it_50
 14972 000067AC 662915[7B010000]        		sub [gfx_height],dx
 14973                                  clip_it_50:
 14974 000067B3 66833D[7B010000]00      		cmp word [gfx_height],0
 14975 000067BB 7F0A                    		jg clip_it_90
 14976 000067BD 66C705[7B010000]00-     		mov word [gfx_height],0
 14977 000067C5 00                 
 14978 000067C6 F9                      		stc
 14979                                  
 14980                                  clip_it_90:
 14981 000067C7 61                      		popa
 14982 000067C8 C3                      		ret
 14983                                  
 14984                                  
 14985                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 14986                                  ; Save screen region.
 14987                                  ;
 14988                                  ;  dx, cx	width, height
 14989                                  ;  edi		buffer
 14990                                  ;
 14991                                  ; Note: ensure we only make aligned dword reads from video memory. Else some
 14992                                  ; ATI 7000 boards will make problems (computer hangs).
 14993                                  ; As an added bonus, it really speeds things up.
 14994                                  ;
 14995                                  
 14996                                  		bits 32
 14997                                  
 14998                                  save_bg:
 14999 000067C9 0FA0                    		push fs
 15000 000067CB 0FA8                    		push gs
 15001                                  
 15002 000067CD 57                      		push edi
 15003                                  
 15004 000067CE E8A1F1FFFF              		call goto_xy
 15005 000067D3 89FE                    		mov esi,edi
 15006                                  
 15007 000067D5 5F                      		pop edi
 15008                                  
 15009 000067D6 E84D010000              		call screen_segs
 15010                                  
 15011 000067DB 0FB7C9                  		movzx ecx,cx
 15012 000067DE 0FB7D2                  		movzx edx,dx
 15013                                  
 15014 000067E1 09C9                    		or ecx,ecx
 15015 000067E3 0F848B000000            		jz save_bg_90
 15016 000067E9 09D2                    		or edx,edx
 15017 000067EB 0F8483000000            		jz save_bg_90
 15018                                  
 15019 000067F1 660FAF15[6B010000]      		imul dx,[pixel_bytes]
 15020                                  
 15021                                  save_bg_10:
 15022 000067F9 51                      		push ecx
 15023 000067FA 52                      		push edx
 15024                                  
 15025 000067FB 89F5                    		mov ebp,esi
 15026 000067FD 89F1                    		mov ecx,esi
 15027 000067FF 83E5FC                  		and ebp,~3
 15028 00006802 83E103                  		and ecx,3
 15029                                  
 15030 00006805 7424                    		jz save_bg_30
 15031                                  
 15032 00006807 C1E103                  		shl ecx,3
 15033 0000680A 648B4500                		mov eax,[fs:ebp]
 15034 0000680E D3E8                    		shr eax,cl
 15035                                  
 15036                                  save_bg_20:
 15037 00006810 AA                      		stosb
 15038 00006811 6646                    		inc si
 15039 00006813 C1E808                  		shr eax,8
 15040 00006816 4A                      		dec edx
 15041                                  		; ensure ch = 0
 15042 00006817 7441                    		jz save_bg_70
 15043 00006819 80C108                  		add cl,8
 15044 0000681C 80F920                  		cmp cl,20h
 15045 0000681F 75EF                    		jnz save_bg_20
 15046                                  
 15047 00006821 6609F6                  		or si,si
 15048 00006824 7505                    		jnz save_bg_30
 15049 00006826 E8FFF0FFFF              		call inc_winseg
 15050                                  save_bg_30:
 15051 0000682B 648B06                  		mov eax,[fs:esi]
 15052 0000682E 6683C604                		add si,4
 15053 00006832 7505                    		jnz save_bg_35
 15054 00006834 E8F1F0FFFF              		call inc_winseg
 15055                                  save_bg_35:
 15056 00006839 83FA04                  		cmp edx,4
 15057 0000683C 7208                    		jb save_bg_50
 15058 0000683E AB                      		stosd
 15059 0000683F 83EA04                  		sub edx,4
 15060                                  		; ch = 0
 15061 00006842 7416                    		jz save_bg_70
 15062 00006844 EBE5                    		jmp save_bg_30
 15063                                  save_bg_50:
 15064 00006846 B904000000              		mov ecx,4
 15065 0000684B 29D1                    		sub ecx,edx
 15066 0000684D 6629CE                  		sub si,cx
 15067                                  		; don't switch bank later: we've already done it
 15068 00006850 0F92C5                  		setc ch
 15069                                  save_bg_60:
 15070 00006853 AA                      		stosb
 15071 00006854 C1E808                  		shr eax,8
 15072 00006857 4A                      		dec edx
 15073 00006858 75F9                    		jnz save_bg_60
 15074                                  
 15075                                  save_bg_70:
 15076 0000685A 5A                      		pop edx
 15077                                  
 15078 0000685B A1[ED000000]            		mov eax,[screen_line_len]
 15079 00006860 29D0                    		sub eax,edx
 15080 00006862 6601C6                  		add si,ax
 15081 00006865 7309                    		jnc save_bg_80
 15082 00006867 08ED                    		or ch,ch
 15083 00006869 7505                    		jnz save_bg_80
 15084 0000686B E8BAF0FFFF              		call inc_winseg
 15085                                  save_bg_80:
 15086 00006870 59                      		pop ecx
 15087                                  
 15088 00006871 49                      		dec ecx
 15089 00006872 7585                    		jnz save_bg_10
 15090                                  
 15091                                  save_bg_90:
 15092 00006874 0FA9                    		pop gs
 15093 00006876 0FA1                    		pop fs
 15094 00006878 C3                      		ret
 15095                                  
 15096                                  
 15097                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15098                                  ; Restore screen region.
 15099                                  ;
 15100                                  ;  dx, cx	width, height
 15101                                  ;  bx		bytes per line
 15102                                  ;  edi		buffer
 15103                                  ;
 15104                                  ; Does not change cursor positon.
 15105                                  ;
 15106                                  
 15107                                  		bits 32
 15108                                  
 15109                                  restore_bg:
 15110 00006879 0FA0                    		push fs
 15111 0000687B 0FA8                    		push gs
 15112                                  
 15113 0000687D FF35[75010000]          		push dword [gfx_cur]
 15114                                  
 15115 00006883 668915[79010000]        		mov [gfx_width],dx
 15116 0000688A 66890D[7B010000]        		mov [gfx_height],cx
 15117                                  
 15118 00006891 66A1[75010000]          		mov ax,[gfx_cur_x]
 15119 00006897 668B0D[77010000]        		mov cx,[gfx_cur_y]
 15120                                  
 15121 0000689E E885FEFFFF              		call clip_it
 15122 000068A3 7278                    		jc restore_bg_90
 15123                                  
 15124 000068A5 662B05[75010000]        		sub ax,[gfx_cur_x]
 15125 000068AC 66F7D8                  		neg ax
 15126 000068AF 66F725[6B010000]        		mul word [pixel_bytes]
 15127 000068B6 0FB7E8                  		movzx ebp,ax
 15128                                  
 15129 000068B9 662B0D[77010000]        		sub cx,[gfx_cur_y]
 15130 000068C0 66F7D9                  		neg cx
 15131 000068C3 0FB7C9                  		movzx ecx,cx
 15132 000068C6 0FB7DB                  		movzx ebx,bx
 15133 000068C9 0FAFCB                  		imul ecx,ebx
 15134 000068CC 01E9                    		add ecx,ebp
 15135                                  
 15136 000068CE 8D340F                  		lea esi,[edi+ecx]
 15137                                  
 15138 000068D1 0FB715[79010000]        		movzx edx,word [gfx_width]
 15139 000068D8 0FB70D[7B010000]        		movzx ecx,word [gfx_height]
 15140                                  
 15141 000068DF E890F0FFFF              		call goto_xy
 15142 000068E4 E83F000000              		call screen_segs
 15143                                  
 15144 000068E9 0FAF15[6B010000]        		imul edx,[pixel_bytes]
 15145                                  
 15146                                  restore_bg_20:
 15147 000068F0 52                      		push edx
 15148                                  
 15149                                  restore_bg_30:
 15150 000068F1 26AC                    		es lodsb
 15151 000068F3 658807                  		mov [gs:edi],al
 15152 000068F6 6647                    		inc di
 15153 000068F8 7505                    		jnz restore_bg_50
 15154 000068FA E82BF0FFFF              		call inc_winseg
 15155                                  restore_bg_50:
 15156 000068FF 4A                      		dec edx
 15157 00006900 75EF                    		jnz restore_bg_30
 15158                                  
 15159 00006902 5A                      		pop edx
 15160                                  
 15161 00006903 A1[ED000000]            		mov eax,[screen_line_len]
 15162 00006908 29D0                    		sub eax,edx
 15163 0000690A 6601C7                  		add di,ax
 15164 0000690D 7305                    		jnc restore_bg_60
 15165 0000690F E816F0FFFF              		call inc_winseg
 15166                                  restore_bg_60:
 15167 00006914 89D8                    		mov eax,ebx
 15168 00006916 29D0                    		sub eax,edx
 15169 00006918 01C6                    		add esi,eax
 15170                                  
 15171 0000691A 49                      		dec ecx
 15172 0000691B 75D3                    		jnz restore_bg_20
 15173                                  
 15174                                  restore_bg_90:
 15175 0000691D 8F05[75010000]          		pop dword [gfx_cur]
 15176                                  
 15177 00006923 0FA9                    		pop gs
 15178 00006925 0FA1                    		pop fs
 15179 00006927 C3                      		ret
 15180                                  
 15181                                  
 15182                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15183                                  ; Load screen segments.
 15184                                  ;
 15185                                  ; return:
 15186                                  ;  fs		read segment
 15187                                  ;  gs		write segment
 15188                                  ;
 15189                                  ; Modified registers: -
 15190                                  ;
 15191                                  
 15192                                  		bits 32
 15193                                  
 15194                                  screen_segs:
 15195 00006928 50                      		push eax
 15196 00006929 66B83800                		mov ax,pm_seg.screen_r16
 15197 0000692D 8EE0                    		mov fs,ax
 15198 0000692F 66B84000                		mov ax,pm_seg.screen_w16
 15199 00006933 8EE8                    		mov gs,ax
 15200 00006935 58                      		pop eax
 15201 00006936 C3                      		ret
 15202                                  
 15203                                  
 15204                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15205                                  ; Draw filled rectangle.
 15206                                  ;
 15207                                  ;  dx, cx	width, height
 15208                                  ;  eax		color
 15209                                  ;
 15210                                  
 15211                                  		bits 32
 15212                                  
 15213                                  fill_rect:
 15214 00006937 0FA0                    		push fs
 15215 00006939 0FA8                    		push gs
 15216                                  
 15217 0000693B 668915[79010000]        		mov [gfx_width],dx
 15218 00006942 66890D[7B010000]        		mov [gfx_height],cx
 15219                                  
 15220 00006949 E8DAFDFFFF              		call clip_it
 15221 0000694E 724F                    		jc fill_rect_90
 15222                                  
 15223 00006950 0FB715[79010000]        		movzx edx,word [gfx_width]
 15224 00006957 0FB70D[7B010000]        		movzx ecx,word [gfx_height]
 15225                                  
 15226 0000695E E811F0FFFF              		call goto_xy
 15227 00006963 E8C0FFFFFF              		call screen_segs
 15228                                  
 15229 00006968 8B2D[ED000000]          		mov ebp,[screen_line_len]
 15230 0000696E 89D0                    		mov eax,edx
 15231 00006970 0FAF05[6B010000]        		imul eax,[pixel_bytes]
 15232 00006977 29C5                    		sub ebp,eax
 15233                                  
 15234                                  fill_rect_20:
 15235 00006979 89D3                    		mov ebx,edx
 15236                                  fill_rect_30:
 15237 0000697B FF15[F9000000]          		call [setpixel_t]
 15238 00006981 66033D[6B010000]        		add di,[pixel_bytes]
 15239 00006988 7305                    		jnc fill_rect_60
 15240 0000698A E89BEFFFFF              		call inc_winseg
 15241                                  fill_rect_60:
 15242 0000698F 4B                      		dec ebx
 15243 00006990 75E9                    		jnz fill_rect_30
 15244                                  
 15245 00006992 6601EF                  		add di,bp
 15246 00006995 7305                    		jnc fill_rect_80
 15247 00006997 E88EEFFFFF              		call inc_winseg
 15248                                  fill_rect_80:
 15249 0000699C 49                      		dec ecx
 15250 0000699D 75DA                    		jnz fill_rect_20
 15251                                  
 15252                                  fill_rect_90:
 15253                                  
 15254 0000699F 0FA9                    		pop gs
 15255 000069A1 0FA1                    		pop fs
 15256 000069A3 C3                      		ret	
 15257                                  
 15258                                  
 15259                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15260                                  ; Activate sound file.
 15261                                  ;
 15262                                  ;  eax		buffer
 15263                                  ;
 15264                                  
 15265                                  snd_activate:
 15266 000069A4 50                      		push eax
 15267 000069A5 E8B6B4FFFF              		call find_mem_size
 15268 000069AA 5E                      		pop esi
 15269                                  
 15270 000069AB 83F810                  		cmp eax,16
 15271 000069AE 0F866C010000            		jbe sa_90
 15272                                  
 15273 000069B4 26813E05B6537D          		cmp dword [es:esi],7d53b605h
 15274 000069BB 0F85C6000000            		jnz sa_50
 15275                                  
 15276                                  		; our format
 15277                                  
 15278 000069C1 268B4E0C                		mov ecx,[es:esi+12]	; sample rate
 15279 000069C5 83F901                  		cmp ecx,1
 15280 000069C8 0F8252010000            		jb sa_90
 15281 000069CE 81F9C05D0000            		cmp ecx,24000
 15282 000069D4 0F8346010000            		jae sa_90
 15283                                  
 15284 000069DA 268B5608                		mov edx,[es:esi+8]	; unpacked size
 15285 000069DE 83C610                  		add esi,16
 15286 000069E1 83E810                  		sub eax,16
 15287                                  
 15288 000069E4 263B46F4                		cmp eax,[es:esi-16+4]	; packed size
 15289 000069E8 7604                    		jbe sa_10
 15290 000069EA 268B46F4                		mov eax,[es:esi-16+4]
 15291                                  sa_10:
 15292                                  
 15293 000069EE 3B15[20090000]          		cmp edx,[sound_unpack_buf_size]
 15294 000069F4 762E                    		jbe sa_20
 15295                                  
 15296 000069F6 52                      		push edx
 15297 000069F7 51                      		push ecx
 15298 000069F8 56                      		push esi
 15299 000069F9 50                      		push eax
 15300                                  
 15301 000069FA 52                      		push edx
 15302 000069FB A1[1C090000]            		mov eax,[sound_unpack_buf]
 15303 00006A00 E8ABB1FFFF              		call free
 15304 00006A05 58                      		pop eax
 15305 00006A06 E8E3B0FFFF              		call calloc
 15306                                  
 15307 00006A0B 5D                      		pop ebp
 15308 00006A0C 5E                      		pop esi
 15309 00006A0D 59                      		pop ecx
 15310 00006A0E 5A                      		pop edx
 15311                                  
 15312 00006A0F 09C0                    		or eax,eax
 15313 00006A11 0F8409010000            		jz sa_90
 15314 00006A17 A3[1C090000]            		mov [sound_unpack_buf],eax
 15315 00006A1C 8915[20090000]          		mov [sound_unpack_buf_size],edx
 15316 00006A22 89E8                    		mov eax,ebp
 15317                                  sa_20:
 15318                                  
 15319 00006A24 8B3D[1C090000]          		mov edi,[sound_unpack_buf]
 15320 00006A2A 01FA                    		add edx,edi
 15321                                  
 15322                                  		; esi: src
 15323                                  		; edi: dst
 15324                                  		; eax: src size
 15325                                  		; edx: dst end
 15326                                  
 15327 00006A2C 8915[91090000]          		mov [wav_end],edx
 15328 00006A32 893D[8D090000]          		mov [wav_current],edi
 15329                                  
 15330 00006A38 893D[A0090000]          		mov [tmp_var_0],edi
 15331 00006A3E 01F0                    		add eax,esi
 15332 00006A40 A3[A4090000]            		mov [tmp_var_1],eax
 15333                                  
 15334 00006A45 51                      		push ecx
 15335                                  
 15336                                  sa_30:
 15337 00006A46 3B35[A4090000]          		cmp esi,[tmp_var_1]
 15338 00006A4C 7336                    		jae sa_49
 15339 00006A4E 268B06                  		mov eax,[es:esi]
 15340 00006A51 3CFF                    		cmp al,0ffh
 15341 00006A53 7408                    		jz sa_40
 15342 00006A55 AA                      		stosb
 15343 00006A56 46                      		inc esi
 15344 00006A57 39D7                    		cmp edi,edx
 15345 00006A59 72EB                    		jb sa_30
 15346 00006A5B EB27                    		jmp sa_49
 15347                                  sa_40:
 15348 00006A5D 83C604                  		add esi,4
 15349 00006A60 C1E808                  		shr eax,8
 15350 00006A63 89C1                    		mov ecx,eax
 15351 00006A65 83E17F                  		and ecx,7fh
 15352 00006A68 83C105                  		add ecx,5
 15353 00006A6B 8D1C0F                  		lea ebx,[edi+ecx] 
 15354 00006A6E 39D3                    		cmp ebx,edx
 15355 00006A70 7712                    		ja sa_49
 15356 00006A72 C1E807                  		shr eax,7
 15357 00006A75 0305[A0090000]          		add eax,[tmp_var_0]
 15358 00006A7B 56                      		push esi
 15359 00006A7C 89C6                    		mov esi,eax
 15360 00006A7E F326A4                  		es rep movsb
 15361 00006A81 5E                      		pop esi
 15362 00006A82 EBC2                    		jmp sa_30
 15363                                  sa_49:
 15364                                  
 15365 00006A84 59                      		pop ecx
 15366                                  
 15367 00006A85 EB66                    		jmp sa_70
 15368                                  
 15369                                  sa_50:
 15370 00006A87 83F82C                  		cmp eax,44		; WAV header size
 15371 00006A8A 0F8690000000            		jbe sa_90
 15372                                  
 15373                                  		; could be WAV
 15374                                  
 15375 00006A90 26813E52494646          		cmp dword [es:esi+0],46464952h
 15376 00006A97 0F8583000000            		jnz sa_90
 15377 00006A9D 26817E0857415645        		cmp dword [es:esi+8],45564157h
 15378 00006AA5 7579                    		jnz sa_90
 15379 00006AA7 2666837E1401            		cmp word [es:esi+20],1
 15380 00006AAD 7571                    		jnz sa_90
 15381 00006AAF 2666837E2208            		cmp word [es:esi+34],8
 15382 00006AB5 7569                    		jnz sa_90
 15383 00006AB7 2666837E1601            		cmp word [es:esi+22],1
 15384 00006ABD 7561                    		jnz sa_90
 15385 00006ABF 268B4E18                		mov ecx,[es:esi+24]	; sample rate
 15386 00006AC3 83F901                  		cmp ecx,1
 15387 00006AC6 7258                    		jb sa_90
 15388 00006AC8 81F9C05D0000            		cmp ecx,24000
 15389 00006ACE 7350                    		jae sa_90
 15390                                  
 15391 00006AD0 83C62C                  		add esi,44
 15392 00006AD3 83E82C                  		sub eax,44
 15393                                  
 15394 00006AD6 263B46FC                		cmp eax,[es:esi-44+40]	; size
 15395 00006ADA 7604                    		jbe sa_60
 15396 00006ADC 268B46FC                		mov eax,[es:esi-44+40]
 15397                                  sa_60:
 15398                                  
 15399 00006AE0 01F0                    		add eax,esi
 15400                                  
 15401 00006AE2 A3[91090000]            		mov [wav_end],eax
 15402 00006AE7 8935[8D090000]          		mov [wav_current],esi
 15403                                  
 15404                                  sa_70:
 15405                                  
 15406 00006AED C605[30090000]00        		mov byte [sound_scale],0
 15407 00006AF4 81F9E02E0000            		cmp ecx,12000
 15408 00006AFA 730F                    		jae sa_80
 15409 00006AFC 01C9                    		add ecx,ecx
 15410 00006AFE C605[30090000]01        		mov byte [sound_scale],1
 15411 00006B05 FF0D[8D090000]          		dec dword [wav_current]
 15412                                  sa_80:
 15413                                  
 15414 00006B0B 51                      		push ecx
 15415 00006B0C E8CB000000              		call sound_init
 15416 00006B11 58                      		pop eax
 15417 00006B12 720C                    		jc sa_90
 15418 00006B14 E8DE010000              		call sound_setsample
 15419                                  
 15420 00006B19 800D[2F090000]F0        		or byte [sound_playing],0f0h
 15421                                  
 15422                                  sa_90:
 15423 00006B20 C3                      		ret
 15424                                  
 15425                                  
 15426                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15427                                  ; Our timer interrut handler.
 15428                                  ;
 15429                                  ; Needed to play sound via pc-speaker.
 15430                                  ;
 15431                                  
 15432                                  		bits 16
 15433                                  
 15434                                  new_int8:
 15435 00006B21 6660                    		pushad
 15436 00006B23 1E                      		push ds
 15437 00006B24 06                      		push es
 15438 00006B25 0FA0                    		push fs
 15439 00006B27 0FA8                    		push gs
 15440                                  
 15441 00006B29 0E                      		push cs
 15442 00006B2A 1F                      		pop ds
 15443                                  
 15444 00006B2B 66FF06[8909]            		inc dword [int8_count]
 15445                                  
 15446 00006B30 803E[2F09]00            		cmp byte [sound_playing],0
 15447 00006B35 7437                    		jz new_int8_50
 15448                                  
 15449                                  		; play sound
 15450                                  
 15451 00006B37 8B36[3D09]              		mov si,[sound_start]
 15452 00006B3B 3B36[4109]              		cmp si,[sound_end]
 15453 00006B3F 7417                    		jz new_int8_30
 15454                                  
 15455 00006B41 C41E[3509]              		les bx,[sound_buf]
 15456 00006B45 260FB600                		movzx ax,byte [es:bx+si]
 15457                                  
 15458                                  		; 0ffh = off
 15459                                  
 15460 00006B49 3CFF                    		cmp al,0ffh
 15461 00006B4B 7402                    		jz new_int8_10
 15462                                  
 15463                                  %if 0
 15464                                  
 15465                                  		; not slower than timer
 15466                                  
 15467                                  		mov cx,[cnt0_start_val]
 15468                                  		sub cx,4
 15469                                  
 15470                                  		cmp ax,cx
 15471                                  		jb new_int8_05
 15472                                  		mov ax,cx
 15473                                  new_int8_05:
 15474                                  %endif
 15475                                  
 15476 00006B4D E642                    		out 42h,al
 15477                                  
 15478                                  new_int8_10:
 15479 00006B4F 46                      		inc si
 15480 00006B50 81E6FF0F                		and si,sound_buf_mask
 15481 00006B54 8936[3D09]              		mov [sound_start],si
 15482                                  
 15483                                  new_int8_30:
 15484                                  
 15485                                  		; refill sound buffer
 15486                                  
 15487 00006B58 A1[4109]                		mov ax,[sound_end]
 15488 00006B5B 2B06[3D09]              		sub ax,[sound_start]
 15489 00006B5F 7303                    		jnc new_int8_40
 15490 00006B61 050010                  		add ax,sound_buf_size
 15491                                  new_int8_40:
 15492 00006B64 3DA000                  		cmp ax,160
 15493 00006B67 7305                    		jae new_int8_50
 15494                                  
 15495 00006B69 C606[9A09]01            		mov byte [need_sound_update],1
 15496                                  
 15497                                  new_int8_50:
 15498                                  
 15499                                  		; run bios timer
 15500                                  
 15501 00006B6E A1[2609]                		mov ax,[cnt0_start_val]
 15502 00006B71 09C0                    		or ax,ax
 15503 00006B73 7406                    		jz new_int8_60
 15504 00006B75 0106[2409]              		add [cnt0_acc],ax
 15505 00006B79 7309                    		jnc new_int8_70
 15506                                  new_int8_60:
 15507 00006B7B 6A40                    		push word 40h
 15508 00006B7D 07                      		pop es
 15509 00006B7E 2666FF066C00            		inc dword [es:6ch]
 15510                                  new_int8_70:
 15511                                  
 15512 00006B84 B020                    		mov al,20h
 15513 00006B86 E620                    		out 20h,al
 15514                                  
 15515 00006B88 0FA9                    		pop gs
 15516 00006B8A 0FA1                    		pop fs
 15517 00006B8C 07                      		pop es
 15518 00006B8D 1F                      		pop ds
 15519 00006B8E 6661                    		popad
 15520                                  
 15521 00006B90 CF                      		iret
 15522                                  
 15523                                  
 15524                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15525                                  ; Add sound samples to buffer.
 15526                                  ;
 15527                                  
 15528                                  		bits 32
 15529                                  
 15530                                  sound_update:
 15531                                  
 15532 00006B91 F605[2F090000]0F        		test byte [sound_playing],0fh
 15533 00006B98 7407                    		jz sound_update_20
 15534 00006B9A E8CB010000              		call mod_get_samples
 15535 00006B9F EB33                    		jmp sound_update_50
 15536                                  sound_update_20:
 15537 00006BA1 F605[2F090000]F0        		test byte [sound_playing],0f0h
 15538 00006BA8 742A                    		jz sound_update_50
 15539 00006BAA E830020000              		call wav_get_samples
 15540                                  
 15541 00006BAF A1[8D090000]            		mov eax,[wav_current]
 15542 00006BB4 3B05[91090000]          		cmp eax,[wav_end]
 15543 00006BBA 7518                    		jnz sound_update_50
 15544 00006BBC A1[95090000]            		mov eax,[wav_next]
 15545 00006BC1 09C0                    		or eax,eax
 15546 00006BC3 740F                    		jz sound_update_50
 15547 00006BC5 E8DAFDFFFF              		call snd_activate
 15548 00006BCA C705[95090000]0000-     		mov dword [wav_next],0
 15549 00006BD2 0000               
 15550                                  
 15551                                  sound_update_50:
 15552                                  
 15553 00006BD4 C605[9A090000]00        		mov byte [need_sound_update],0
 15554                                  
 15555 00006BDB C3                      		ret
 15556                                  
 15557                                  
 15558                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15559                                  ; Prepare sound subsystem.
 15560                                  ;
 15561                                  ; Installs a new timer interrupt handler and increases timer frequency.
 15562                                  ;
 15563                                  
 15564                                  		bits 32
 15565                                  
 15566                                  sound_init:
 15567 00006BDC 803D[2D090000]00        		cmp byte [sound_ok],0
 15568 00006BE3 0F8597000000            		jnz sound_init_90
 15569                                  
 15570 00006BE9 B8700B0000              		mov eax,ar_sizeof
 15571 00006BEE E8FBAEFFFF              		call calloc
 15572 00006BF3 83F801                  		cmp eax,1
 15573 00006BF6 0F8284000000            		jc sound_init_90
 15574 00006BFC A3[85090000]            		mov [mod_buf],eax
 15575                                  
 15576 00006C01 E826010000              		call mod_init
 15577                                  
 15578 00006C06 31C0                    		xor eax,eax
 15579 00006C08 A3[89090000]            		mov [int8_count],eax
 15580 00006C0D A3[3D090000]            		mov [sound_start],eax
 15581 00006C12 A3[41090000]            		mov [sound_end],eax
 15582 00006C17 A2[2F090000]            		mov [sound_playing],al
 15583 00006C1C A2[2E090000]            		mov [sound_int_active],al
 15584 00006C21 A2[9A090000]            		mov [need_sound_update],al
 15585                                  
 15586 00006C26 BF[45090000]            		mov edi,playlist
 15587 00006C2B 033D[140A0000]          		add edi,[prog.base]
 15588 00006C31 B940000000              		mov ecx,playlist_entries * sizeof_playlist
 15589 00006C36 F3AA                    		rep stosb
 15590                                  
 15591 00006C38 9C                      		pushf
 15592 00006C39 FA                      		cli
 15593                                  
 15594 00006C3A B090                    		mov al,90h
 15595 00006C3C E643                    		out 43h,al
 15596                                  
 15597 00006C3E B034                    		mov al,34h
 15598 00006C40 E643                    		out 43h,al
 15599                                  
 15600 00006C42 6631C0                  		xor ax,ax
 15601 00006C45 E640                    		out 40h,al
 15602 00006C47 E640                    		out 40h,al
 15603                                  
 15604 00006C49 E461                    		in al,61h
 15605 00006C4B 0C03                    		or al,3
 15606 00006C4D E661                    		out 61h,al
 15607                                  
 15608 00006C4F 26FF3520000000          		push dword [es:8*4]
 15609 00006C56 8F05[28090000]          		pop dword [sound_old_int8]
 15610                                  
 15611 00006C5C 66FF35[9B7C0000]        		push word [rm_prog_cs]
 15612 00006C63 6668[216B]              		push word new_int8
 15613 00006C67 268F0520000000          		pop dword [es:8*4]
 15614                                  
 15615 00006C6E 9D                      		popf
 15616                                  
 15617 00006C6F B8803E0000              		mov eax,16000
 15618 00006C74 E87E000000              		call sound_setsample
 15619                                  
 15620 00006C79 C605[2D090000]01        		mov byte [sound_ok],1
 15621                                  sound_init_90:
 15622 00006C80 C3                      		ret
 15623                                  
 15624                                  
 15625                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15626                                  ; Shut down sound subsystem.
 15627                                  ;
 15628                                  ; Activates old timer interrupt handler and sets timer frequency back to
 15629                                  ; normal.
 15630                                  ;
 15631                                  		bits 32
 15632                                  
 15633                                  sound_done:
 15634 00006C81 803D[2D090000]00        		cmp byte [sound_ok],0
 15635 00006C88 746C                    		jz sound_done_90
 15636                                  
 15637 00006C8A 9C                      		pushf
 15638 00006C8B FA                      		cli
 15639                                  
 15640 00006C8C E461                    		in al,61h
 15641 00006C8E 24FC                    		and al,~3
 15642 00006C90 E661                    		out 61h,al
 15643                                  
 15644 00006C92 B036                    		mov al,36h
 15645 00006C94 E643                    		out 43h,al
 15646                                  
 15647 00006C96 31C0                    		xor eax,eax
 15648 00006C98 E640                    		out 40h,al
 15649 00006C9A E640                    		out 40h,al
 15650                                  
 15651 00006C9C 66A3[26090000]          		mov [cnt0_start_val],ax
 15652 00006CA2 66A3[24090000]          		mov [cnt0_acc],ax
 15653 00006CA8 A2[2F090000]            		mov [sound_playing],al
 15654 00006CAD A2[9A090000]            		mov [need_sound_update],al
 15655 00006CB2 A3[3D090000]            		mov [sound_start],eax
 15656 00006CB7 A3[41090000]            		mov [sound_end],eax
 15657                                  
 15658 00006CBC FF35[28090000]          		push dword [sound_old_int8]
 15659 00006CC2 268F0520000000          		pop dword [es:8*4]
 15660                                  
 15661 00006CC9 C605[2D090000]00        		mov byte [sound_ok],0
 15662                                  
 15663 00006CD0 9D                      		popf
 15664                                  
 15665 00006CD1 A1[85090000]            		mov eax,[mod_buf]
 15666 00006CD6 E8D5AEFFFF              		call free
 15667                                  
 15668 00006CDB A1[1C090000]            		mov eax,[sound_unpack_buf]
 15669 00006CE0 E8CBAEFFFF              		call free
 15670                                  
 15671 00006CE5 31C0                    		xor eax,eax
 15672 00006CE7 A3[85090000]            		mov [mod_buf],eax
 15673 00006CEC A3[1C090000]            		mov [sound_unpack_buf],eax
 15674 00006CF1 A3[20090000]            		mov [sound_unpack_buf_size],eax
 15675                                  
 15676                                  sound_done_90:
 15677 00006CF6 C3                      		ret
 15678                                  
 15679                                  
 15680                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15681                                  ; Set sample rate for sound playback.
 15682                                  ;
 15683                                  ; eax		sample rate
 15684                                  ;
 15685                                  
 15686                                  		bits 32
 15687                                  
 15688                                  sound_setsample:
 15689 00006CF7 83F814                  		cmp eax,20
 15690 00006CFA 7305                    		jae sound_setsample_20
 15691 00006CFC B814000000              		mov eax,20
 15692                                  sound_setsample_20:
 15693 00006D01 3DC05D0000              		cmp eax,24000
 15694 00006D06 7605                    		jbe sound_setsample_50
 15695 00006D08 B8C05D0000              		mov eax,24000
 15696                                  sound_setsample_50:
 15697 00006D0D A3[31090000]            		mov [sound_sample],eax
 15698 00006D12 91                      		xchg eax,ecx
 15699 00006D13 B8DC341200              		mov eax,1193180
 15700 00006D18 31D2                    		xor edx,edx
 15701 00006D1A F7F1                    		div ecx
 15702 00006D1C 66A3[26090000]          		mov [cnt0_start_val],ax
 15703                                  
 15704 00006D22 9C                      		pushf
 15705 00006D23 FA                      		cli
 15706 00006D24 E640                    		out 40h,al
 15707 00006D26 88E0                    		mov al,ah
 15708 00006D28 E640                    		out 40h,al
 15709 00006D2A 9D                      		popf
 15710                                  
 15711                                  sound_setsample_90:
 15712 00006D2B C3                      		ret
 15713                                  
 15714                                  
 15715                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15716                                  ; Init mod player.
 15717                                  ;
 15718                                  		bits 32
 15719                                  
 15720                                  mod_init:
 15721 00006D2C 8B35[85090000]          		mov esi,[mod_buf]
 15722 00006D32 E83C1A0000              		call init
 15723 00006D37 C3                      		ret
 15724                                  
 15725                                  
 15726                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15727                                  
 15728                                  		bits 32
 15729                                  
 15730                                  mod_load:
 15731 00006D38 8B35[85090000]          		mov esi,[mod_buf]
 15732 00006D3E E8781A0000              		call loadmod
 15733 00006D43 C3                      		ret
 15734                                  
 15735                                  
 15736                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15737                                  
 15738                                  		bits 32
 15739                                  
 15740                                  mod_play:
 15741 00006D44 8B35[85090000]          		mov esi,[mod_buf]
 15742 00006D4A E8771A0000              		call playmod
 15743 00006D4F 800D[2F090000]0F        		or byte [sound_playing],0fh
 15744 00006D56 C3                      		ret
 15745                                  
 15746                                  
 15747                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15748                                  
 15749                                  		bits 32
 15750                                  
 15751                                  mod_playsample:
 15752 00006D57 8B35[85090000]          		mov esi,[mod_buf]
 15753 00006D5D E8711A0000              		call playsamp
 15754 00006D62 800D[2F090000]0F        		or byte [sound_playing],0fh
 15755 00006D69 C3                      		ret
 15756                                  
 15757                                  
 15758                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15759                                  
 15760                                  		bits 32
 15761                                  
 15762                                  mod_get_samples:
 15763 00006D6A 8B35[85090000]          		mov esi,[mod_buf]
 15764 00006D70 56                      		push esi
 15765 00006D71 E8841A0000              		call play
 15766 00006D76 5E                      		pop esi
 15767                                  
 15768 00006D77 268A16                  		mov dl,[es:esi]
 15769 00006D7A 83C601                  		add esi,ar_samps
 15770                                  
 15771                                  		; dl: 0/1 --> play nothing/play
 15772 00006D7D 80EA01                  		sub dl,1
 15773                                  
 15774 00006D80 B940010000              		mov ecx,num_samples
 15775 00006D85 8B1D[39090000]          		mov ebx,[sound_buf.lin]
 15776 00006D8B 8B3D[41090000]          		mov edi,[sound_end]
 15777 00006D91 FC                      		cld
 15778                                  
 15779                                  mod_get_samples_20:
 15780                                  
 15781 00006D92 26AC                    		es lodsb
 15782 00006D94 08D0                    		or al,dl		; 0ffh if we play nothing
 15783 00006D96 2688043B                		mov [es:ebx+edi],al
 15784 00006D9A 47                      		inc edi
 15785 00006D9B 81E7FF0F0000            		and edi,sound_buf_mask
 15786                                  
 15787 00006DA1 49                      		dec ecx
 15788 00006DA2 75EE                    		jnz mod_get_samples_20
 15789 00006DA4 893D[41090000]          		mov [sound_end],edi
 15790                                  
 15791                                  mod_get_samples_90:
 15792 00006DAA C3                      		ret
 15793                                  
 15794                                  
 15795                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15796                                  ; Set mod player volume.
 15797                                  ;
 15798                                  ; al		volume (0 .. 100)
 15799                                  ;
 15800                                  
 15801                                  		bits 32
 15802                                  
 15803                                  mod_setvolume:
 15804 00006DAB 803D[2D090000]00        		cmp byte [sound_ok],0
 15805 00006DB2 742A                    		jz mod_setvolume_90
 15806                                  
 15807 00006DB4 8B35[85090000]          		mov esi,[mod_buf]
 15808                                  
 15809 00006DBA 0FB6D0                  		movzx edx,al
 15810 00006DBD 31C0                    		xor eax,eax
 15811 00006DBF 09D2                    		or edx,edx
 15812 00006DC1 740F                    		jz mod_setvolume_50
 15813 00006DC3 6683E801                		sub ax,1
 15814 00006DC7 6683DA00                		sbb dx,0
 15815 00006DCB 66BB6400                		mov bx,100
 15816 00006DCF 66F7F3                  		div bx
 15817                                  mod_setvolume_50:
 15818 00006DD2 89C3                    		mov ebx,eax
 15819 00006DD4 31C9                    		xor ecx,ecx
 15820 00006DD6 8D41FF                  		lea eax,[ecx-1]
 15821 00006DD9 E8CE1B0000              		call setvol
 15822                                  mod_setvolume_90:
 15823 00006DDE C3                      		ret
 15824                                  
 15825                                  
 15826                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15827                                  
 15828                                  		bits 32
 15829                                  
 15830                                  wav_get_samples:
 15831 00006DDF 8B35[8D090000]          		mov esi,[wav_current]
 15832 00006DE5 09F6                    		or esi,esi
 15833 00006DE7 74C1                    		jz mod_get_samples_90
 15834 00006DE9 3B35[91090000]          		cmp esi,[wav_end]
 15835 00006DEF 73B9                    		jae mod_get_samples_90
 15836                                  
 15837 00006DF1 B940010000              		mov ecx,num_samples
 15838 00006DF6 8B3D[39090000]          		mov edi,[sound_buf.lin]
 15839 00006DFC 8B2D[41090000]          		mov ebp,[sound_end]
 15840 00006E02 FC                      		cld
 15841                                  
 15842                                  wav_get_samples_20:
 15843 00006E03 3B35[91090000]          		cmp esi,[wav_end]
 15844 00006E09 7204                    		jb wav_get_samples_25
 15845 00006E0B B0FF                    		mov al,0ffh
 15846 00006E0D EB29                    		jmp wav_get_samples_50
 15847                                  wav_get_samples_25:
 15848 00006E0F 26AC                    		es lodsb
 15849                                  
 15850 00006E11 803D[30090000]00        		cmp byte [sound_scale],0
 15851 00006E18 7419                    		jz wav_get_samples_30
 15852                                  
 15853 00006E1A 88C2                    		mov dl,al
 15854 00006E1C E832000000              		call calc_delay
 15855                                  		
 15856 00006E21 2688042F                		mov [es:edi+ebp],al
 15857 00006E25 45                      		inc ebp
 15858 00006E26 81E5FF0F0000            		and ebp,sound_buf_mask
 15859                                  
 15860 00006E2C 88D0                    		mov al,dl
 15861 00006E2E 260206                  		add al,[es:esi]
 15862 00006E31 D0D8                    		rcr al,1
 15863                                  
 15864                                  wav_get_samples_30:
 15865 00006E33 E81B000000              		call calc_delay
 15866                                  
 15867                                  wav_get_samples_50:
 15868 00006E38 2688042F                		mov [es:edi+ebp],al
 15869 00006E3C 45                      		inc ebp
 15870 00006E3D 81E5FF0F0000            		and ebp,sound_buf_mask
 15871                                  
 15872 00006E43 49                      		dec ecx
 15873 00006E44 75BD                    		jnz wav_get_samples_20
 15874                                  
 15875 00006E46 892D[41090000]          		mov [sound_end],ebp
 15876 00006E4C 8935[8D090000]          		mov [wav_current],esi
 15877                                  
 15878                                  wav_get_samples_90:
 15879 00006E52 C3                      		ret
 15880                                  
 15881                                  
 15882                                  calc_delay:
 15883 00006E53 52                      		push edx
 15884 00006E54 53                      		push ebx
 15885                                  
 15886 00006E55 2C80                    		sub al,128
 15887 00006E57 0FBEC0                  		movsx eax,al
 15888 00006E5A 0FB615[2C090000]        		movzx edx,byte [sound_vol]
 15889 00006E61 F7EA                    		imul edx
 15890 00006E63 BB64000000              		mov ebx,100
 15891 00006E68 F7FB                    		idiv ebx
 15892 00006E6A 83F87F                  		cmp eax,7fh
 15893 00006E6D 7E02                    		jle calc_delay_30
 15894 00006E6F B07F                    		mov al,7fh
 15895                                  calc_delay_30:
 15896 00006E71 83F880                  		cmp eax,-80h
 15897 00006E74 7F02                    		jg calc_delay_40
 15898 00006E76 B080                    		mov al,-80h
 15899                                  calc_delay_40:
 15900 00006E78 0480                    		add al,80h
 15901 00006E7A 0FB6C0                  		movzx eax,al
 15902 00006E7D 8A80[AC880000]          		mov al,[pctab+eax]
 15903                                  
 15904 00006E83 5B                      		pop ebx
 15905 00006E84 5A                      		pop edx
 15906 00006E85 C3                      		ret
 15907                                  
 15908                                  
 15909                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15910                                  ; Check for cpuid instruction.
 15911                                  ;
 15912                                  ; return:
 15913                                  ;  CF		0/1	yes/no
 15914                                  ;
 15915                                  
 15916                                  		bits 32
 15917                                  
 15918                                  chk_cpuid:
 15919 00006E86 B900002000              		mov ecx,1 << 21
 15920 00006E8B 9C                      		pushf
 15921 00006E8C 9C                      		pushf
 15922 00006E8D 58                      		pop eax
 15923 00006E8E 31C8                    		xor eax,ecx
 15924 00006E90 50                      		push eax
 15925 00006E91 9D                      		popf
 15926 00006E92 9C                      		pushf
 15927 00006E93 5A                      		pop edx
 15928 00006E94 9D                      		popf
 15929 00006E95 31D0                    		xor eax,edx
 15930 00006E97 39C8                    		cmp eax,ecx
 15931 00006E99 F9                      		stc
 15932 00006E9A 7401                    		jz chk_cpuid_90
 15933 00006E9C F8                      		clc
 15934                                  chk_cpuid_90:
 15935 00006E9D C3                      		ret
 15936                                  
 15937                                  
 15938                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15939                                  ; Check for 64 bit extension.
 15940                                  ;
 15941                                  ; return:
 15942                                  ;  CF		0/1	yes/no
 15943                                  ;
 15944                                  
 15945                                  		bits 32
 15946                                  
 15947                                  chk_64bit:
 15948 00006E9E E8E3FFFFFF              		call chk_cpuid
 15949 00006EA3 7210                    		jc chk_64bit_90
 15950 00006EA5 B801000080              		mov eax,80000001h
 15951 00006EAA 0FA2                    		cpuid
 15952 00006EAC F7C200000020            		test edx,1 << 29
 15953 00006EB2 7501                    		jnz chk_64bit_90
 15954 00006EB4 F9                      		stc
 15955                                  chk_64bit_90:
 15956 00006EB5 C3                      		ret
 15957                                  
 15958                                  
 15959                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15960                                  ;; test1 - for internal testing
 15961                                  ;
 15962                                  ; group: system
 15963                                  ;
 15964                                  ; ( ptr1 -- )
 15965                                  ;
 15966                                  ; ptr1: some value with obscure meaning
 15967                                  ;
 15968                                  ; example
 15969                                  ;  0x123 test1
 15970                                  ;
 15971                                  
 15972                                  		bits 32
 15973                                  
 15974                                  prim_test1:
 15975 00006EB6 E810E1FFFF              		call pr_setptr_or_none
 15976 00006EBB A3[9C090000]            		mov [ddc_external],eax
 15977 00006EC0 C3                      		ret
 15978                                  
 15979                                  
 15980                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 15981                                  
 15982                                  		bits 32
 15983                                  
 15984                                  prim_xxx:
 15985                                  ;		call pr_setptr_or_none
 15986                                  		; eax
 15987                                  		rm32_call mouse_init
 15988                              <1>  pm_leave
 15989                              <2> %%j_pm_1:
 15990 00006EC1 E8A40D0000          <2>  call switch_to_rm
 15991                              <2> %%j_pm_2:
 15992                              <2>  %if %%j_pm_2 - %%j_pm_1 != 5
 15993                              <2>  %error "pm_leave: not in 32 bit mode"
 15994                              <2>  %endif
 15995                              <2> 
 15996                              <2>  bits 16
 15997 00006EC6 E8AE07              <1>  call %1
 15998                              <1>  pm_enter
 15999                              <2> %%j_pm_1:
 16000 00006EC9 E8160D              <2>  call switch_to_pm
 16001                              <2> %%j_pm_2:
 16002                              <2>  %if %%j_pm_2 - %%j_pm_1 != 3
 16003                              <2>  %error "pm_enter: not in 16 bit mode"
 16004                              <2>  %endif
 16005                              <2> 
 16006                              <2>  bits 32
 16007 00006ECC 08E4                    		or ah,ah
 16008 00006ECE B800000000              		mov eax,0
 16009 00006ED3 750B                    		jnz prim_xxx_90
 16010 00006ED5 B8[8F760000]            		mov eax,mouse_x
 16011 00006EDA 0305[140A0000]          		add eax,[prog.base]
 16012                                  prim_xxx_90:
 16013 00006EE0 E9B9E0FFFF              		jmp pr_getptr_or_none
 16014                                  
 16015                                  
 16016                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16017                                  ;; systempath - convert path to path relative to system working directory
 16018                                  ;
 16019                                  ; group: system
 16020                                  ;
 16021                                  ; ( str1 -- str2 )
 16022                                  ;
 16023                                  ; str1: path
 16024                                  ; str2: system path
 16025                                  ;
 16026                                  ; Note: str2 points to a static buffer.
 16027                                  ;
 16028                                  ; example
 16029                                  ;  "foo/bar" systempath
 16030                                  ;
 16031                                  
 16032                                  		bits 32
 16033                                  
 16034                                  prim_systempath:
 16035 00006EE5 B204                    		mov dl,t_string
 16036 00006EE7 E8CDC1FFFF              		call get_1arg
 16037 00006EEC 7217                    		jc prim_systempath_90
 16038 00006EEE 89C6                    		mov esi,eax
 16039 00006EF0 E804010000              		call realpath
 16040 00006EF5 E828000000              		call systempath
 16041 00006EFA 89F0                    		mov eax,esi
 16042 00006EFC 31C9                    		xor ecx,ecx
 16043 00006EFE B204                    		mov dl,t_string
 16044 00006F00 E869AAFFFF              		call set_pstack_tos
 16045                                  prim_systempath_90:
 16046 00006F05 C3                      		ret
 16047                                  
 16048                                  
 16049                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16050                                  ;; realpath - convert path to canonical absolute path
 16051                                  ;
 16052                                  ; group: system
 16053                                  ;
 16054                                  ; ( str1 -- str2 )
 16055                                  ;
 16056                                  ; str1: path
 16057                                  ; str2: real path
 16058                                  ;
 16059                                  ; Note: str2 points to a static buffer.
 16060                                  ;
 16061                                  ; example
 16062                                  ;  "foo/bar" realpath
 16063                                  ;
 16064                                  
 16065                                  		bits 32
 16066                                  
 16067                                  prim_realpath:
 16068 00006F06 B204                    		mov dl,t_string
 16069 00006F08 E8ACC1FFFF              		call get_1arg
 16070 00006F0D 7212                    		jc prim_realpath_90
 16071 00006F0F 89C6                    		mov esi,eax
 16072 00006F11 E8E3000000              		call realpath
 16073 00006F16 89F0                    		mov eax,esi
 16074 00006F18 31C9                    		xor ecx,ecx
 16075 00006F1A B204                    		mov dl,t_string
 16076 00006F1C E84DAAFFFF              		call set_pstack_tos
 16077                                  prim_realpath_90:
 16078 00006F21 C3                      		ret
 16079                                  
 16080                                  
 16081                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16082                                  ;
 16083                                  ; Convert absolute path to system path (relative to system's working directory).
 16084                                  ;
 16085                                  ;  esi		absolute path
 16086                                  ;
 16087                                  ; return:
 16088                                  ;  esi		system path
 16089                                  ;
 16090                                  
 16091                                  		bits 32
 16092                                  
 16093                                  systempath:
 16094 00006F22 8B3D[04020000]          		mov edi,[fname.sys_cwd]
 16095 00006F28 31D2                    		xor edx,edx
 16096 00006F2A 31C9                    		xor ecx,ecx
 16097                                  systempath_10:
 16098 00006F2C 268A0417                		mov al,[es:edi + edx]
 16099 00006F30 268A2416                		mov ah,[es:esi + edx]
 16100 00006F34 38E0                    		cmp al,ah
 16101 00006F36 750D                    		jnz systempath_20
 16102 00006F38 3C00                    		cmp al,0
 16103 00006F3A 7471                    		jz systempath_80
 16104 00006F3C 42                      		inc edx
 16105 00006F3D 3C2F                    		cmp al,'/'
 16106 00006F3F 75EB                    		jnz systempath_10
 16107 00006F41 89D1                    		mov ecx,edx
 16108 00006F43 EBE7                    		jmp systempath_10
 16109                                  systempath_20:
 16110                                  		; ecx: points past last common path element
 16111                                  
 16112 00006F45 3C00                    		cmp al,0
 16113 00006F47 7508                    		jnz systempath_22
 16114                                  		; sys_cwd subset of path
 16115 00006F49 01D7                    		add edi,edx
 16116 00006F4B 8D741601                		lea esi,[esi+edx+1]
 16117 00006F4F EB11                    		jmp systempath_28
 16118                                  systempath_22:
 16119 00006F51 80FC00                  		cmp ah,0
 16120 00006F54 7508                    		jnz systempath_24
 16121                                  		; path subset of sys_cwd
 16122 00006F56 01D6                    		add esi,edx
 16123 00006F58 8D7C1701                		lea edi,[edi+edx+1]
 16124 00006F5C EB04                    		jmp systempath_28
 16125                                  systempath_24:
 16126                                  		; path & sys_cwd differ
 16127 00006F5E 01CF                    		add edi,ecx
 16128 00006F60 01CE                    		add esi,ecx
 16129                                  
 16130                                  systempath_28:
 16131 00006F62 8B1D[F8010000]          		mov ebx,[fname.tmp]
 16132 00006F68 8DABFF000000            		lea ebp,[ebx + fname.size - 1]
 16133                                  
 16134                                  systempath_30:
 16135 00006F6E 268A07                  		mov al,[es:edi]
 16136 00006F71 47                      		inc edi
 16137 00006F72 08C0                    		or al,al
 16138 00006F74 7416                    		jz systempath_50
 16139 00006F76 26C7032E2E2F00          		mov dword [es:ebx],'../'
 16140 00006F7D 83C303                  		add ebx,3
 16141                                  systempath_40:
 16142 00006F80 3C2F                    		cmp al,'/'
 16143 00006F82 74EA                    		jz systempath_30
 16144 00006F84 268A07                  		mov al,[es:edi]
 16145 00006F87 47                      		inc edi
 16146 00006F88 08C0                    		or al,al
 16147 00006F8A 75F4                    		jnz systempath_40
 16148                                  systempath_50:
 16149 00006F8C 89DF                    		mov edi,ebx
 16150                                  systempath_60:
 16151 00006F8E 26AC                    		es lodsb
 16152 00006F90 AA                      		stosb
 16153 00006F91 08C0                    		or al,al
 16154 00006F93 75F9                    		jnz systempath_60
 16155 00006F95 8B35[F8010000]          		mov esi,[fname.tmp]
 16156                                  		; remove trailing '/', if any
 16157 00006F9B 4F                      		dec edi
 16158 00006F9C 4F                      		dec edi
 16159 00006F9D 39F7                    		cmp edi,esi
 16160 00006F9F 7616                    		jbe systempath_90
 16161 00006FA1 26803F2F                		cmp byte [es:edi],'/'
 16162 00006FA5 7510                    		jnz systempath_90
 16163 00006FA7 26C60700                		mov byte [es:edi],0
 16164 00006FAB EB0A                    		jmp systempath_90
 16165                                  
 16166                                  systempath_80:
 16167 00006FAD 8B35[F8010000]          		mov esi,[fname.tmp]
 16168 00006FB3 26C60600                		mov byte [es:esi],0
 16169                                  
 16170                                  systempath_90:
 16171                                  		; esi: path relative to sys_cwd
 16172                                  
 16173 00006FB7 C3                      		ret
 16174                                  
 16175                                  
 16176                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16177                                  ;
 16178                                  ; Read current working dir and store result in [fname.sys_cwd].
 16179                                  ;
 16180                                  ; return:
 16181                                  ;  eax		current working dir
 16182                                  ;
 16183                                  		bits 32
 16184                                  
 16185                                  get_sys_cwd:
 16186 00006FB8 8B1D[B4000000]          		mov ebx,[boot.sysconfig]
 16187 00006FBE 26807B0444              		cmp byte [es:ebx+sc.sysconfig_size],sc.size_68
 16188 00006FC3 720A                    		jb get_sys_cwd_10
 16189                                  		; modern way: cwd was passed in info struct
 16190                                  
 16191 00006FC5 31C0                    		xor eax,eax
 16192 00006FC7 268B5340                		mov edx,[es:ebx+sc.cwd]
 16193 00006FCB 09D2                    		or edx,edx
 16194 00006FCD 7507                    		jnz get_sys_cwd_30
 16195                                  get_sys_cwd_10:
 16196                                  		; classical: ask comboot
 16197                                  
 16198 00006FCF B003                    		mov al,3
 16199 00006FD1 E8ABA7FFFF              		call gfx_cb			; cwd (lin)
 16200                                  get_sys_cwd_30:
 16201 00006FD6 8B1D[04020000]          		mov ebx,[fname.sys_cwd]
 16202 00006FDC 08C0                    		or al,al
 16203 00006FDE 7512                    		jnz get_sys_cwd_80
 16204 00006FE0 89D6                    		mov esi,edx
 16205 00006FE2 89DF                    		mov edi,ebx
 16206 00006FE4 B9FF000000              		mov ecx,fname.size - 1
 16207                                  get_sys_cwd_50:
 16208 00006FE9 26AC                    		es lodsb
 16209 00006FEB AA                      		stosb
 16210 00006FEC 08C0                    		or al,al
 16211 00006FEE 7406                    		jz get_sys_cwd_90
 16212 00006FF0 E2F7                    		loop get_sys_cwd_50
 16213                                  get_sys_cwd_80:
 16214 00006FF2 26C60300                		mov byte [es:ebx],0
 16215                                  get_sys_cwd_90:
 16216 00006FF6 89D8                    		mov eax,ebx
 16217 00006FF8 C3                      		ret
 16218                                  
 16219                                  
 16220                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16221                                  ;
 16222                                  ; Convert any path to real absolute path.
 16223                                  ;
 16224                                  ; Path should not end with '/'. Also, avoid '//' and such.
 16225                                  ;
 16226                                  ;  esi		path
 16227                                  ;
 16228                                  ; return:
 16229                                  ;  esi		real path, stored in fname.abs
 16230                                  ;
 16231                                  
 16232                                  		bits 32
 16233                                  
 16234                                  realpath:
 16235 00006FF9 89C6                    		mov esi,eax
 16236                                  
 16237 00006FFB 26803E2F                		cmp byte [es:esi],'/'
 16238 00006FFF 0F8498000000            		jz realpath_80
 16239                                  
 16240 00007005 26803E00                		cmp byte [es:esi],0
 16241 00007009 750B                    		jnz realpath_10
 16242                                  
 16243 0000700B 8B35[00020000]          		mov esi,[fname.cwd]
 16244 00007011 E987000000              		jmp realpath_80
 16245                                  
 16246                                  realpath_10:
 16247                                  		; note: maps / + .. to / because: / + .. -> //.. -> /
 16248                                  
 16249 00007016 89F3                    		mov ebx,esi
 16250 00007018 8B35[00020000]          		mov esi,[fname.cwd]
 16251 0000701E 8B3D[F8010000]          		mov edi,[fname.tmp]
 16252 00007024 89FD                    		mov ebp,edi
 16253                                  realpath_12:
 16254 00007026 26AC                    		es lodsb
 16255 00007028 AA                      		stosb
 16256 00007029 08C0                    		or al,al
 16257 0000702B 75F9                    		jnz realpath_12
 16258 0000702D 4F                      		dec edi
 16259 0000702E 39EF                    		cmp edi,ebp
 16260 00007030 7403                    		jz realpath_20
 16261 00007032 B02F                    		mov al,'/'
 16262 00007034 AA                      		stosb
 16263                                  realpath_20:		
 16264 00007035 89DE                    		mov esi,ebx
 16265 00007037 81C5FF000000            		add ebp,fname.size - 1
 16266                                  realpath_25:
 16267 0000703D 39EF                    		cmp edi,ebp
 16268 0000703F 7309                    		jae realpath_28
 16269 00007041 26AC                    		es lodsb
 16270 00007043 AA                      		stosb
 16271 00007044 08C0                    		or al,al
 16272 00007046 7406                    		jz realpath_30
 16273 00007048 EBF3                    		jmp realpath_25
 16274                                  realpath_28:
 16275 0000704A B000                    		mov al,0
 16276 0000704C AA                      		stosb
 16277 0000704D 4F                      		dec edi
 16278                                  realpath_30:
 16279 0000704E 8B35[F8010000]          		mov esi,[fname.tmp]
 16280 00007054 31FF                    		xor edi,edi
 16281                                  realpath_33:
 16282 00007056 26803E00                		cmp byte [es:esi],0
 16283 0000705A 742D                    		jz realpath_40
 16284                                  		is_dotdot es:esi
 16285 0000705C 26813E2F2E2E2F      <1>  cmp dword [%1],'/../'
 16286 00007063 7407                <1>  jz %%idd_90
 16287 00007065 26813E2F2E2E00      <1>  cmp dword [%1],'/..'
 16288                              <1> %%idd_90:
 16289 0000706C 740B                    		jz realpath_35
 16290 0000706E 26803E2F                		cmp byte [es:esi],'/'
 16291 00007072 7502                    		jnz realpath_34
 16292 00007074 89F7                    		mov edi,esi
 16293                                  realpath_34:
 16294 00007076 46                      		inc esi
 16295 00007077 EBDD                    		jmp realpath_33
 16296                                  realpath_35:
 16297 00007079 09FF                    		or edi,edi
 16298 0000707B 74F9                    		jz realpath_34
 16299 0000707D 83C603                  		add esi,3
 16300                                  realpath_36:
 16301 00007080 26AC                    		es lodsb
 16302 00007082 AA                      		stosb
 16303 00007083 08C0                    		or al,al
 16304 00007085 75F9                    		jnz realpath_36
 16305 00007087 EBC5                    		jmp realpath_30
 16306                                  realpath_40:
 16307 00007089 8B3D[F8010000]          		mov edi,[fname.tmp]
 16308 0000708F 89FE                    		mov esi,edi
 16309 00007091 26803F00                		cmp byte [es:edi],0
 16310 00007095 7506                    		jnz realpath_80
 16311 00007097 66B82F00                		mov ax,'/'
 16312 0000709B 66AB                    		stosw
 16313                                  realpath_80:
 16314                                  		; convert to canonical version
 16315                                  
 16316                                  		; esi must be either absolute path or empty
 16317                                  		; '//'s and trailing '/'s are removed
 16318                                  
 16319 0000709D 8B3D[FC010000]          		mov edi,[fname.abs]
 16320 000070A3 8D9FFF000000            		lea ebx,[edi + fname.size - 1]
 16321 000070A9 B02F                    		mov al,'/'
 16322 000070AB AA                      		stosb
 16323                                  realpath_82:
 16324 000070AC 39DF                    		cmp edi,ebx
 16325 000070AE 7314                    		jae realpath_86
 16326 000070B0 88C4                    		mov ah,al
 16327 000070B2 26AC                    		es lodsb
 16328 000070B4 08C0                    		or al,al
 16329 000070B6 740C                    		jz realpath_86
 16330 000070B8 3C2F                    		cmp al,'/'
 16331 000070BA 7505                    		jnz realpath_84
 16332 000070BC 38E0                    		cmp al,ah
 16333 000070BE 7501                    		jnz realpath_84
 16334 000070C0 4F                      		dec edi
 16335                                  realpath_84:		
 16336 000070C1 AA                      		stosb
 16337 000070C2 EBE8                    		jmp realpath_82
 16338                                  realpath_86:
 16339 000070C4 8B35[FC010000]          		mov esi,[fname.abs]
 16340                                  
 16341                                  		; trailing '/'s
 16342                                  realpath_88:
 16343 000070CA 26C60700                		mov byte [es:edi],0
 16344 000070CE 4F                      		dec edi
 16345 000070CF 39F7                    		cmp edi,esi
 16346 000070D1 7606                    		jbe realpath_90
 16347 000070D3 26803F2F                		cmp byte [es:edi],'/'
 16348 000070D7 74F1                    		jz realpath_88
 16349                                  
 16350                                  realpath_90:
 16351                                  		; esi points to real path in fname.abs
 16352                                  
 16353 000070D9 C3                      		ret
 16354                                  
 16355                                  
 16356                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16357                                  ;
 16358                                  ; Set working directory.
 16359                                  ;
 16360                                  ;  eax		dir name
 16361                                  ;
 16362                                  ; return:
 16363                                  ;  fname.cwd		working dir (absolute path)
 16364                                  ;
 16365                                  
 16366                                  		bits 32
 16367                                  
 16368                                  chdir:
 16369 000070DA 89C6                    		mov esi,eax
 16370 000070DC E818FFFFFF              		call realpath
 16371 000070E1 8B3D[00020000]          		mov edi,[fname.cwd]
 16372                                  chdir_10:
 16373 000070E7 26AC                    		es lodsb
 16374 000070E9 AA                      		stosb
 16375 000070EA 08C0                    		or al,al
 16376 000070EC 75F9                    		jnz chdir_10
 16377 000070EE C3                      		ret
 16378                                  
 16379                                  
 16380                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16381                                  ;
 16382                                  ; Find (and read) file from file system.
 16383                                  ;
 16384                                  ;  eax		file name (lin)
 16385                                  ;
 16386                                  ; return:
 16387                                  ;  eax		file start (lin)
 16388                                  ;
 16389                                  ; Note: use find_mem_size to find out the file size
 16390                                  
 16391                                  		bits 32
 16392                                  
 16393                                  find_file_ext:
 16394 000070EF 89C6                    		mov esi,eax
 16395 000070F1 E803FFFFFF              		call realpath
 16396 000070F6 A1[B4000000]            		mov eax,[boot.sysconfig]
 16397 000070FB 2680780444              		cmp byte [es:eax+sc.sysconfig_size],sc.size_68
 16398 00007100 7205                    		jb find_file_ext_05
 16399 00007102 E81BFEFFFF              		call systempath
 16400                                  find_file_ext_05:
 16401 00007107 89F0                    		mov eax,esi
 16402                                  
 16403 00007109 B204                    		mov dl,t_string
 16404 0000710B 50                      		push eax
 16405 0000710C E8EDDEFFFF              		call get_length
 16406 00007111 91                      		xchg eax,ecx
 16407 00007112 58                      		pop eax
 16408 00007113 09C9                    		or ecx,ecx
 16409 00007115 0F848B000000            		jz find_file_ext_80
 16410 0000711B 83F940                  		cmp ecx,64
 16411 0000711E 0F8382000000            		jae find_file_ext_80
 16412                                  
 16413 00007124 51                      		push ecx
 16414                                  
 16415 00007125 50                      		push eax
 16416 00007126 B000                    		mov al,0
 16417 00007128 E854A6FFFF              		call gfx_cb			; get file name buffer address (edx)
 16418 0000712D 5E                      		pop esi
 16419                                  
 16420 0000712E 59                      		pop ecx
 16421                                  
 16422 0000712F 08C0                    		or al,al
 16423 00007131 7573                    		jnz find_file_ext_80
 16424                                  
 16425 00007133 89D7                    		mov edi,edx
 16426 00007135 F326A4                  		es rep movsb
 16427 00007138 B000                    		mov al,0
 16428 0000713A AA                      		stosb
 16429                                  
 16430 0000713B B001                    		mov al,1
 16431 0000713D E83FA6FFFF              		call gfx_cb			; open file (ecx size)
 16432 00007142 08C0                    		or al,al
 16433 00007144 7560                    		jnz find_file_ext_80
 16434                                  
 16435 00007146 89C8                    		mov eax,ecx
 16436                                  
 16437 00007148 83F8FF                  		cmp eax,-1
 16438 0000714B 7513                    		jnz find_file_ext_10
 16439 0000714D 51                      		push ecx
 16440 0000714E E898ACFFFF              		call maxmemsize
 16441 00007153 59                      		pop ecx
 16442 00007154 3D00000200              		cmp eax,20000h			; not too low, just in case
 16443 00007159 724B                    		jb find_file_ext_80
 16444 0000715B 2D00000100              		sub eax,10000h			; leave a bit
 16445                                  find_file_ext_10:
 16446                                  
 16447 00007160 51                      		push ecx
 16448 00007161 E888A9FFFF              		call calloc
 16449 00007166 59                      		pop ecx
 16450 00007167 09C0                    		or eax,eax
 16451 00007169 743B                    		jz find_file_ext_80
 16452                                  
 16453 0000716B 51                      		push ecx
 16454 0000716C 50                      		push eax
 16455                                  
 16456                                  		; eax: buffer, ecx: buffer size
 16457                                  
 16458 0000716D 89C7                    		mov edi,eax
 16459                                  
 16460                                  find_file_ext_20:
 16461 0000716F 57                      		push edi
 16462 00007170 B002                    		mov al,2
 16463 00007172 E80AA6FFFF              		call gfx_cb			; read next chunk (edx buffer, ecx len)
 16464 00007177 5F                      		pop edi
 16465 00007178 08C0                    		or al,al
 16466 0000717A 750B                    		jnz find_file_ext_50
 16467 0000717C 09C9                    		or ecx,ecx
 16468 0000717E 7407                    		jz find_file_ext_50
 16469                                  
 16470 00007180 89D6                    		mov esi,edx
 16471 00007182 F326A4                  		es rep movsb
 16472                                  
 16473 00007185 EBE8                    		jmp find_file_ext_20
 16474                                  
 16475                                  find_file_ext_50:		
 16476                                  
 16477 00007187 58                      		pop eax
 16478 00007188 59                      		pop ecx
 16479                                  
 16480 00007189 83F9FF                  		cmp ecx,-1
 16481 0000718C 750D                    		jnz find_file_ext_60
 16482 0000718E 29C7                    		sub edi,eax
 16483 00007190 89F9                    		mov ecx,edi
 16484                                  		; ecx: real size
 16485 00007192 50                      		push eax
 16486 00007193 E8A5AAFFFF              		call realloc
 16487 00007198 58                      		pop eax
 16488 00007199 EB0D                    		jmp find_file_ext_90
 16489                                  
 16490                                  find_file_ext_60:
 16491                                  		; did we get everything...?
 16492 0000719B 29CF                    		sub edi,ecx
 16493 0000719D 39F8                    		cmp eax,edi
 16494 0000719F 7407                    		jz find_file_ext_90
 16495                                  
 16496                                  find_file_ext_70:
 16497                                  		; ... no -> read error
 16498 000071A1 E80AAAFFFF              		call free
 16499                                  
 16500                                  find_file_ext_80:
 16501 000071A6 31C0                    		xor eax,eax
 16502                                  find_file_ext_90:
 16503 000071A8 C3                      		ret
 16504                                  
 16505                                  
 16506                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16507                                  ; Find file from file system, returns size.
 16508                                  ;
 16509                                  ;  eax		file name (lin)
 16510                                  ;
 16511                                  ; return:
 16512                                  ;  eax		file size (-1: not found; -2: exists, but unknown size)
 16513                                  ;
 16514                                  
 16515                                  		bits 32
 16516                                  
 16517                                  file_size_ext:
 16518 000071A9 89C6                    		mov esi,eax
 16519 000071AB E849FEFFFF              		call realpath
 16520 000071B0 A1[B4000000]            		mov eax,[boot.sysconfig]
 16521 000071B5 2680780444              		cmp byte [es:eax+sc.sysconfig_size],sc.size_68
 16522 000071BA 7205                    		jb file_size_ext_20
 16523 000071BC E861FDFFFF              		call systempath
 16524                                  file_size_ext_20:
 16525 000071C1 89F0                    		mov eax,esi
 16526                                  
 16527 000071C3 B204                    		mov dl,t_string
 16528 000071C5 50                      		push eax
 16529 000071C6 E833DEFFFF              		call get_length
 16530 000071CB 91                      		xchg eax,ecx
 16531 000071CC 58                      		pop eax
 16532 000071CD 09C9                    		or ecx,ecx
 16533 000071CF 7431                    		jz file_size_ext_80
 16534 000071D1 83F940                  		cmp ecx,64
 16535 000071D4 732C                    		jae file_size_ext_80
 16536                                  
 16537 000071D6 51                      		push ecx
 16538 000071D7 50                      		push eax
 16539                                  
 16540 000071D8 B000                    		mov al,0
 16541 000071DA E8A2A5FFFF              		call gfx_cb			; get file name buffer address (edx)
 16542 000071DF 89D7                    		mov edi,edx
 16543                                  
 16544 000071E1 5E                      		pop esi
 16545 000071E2 59                      		pop ecx
 16546                                  
 16547 000071E3 08C0                    		or al,al
 16548 000071E5 751B                    		jnz file_size_ext_80
 16549                                  
 16550 000071E7 F326A4                  		es rep movsb
 16551 000071EA B000                    		mov al,0
 16552 000071EC AA                      		stosb
 16553                                  
 16554 000071ED B001                    		mov al,1
 16555 000071EF E88DA5FFFF              		call gfx_cb			; open file (ecx size)
 16556 000071F4 08C0                    		or al,al
 16557 000071F6 750A                    		jnz file_size_ext_80
 16558                                  
 16559 000071F8 89C8                    		mov eax,ecx
 16560 000071FA 83F8FF                  		cmp eax,-1
 16561 000071FD 7506                    		jnz file_size_ext_90
 16562 000071FF 48                      		dec eax
 16563 00007200 EB03                    		jmp file_size_ext_90
 16564                                  
 16565                                  file_size_ext_80:
 16566 00007202 F9                      		stc
 16567 00007203 19C0                    		sbb eax,eax
 16568                                  file_size_ext_90:
 16569 00007205 C3                      		ret
 16570                                  
 16571                                  
 16572                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16573                                  ; Clip image area.
 16574                                  ;
 16575                                  ; [line_x0]		left, incl
 16576                                  ; [line_x1]		right, excl
 16577                                  ; [line_y0]		top, incl
 16578                                  ; [line_y1]		bottom, excl
 16579                                  ;
 16580                                  ; return:
 16581                                  ;  CF			1 = empty area
 16582                                  ;  If CF = 0		Area adjusted to fit within [line_*].
 16583                                  ;  If CF = 1		Undefined values in [line_*].
 16584                                  ;
 16585                                  
 16586                                  		bits 32
 16587                                  
 16588                                  clip_image:
 16589 00007206 0FB715[D8000000]        		movzx edx,word [image_width]
 16590 0000720D A1[8B010000]            		mov eax,[line_x0]
 16591 00007212 8B0D[93010000]          		mov ecx,[line_x1]
 16592                                  
 16593 00007218 E831000000              		call clip_image_10
 16594 0000721D 7248                    		jc clip_image_90
 16595                                  
 16596 0000721F A3[8B010000]            		mov [line_x0],eax
 16597 00007224 890D[93010000]          		mov [line_x1],ecx
 16598                                  
 16599 0000722A 0FB715[DA000000]        		movzx edx,word [image_height]
 16600 00007231 A1[8F010000]            		mov eax,[line_y0]
 16601 00007236 8B0D[97010000]          		mov ecx,[line_y1]
 16602                                  
 16603 0000723C E80D000000              		call clip_image_10
 16604                                  
 16605 00007241 A3[8F010000]            		mov [line_y0],eax
 16606 00007246 890D[97010000]          		mov [line_y1],ecx
 16607                                  
 16608 0000724C EB19                    		jmp clip_image_90
 16609                                  
 16610                                  clip_image_10:
 16611 0000724E 83F800                  		cmp eax,0
 16612 00007251 7D02                    		jge clip_image_20
 16613 00007253 31C0                    		xor eax,eax
 16614                                  clip_image_20:
 16615 00007255 39D1                    		cmp ecx,edx
 16616 00007257 7E02                    		jle clip_image_30
 16617 00007259 89D1                    		mov ecx,edx
 16618                                  clip_image_30:
 16619 0000725B 39C1                    		cmp ecx,eax
 16620 0000725D 7E07                    		jle clip_image_80
 16621 0000725F 39D0                    		cmp eax,edx
 16622 00007261 7D03                    		jge clip_image_80
 16623 00007263 F8                      		clc
 16624 00007264 EB01                    		jmp clip_image_90
 16625                                  clip_image_80:
 16626 00007266 F9                      		stc
 16627                                  clip_image_90:
 16628 00007267 C3                      		ret
 16629                                  
 16630                                  
 16631                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16632                                  ; Draw image into buffer.
 16633                                  ;
 16634                                  ; eax			drawing buffer
 16635                                  ; [image]		image
 16636                                  ; dword [line_x0]	x0	; upper left
 16637                                  ; dword [line_y0]	y0
 16638                                  ; dword [line_x1]	x1	; lower right
 16639                                  ; dword [line_y1]	y1
 16640                                  ;
 16641                                  
 16642                                  		bits 32
 16643                                  
 16644                                  unpack_image:
 16645 00007268 803D[DC000000]01        		cmp byte [image_type],1
 16646 0000726F 7507                    		jnz unpack_image_20
 16647 00007271 E845020000              		call pcx_unpack
 16648 00007276 EB0E                    		jmp unpack_image_90
 16649                                  unpack_image_20:
 16650 00007278 803D[DC000000]02        		cmp byte [image_type],2
 16651 0000727F 7505                    		jnz unpack_image_90
 16652 00007281 E8A0030000              		call jpg_unpack
 16653                                  unpack_image_90:
 16654 00007286 C3                      		ret
 16655                                  
 16656                                  
 16657                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16658                                  ; Activate image from file.
 16659                                  ;
 16660                                  ;  eax		lin ptr to image
 16661                                  ;
 16662                                  ; return:
 16663                                  ;  CF		error
 16664                                  ;
 16665                                  
 16666                                  		bits 32
 16667                                  
 16668                                  image_init:
 16669 00007287 E822010000              		call pcx_init
 16670 0000728C 7305                    		jnc image_init_90
 16671 0000728E E821030000              		call jpg_init
 16672                                  image_init_90:
 16673 00007293 C3                      		ret
 16674                                  
 16675                                  
 16676                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16677                                  ; Draw image region on screen.
 16678                                  ;
 16679                                  ; [image]		jpg image
 16680                                  ; dword [line_x0]	x0	; uppper left
 16681                                  ; dword [line_y0]	y0
 16682                                  ; dword [line_x1]	x1	; lower right
 16683                                  ; dword [line_y1]	y1
 16684                                  ;
 16685                                  
 16686                                  		bits 32
 16687                                  
 16688                                  show_image:
 16689 00007294 31F6                    		xor esi,esi
 16690 00007296 31C0                    		xor eax,eax
 16691                                  show_image_10:
 16692 00007298 56                      		push esi
 16693 00007299 50                      		push eax
 16694 0000729A E867ABFFFF              		call memsize
 16695 0000729F 58                      		pop eax
 16696 000072A0 5E                      		pop esi
 16697 000072A1 39F7                    		cmp edi,esi
 16698 000072A3 7202                    		jb show_image_20
 16699 000072A5 89FE                    		mov esi,edi
 16700                                  show_image_20:
 16701 000072A7 40                      		inc eax
 16702 000072A8 83F805                  		cmp eax,malloc.areas
 16703 000072AB 72EB                    		jb show_image_10
 16704                                  
 16705                                  		; esi: largest free mem block
 16706                                  
 16707 000072AD 83EE04                  		sub esi,4		; fb header size
 16708 000072B0 0F82F7000000            		jc show_image_90
 16709                                  
 16710 000072B6 8B1D[97010000]          		mov ebx,[line_y1]
 16711 000072BC 2B1D[8F010000]          		sub ebx,[line_y0]
 16712                                  
 16713 000072C2 8B0D[93010000]          		mov ecx,[line_x1]
 16714 000072C8 2B0D[8B010000]          		sub ecx,[line_x0]
 16715                                  
 16716 000072CE A1[6B010000]            		mov eax,[pixel_bytes]
 16717 000072D3 F7E1                    		mul ecx
 16718 000072D5 96                      		xchg eax,esi
 16719 000072D6 F7F6                    		div esi
 16720                                  
 16721                                  		; fb height
 16722                                  
 16723 000072D8 39D8                    		cmp eax,ebx
 16724 000072DA 7602                    		jbe show_image_30
 16725 000072DC 89D8                    		mov eax,ebx
 16726                                  show_image_30:
 16727 000072DE A3[9B010000]            		mov [line_tmp],eax
 16728                                  
 16729 000072E3 09C0                    		or eax,eax
 16730 000072E5 0F84C2000000            		jz show_image_90
 16731                                  
 16732                                  		; eax, ecx, height, width
 16733 000072EB E8E7CDFFFF              		call alloc_fb
 16734                                  
 16735 000072F0 09C0                    		or eax,eax
 16736 000072F2 0F84B5000000            		jz show_image_90
 16737                                  
 16738 000072F8 A3[9F010000]            		mov [line_tmp2],eax
 16739                                  
 16740                                  show_image_40:
 16741 000072FD A1[97010000]            		mov eax,[line_y1]
 16742 00007302 2B05[8F010000]          		sub eax,[line_y0]
 16743 00007308 0F8E95000000            		jle show_image_70
 16744 0000730E 8B2D[9B010000]          		mov ebp,[line_tmp]
 16745 00007314 39E8                    		cmp eax,ebp
 16746 00007316 7E02                    		jle show_image_50
 16747 00007318 89E8                    		mov eax,ebp
 16748                                  show_image_50:
 16749 0000731A 6689C5                  		mov bp,ax
 16750 0000731D 0305[8F010000]          		add eax,[line_y0]
 16751 00007323 8705[97010000]          		xchg eax,[line_y1]
 16752                                  
 16753 00007329 50                      		push eax
 16754 0000732A A1[9F010000]            		mov eax,[line_tmp2]
 16755                                  
 16756 0000732F 55                      		push ebp
 16757                                  
 16758 00007330 803D[DC000000]01        		cmp byte [image_type],1
 16759 00007337 7507                    		jnz show_image_54
 16760 00007339 E87D010000              		call pcx_unpack
 16761 0000733E EB0E                    		jmp show_image_56
 16762                                  show_image_54:
 16763 00007340 803D[DC000000]02        		cmp byte [image_type],2
 16764 00007347 7505                    		jnz show_image_56
 16765 00007349 E8D8020000              		call jpg_unpack
 16766                                  show_image_56:
 16767                                  
 16768 0000734E 5D                      		pop ebp
 16769                                  
 16770 0000734F 8B3D[9F010000]          		mov edi,[line_tmp2]
 16771 00007355 26668B17                		mov dx,[es:edi]
 16772 00007359 26668B4F02              		mov cx,[es:edi+2]
 16773                                  
 16774 0000735E 6639E9                  		cmp cx,bp
 16775 00007361 7603                    		jbe show_image_60
 16776 00007363 6689E9                  		mov cx,bp
 16777                                  show_image_60:
 16778                                  
 16779 00007366 8B3D[9F010000]          		mov edi,[line_tmp2]
 16780 0000736C 83C704                  		add edi,4
 16781 0000736F 6689D3                  		mov bx,dx
 16782 00007372 660FAF1D[6B010000]      		imul bx,[pixel_bytes]
 16783 0000737A E8FAF4FFFF              		call restore_bg
 16784                                  
 16785 0000737F A1[97010000]            		mov eax,[line_y1]
 16786 00007384 89C1                    		mov ecx,eax
 16787 00007386 2B0D[8F010000]          		sub ecx,[line_y0]
 16788 0000738C A3[8F010000]            		mov [line_y0],eax
 16789                                  
 16790 00007391 66010D[77010000]        		add [gfx_cur_y],cx
 16791                                  
 16792 00007398 58                      		pop eax
 16793                                  
 16794 00007399 A3[97010000]            		mov [line_y1],eax
 16795 0000739E E95AFFFFFF              		jmp show_image_40
 16796                                  
 16797                                  show_image_70:
 16798 000073A3 A1[9F010000]            		mov eax,[line_tmp2]
 16799 000073A8 E803A8FFFF              		call free
 16800                                  show_image_90:
 16801 000073AD C3                      		ret
 16802                                  
 16803                                  
 16804                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16805                                  ; Activate pcx image from file.
 16806                                  ;
 16807                                  ;  eax		pcx image
 16808                                  ;
 16809                                  ; return:
 16810                                  ;  eax		pcx image
 16811                                  ;  CF		error
 16812                                  ;
 16813                                  
 16814                                  		bits 32
 16815                                  
 16816                                  pcx_init:
 16817 000073AE 50                      		push eax
 16818 000073AF 2681380A050108          		cmp dword [es:eax],0801050ah
 16819 000073B6 0F8598000000            		jnz pcx_init_80
 16820                                  
 16821 000073BC 26668B4808              		mov cx,[es:eax+8]
 16822 000073C1 6641                    		inc cx
 16823 000073C3 0F848B000000            		jz pcx_init_80
 16824 000073C9 26668B500A              		mov dx,[es:eax+10]
 16825 000073CE 6642                    		inc dx
 16826 000073D0 0F847E000000            		jz pcx_init_80
 16827                                  
 16828 000073D6 50                      		push eax
 16829 000073D7 51                      		push ecx
 16830 000073D8 52                      		push edx
 16831 000073D9 53                      		push ebx
 16832 000073DA E881AAFFFF              		call find_mem_size
 16833 000073DF 5B                      		pop ebx
 16834 000073E0 5A                      		pop edx
 16835 000073E1 59                      		pop ecx
 16836 000073E2 5F                      		pop edi
 16837                                  
 16838                                  		; edi: image, eax: size, cx: width, dx: height
 16839                                  
 16840 000073E3 3D81030000              		cmp eax,381h
 16841 000073E8 726A                    		jb pcx_init_80
 16842                                  
 16843 000073EA 8DB438FFFCFFFF          		lea esi,[eax+edi-301h]
 16844                                  
 16845 000073F1 26803E0C                		cmp byte [es:esi],12
 16846 000073F5 755D                    		jnz pcx_init_80
 16847                                  
 16848 000073F7 46                      		inc esi
 16849                                  
 16850 000073F8 C605[DC000000]01        		mov byte [image_type],1		; pcx
 16851                                  
 16852 000073FF 893D[D4000000]          		mov [image],edi
 16853 00007405 66890D[D8000000]        		mov [image_width],cx
 16854 0000740C 668915[DA000000]        		mov [image_height],dx
 16855                                  
 16856 00007413 56                      		push esi
 16857 00007414 E83E000000              		call parse_pcx_img
 16858 00007419 5E                      		pop esi
 16859                                  
 16860 0000741A 8B3D[5D010000]          		mov edi,[gfx_pal]
 16861                                  
 16862 00007420 B900030000              		mov ecx,300h
 16863 00007425 51                      		push ecx
 16864 00007426 F326A4                  		es rep movsb
 16865 00007429 59                      		pop ecx
 16866                                  
 16867 0000742A 31C0                    		xor eax,eax
 16868 0000742C 89CA                    		mov edx,ecx
 16869 0000742E 4F                      		dec edi
 16870 0000742F FD                      		std
 16871 00007430 F3AE                    		repz scasb
 16872 00007432 FC                      		cld
 16873 00007433 0F95C0                  		setnz al
 16874 00007436 29CA                    		sub edx,ecx
 16875 00007438 29C2                    		sub edx,eax
 16876 0000743A 92                      		xchg eax,edx
 16877 0000743B 31D2                    		xor edx,edx
 16878 0000743D B903000000              		mov ecx,3
 16879 00007442 F7F1                    		div ecx
 16880 00007444 2D00010000              		sub eax,100h
 16881 00007449 F7D8                    		neg eax
 16882 0000744B 66A3[65010000]          		mov [pals],ax
 16883                                  
 16884 00007451 F8                      		clc
 16885 00007452 EB01                    		jmp pcx_init_90
 16886                                  		
 16887                                  pcx_init_80:
 16888 00007454 F9                      		stc
 16889                                  pcx_init_90:
 16890 00007455 58                      		pop eax
 16891 00007456 C3                      		ret
 16892                                  
 16893                                  
 16894                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16895                                  ;
 16896                                  
 16897                                  		bits 32
 16898                                  
 16899                                  parse_pcx_img:
 16900 00007457 A1[DD000000]            		mov eax,[pcx_line_starts]
 16901 0000745C 09C0                    		or eax,eax
 16902 0000745E 7405                    		jz parse_pcx_img_10
 16903 00007460 E84BA7FFFF              		call free
 16904                                  parse_pcx_img_10:
 16905 00007465 0FB705[DA000000]        		movzx eax,word [image_height]
 16906 0000746C C1E002                  		shl eax,2
 16907 0000746F E87AA6FFFF              		call calloc
 16908 00007474 09C0                    		or eax,eax
 16909 00007476 F9                      		stc
 16910 00007477 A3[DD000000]            		mov [pcx_line_starts],eax
 16911 0000747C 743C                    		jz parse_pcx_img_90
 16912                                  
 16913 0000747E 89C7                    		mov edi,eax
 16914 00007480 8B35[D4000000]          		mov esi,[image]
 16915 00007486 81C680000000            		add esi,80h		; skip pcx header
 16916                                  
 16917 0000748C 31D2                    		xor edx,edx		; y count
 16918                                  
 16919                                  parse_pcx_img_20:
 16920 0000748E 31C9                    		xor ecx,ecx		; x count
 16921 00007490 268937                  		mov [es:edi],esi
 16922 00007493 83C704                  		add edi,4
 16923                                  parse_pcx_img_30:
 16924 00007496 26AC                    		es lodsb
 16925 00007498 3CC0                    		cmp al,0c0h
 16926 0000749A 7207                    		jb parse_pcx_img_40
 16927 0000749C 83E03F                  		and eax,3fh
 16928 0000749F 46                      		inc esi
 16929 000074A0 01C1                    		add ecx,eax
 16930 000074A2 49                      		dec ecx
 16931                                  parse_pcx_img_40:
 16932 000074A3 41                      		inc ecx
 16933 000074A4 663B0D[D8000000]        		cmp cx,[image_width]
 16934 000074AB 72E9                    		jb parse_pcx_img_30
 16935 000074AD F9                      		stc
 16936 000074AE 750A                    		jnz parse_pcx_img_90		; no decoding break at line end?
 16937                                  
 16938 000074B0 42                      		inc edx
 16939 000074B1 663B15[DA000000]        		cmp dx,[image_height]
 16940 000074B8 72D4                    		jb parse_pcx_img_20
 16941                                  
 16942                                  parse_pcx_img_90:
 16943 000074BA C3                      		ret
 16944                                  
 16945                                  
 16946                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 16947                                  ; Draw pcx image region into buffer.
 16948                                  ;
 16949                                  ; eax			drawing buffer
 16950                                  ; [image]		pcx image
 16951                                  ; dword [line_x0]	x0	; uppper left
 16952                                  ; dword [line_y0]	y0
 16953                                  ; dword [line_x1]	x1	; lower right
 16954                                  ; dword [line_y1]	y1
 16955                                  ;
 16956                                  ; note:
 16957                                  ;  [line_*] are unchanged
 16958                                  ;
 16959                                  
 16960                                  		bits 32
 16961                                  
 16962                                  pcx_unpack:
 16963 000074BB FF35[93010000]          		push dword [line_x1]
 16964 000074C1 FF35[97010000]          		push dword [line_y1]
 16965                                  
 16966 000074C7 8B2D[DD000000]          		mov ebp,[pcx_line_starts]
 16967                                  
 16968 000074CD 8D7804                  		lea edi,[eax+4]
 16969                                  
 16970 000074D0 A1[8B010000]            		mov eax,[line_x0]
 16971 000074D5 2905[93010000]          		sub [line_x1],eax
 16972                                  
 16973 000074DB A1[8F010000]            		mov eax,[line_y0]
 16974 000074E0 2905[97010000]          		sub [line_y1],eax
 16975                                  
 16976 000074E6 C1E002                  		shl eax,2
 16977 000074E9 01C5                    		add ebp,eax
 16978                                  
 16979                                  pcx_unpack_20:
 16980 000074EB 268B7500                		mov esi,[es:ebp]
 16981                                  
 16982 000074EF 8B0D[8B010000]          		mov ecx,[line_x0]
 16983 000074F5 F7D9                    		neg ecx
 16984                                  
 16985                                  		; draw one line
 16986                                  pcx_unpack_30:
 16987 000074F7 31C0                    		xor eax,eax
 16988 000074F9 26AC                    		es lodsb
 16989                                  
 16990 000074FB 3CC0                    		cmp al,0c0h
 16991 000074FD 7248                    		jb pcx_unpack_70
 16992                                  
 16993                                  		; repeat count
 16994                                  
 16995 000074FF 83E03F                  		and eax,3fh
 16996 00007502 89C2                    		mov edx,eax
 16997 00007504 26AC                    		es lodsb
 16998                                  
 16999 00007506 01D1                    		add ecx,edx
 17000 00007508 7862                    		js pcx_unpack_80
 17001 0000750A 7302                    		jnc pcx_unpack_40
 17002 0000750C 89CA                    		mov edx,ecx
 17003                                  
 17004                                  pcx_unpack_40:
 17005 0000750E 89CB                    		mov ebx,ecx
 17006 00007510 2B1D[93010000]          		sub ebx,[line_x1]
 17007 00007516 7E02                    		jle pcx_unpack_50
 17008 00007518 29DA                    		sub edx,ebx
 17009                                  pcx_unpack_50:
 17010 0000751A 09D2                    		or edx,edx
 17011 0000751C 744E                    		jz pcx_unpack_80
 17012 0000751E 4A                      		dec edx
 17013 0000751F 803D[6B010000]01        		cmp byte [pixel_bytes],1
 17014 00007526 7614                    		jbe pcx_unpack_54
 17015 00007528 50                      		push eax
 17016 00007529 E8D4E4FFFF              		call pal_to_color
 17017 0000752E E879E4FFFF              		call encode_color
 17018 00007533 FF15[F5000000]          		call [setpixel_a]
 17019 00007539 58                      		pop eax
 17020 0000753A EB03                    		jmp pcx_unpack_55
 17021                                  pcx_unpack_54:
 17022 0000753C 658807                  		mov [gs:edi],al
 17023                                  pcx_unpack_55:
 17024 0000753F 033D[6B010000]          		add edi,[pixel_bytes]
 17025 00007545 EBD3                    		jmp pcx_unpack_50
 17026                                  
 17027                                  pcx_unpack_70:
 17028 00007547 41                      		inc ecx
 17029 00007548 83F900                  		cmp ecx,0
 17030 0000754B 7E1F                    		jle pcx_unpack_80
 17031 0000754D 803D[6B010000]01        		cmp byte [pixel_bytes],1
 17032 00007554 760A                    		jbe pcx_unpack_74
 17033 00007556 E8A7E4FFFF              		call pal_to_color
 17034 0000755B E84CE4FFFF              		call encode_color
 17035                                  pcx_unpack_74:
 17036 00007560 FF15[F5000000]          		call [setpixel_a]
 17037 00007566 033D[6B010000]          		add edi,[pixel_bytes]
 17038                                  pcx_unpack_80:
 17039 0000756C 3B0D[93010000]          		cmp ecx,[line_x1]
 17040 00007572 7C83                    		jl pcx_unpack_30
 17041                                  
 17042 00007574 83C504                  		add ebp,4
 17043 00007577 FF0D[97010000]          		dec dword [line_y1]
 17044 0000757D 0F8568FFFFFF            		jnz pcx_unpack_20
 17045                                  
 17046                                  pcx_unpack_90:
 17047 00007583 8F05[97010000]          		pop dword [line_y1]
 17048 00007589 8F05[93010000]          		pop dword [line_x1]
 17049 0000758F C3                      		ret
 17050                                  
 17051                                  
 17052                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17053                                  ; Allocate static buffer for jpeg decoder.
 17054                                  ;
 17055                                  ; return:
 17056                                  ;  [jpg_static_buf]	buffer
 17057                                  ;
 17058                                  		bits 32
 17059                                  
 17060                                  jpg_setup:
 17061 00007590 833D[E1000000]00        		cmp dword [jpg_static_buf], 0
 17062 00007597 751A                    		jnz jpg_setup_90
 17063                                  
 17064 00007599 B81F2B0000              		mov eax,jpg_data_size + 15
 17065 0000759E E84BA5FFFF              		call calloc
 17066 000075A3 09C0                    		or eax,eax
 17067 000075A5 F9                      		stc
 17068 000075A6 740B                    		jz jpg_setup_90
 17069                                  
 17070                                  		; align a bit
 17071 000075A8 83C00F                  		add eax,15
 17072 000075AB 83E0F0                  		and eax,~15
 17073                                  
 17074 000075AE A3[E1000000]            		mov [jpg_static_buf],eax
 17075                                  jpg_setup_90:
 17076 000075B3 C3                      		ret
 17077                                  
 17078                                  
 17079                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17080                                  ; Activate jpeg image from file.
 17081                                  ;
 17082                                  ;  eax		jpeg image
 17083                                  ;
 17084                                  ; return:
 17085                                  ;  eax		jpeg image
 17086                                  ;  CF		error
 17087                                  ;
 17088                                  
 17089                                  		bits 32
 17090                                  
 17091                                  jpg_init:
 17092 000075B4 50                      		push eax
 17093                                  
 17094 000075B5 50                      		push eax
 17095 000075B6 E8D5FFFFFF              		call jpg_setup
 17096 000075BB 58                      		pop eax
 17097                                  
 17098 000075BC 833D[E1000000]00        		cmp dword [jpg_static_buf],0
 17099 000075C3 743D                    		jz jpg_init_80
 17100                                  
 17101 000075C5 50                      		push eax
 17102 000075C6 E895A8FFFF              		call find_mem_size
 17103 000075CB 89C1                    		mov ecx,eax
 17104 000075CD 58                      		pop eax
 17105                                  
 17106 000075CE 09C9                    		or ecx,ecx
 17107 000075D0 7430                    		jz jpg_init_80
 17108                                  
 17109 000075D2 268138FFD8FFE0          		cmp dword [es:eax],0e0ffd8ffh
 17110 000075D9 7527                    		jnz jpg_init_80
 17111                                  
 17112 000075DB E825000000              		call jpg_size
 17113 000075E0 7221                    		jc jpg_init_90
 17114                                  
 17115 000075E2 66A3[D8000000]          		mov [image_width],ax
 17116 000075E8 C1E810                  		shr eax,16
 17117 000075EB 66A3[DA000000]          		mov [image_height],ax
 17118                                  
 17119 000075F1 C605[DC000000]02        		mov byte [image_type],2		; jpg
 17120                                  
 17121 000075F8 58                      		pop eax
 17122 000075F9 50                      		push eax
 17123 000075FA A3[D4000000]            		mov [image],eax
 17124                                  
 17125 000075FF F8                      		clc
 17126 00007600 EB01                    		jmp jpg_init_90
 17127                                  		
 17128                                  jpg_init_80:
 17129 00007602 F9                      		stc
 17130                                  jpg_init_90:
 17131 00007603 58                      		pop eax
 17132 00007604 C3                      		ret
 17133                                  
 17134                                  
 17135                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17136                                  ; Read jpeg image size.
 17137                                  ;
 17138                                  ; eax		jpeg image
 17139                                  ;
 17140                                  ; return:
 17141                                  ;  eax		size (low word: width, high word: height)
 17142                                  ;  CF		error
 17143                                  ;
 17144                                  
 17145                                  		bits 32
 17146                                  
 17147                                  jpg_size:
 17148 00007605 0FA0                    		push fs
 17149 00007607 50                      		push eax
 17150                                  
 17151 00007608 66BE3000                		mov si,pm_seg.data_d16
 17152 0000760C A1[E1000000]            		mov eax,[jpg_static_buf]
 17153 00007611 E84F040000              		call set_gdt_base_pm
 17154 00007616 8EE6                    		mov fs,si
 17155                                  
 17156 00007618 E8(00000000)            		call dword jpeg_get_size
 17157                                  
 17158 0000761D 59                      		pop ecx
 17159                                  
 17160 0000761E 09C0                    		or eax,eax
 17161 00007620 7501                    		jnz jpg_size_90
 17162 00007622 F9                      		stc
 17163                                  jpg_size_90:
 17164 00007623 0FA1                    		pop fs
 17165 00007625 C3                      		ret
 17166                                  
 17167                                  
 17168                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17169                                  ; Unpack image region from jpeg.
 17170                                  ;
 17171                                  ; eax			drawing buffer
 17172                                  ; [image]		jpeg image
 17173                                  ; dword [line_x0]	x0
 17174                                  ; dword [line_y0]	y0
 17175                                  ; dword [line_x1]	x1
 17176                                  ; dword [line_y1]	y1
 17177                                  ;
 17178                                  ; note:
 17179                                  ;  [line_*] are unchanged
 17180                                  ;
 17181                                  
 17182                                  		bits 32
 17183                                  
 17184                                  jpg_unpack:
 17185 00007626 0FA0                    		push fs
 17186                                  
 17187 00007628 0FB615[69010000]        		movzx edx,byte [pixel_bits]
 17188 0000762F 80FA10                  		cmp dl,16
 17189 00007632 7405                    		jz jpg_unpack_10
 17190 00007634 80FA20                  		cmp dl,32
 17191 00007637 753B                    		jnz jpg_unpack_90
 17192                                  
 17193                                  jpg_unpack_10:
 17194                                  
 17195 00007639 52                      		push dword edx
 17196 0000763A FF35[97010000]          		push dword [line_y1]
 17197 00007640 FF35[8F010000]          		push dword [line_y0]
 17198 00007646 FF35[93010000]          		push dword [line_x1]
 17199 0000764C FF35[8B010000]          		push dword [line_x0]
 17200 00007652 83C004                  		add eax,4
 17201 00007655 50                      		push eax
 17202 00007656 FF35[D4000000]          		push dword [image]
 17203                                  
 17204 0000765C 66BE3000                		mov si,pm_seg.data_d16
 17205 00007660 A1[E1000000]            		mov eax,[jpg_static_buf]
 17206 00007665 E8FB030000              		call set_gdt_base_pm
 17207 0000766A 8EE6                    		mov fs,si
 17208                                  
 17209 0000766C E8(00000000)            		call dword jpeg_decode
 17210                                  
 17211 00007671 83C41C                  		add esp,28
 17212                                  
 17213                                  jpg_unpack_90:
 17214 00007674 0FA1                    		pop fs
 17215 00007676 C3                      		ret
 17216                                  
 17217                                  
 17218                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17219                                  ; Install mouse handler.
 17220                                  ;
 17221                                  ; Note: experimental.
 17222                                  ;
 17223                                  
 17224                                  		bits 16
 17225                                  
 17226                                  mouse_init:
 17227 00007677 0E                      		push cs
 17228 00007678 07                      		pop es
 17229 00007679 BB[9576]                		mov bx,mouse_handler
 17230 0000767C B807C2                  		mov ax,0c207h
 17231 0000767F CD15                    		int 15h
 17232 00007681 720B                    		jc mouse_init_90
 17233 00007683 B800C2                  		mov ax,0c200h
 17234 00007686 B701                    		mov bh,1
 17235 00007688 CD15                    		int 15h
 17236 0000768A 7202                    		jc mouse_init_90
 17237 0000768C 88E0                    		mov al,ah
 17238                                  mouse_init_90:
 17239 0000768E C3                      		ret
 17240                                  
 17241                                  
 17242 0000768F 0000                    mouse_x		dw 0
 17243 00007691 0000                    mouse_y		dw 0
 17244 00007693 0000                    mouse_button	dw 0
 17245                                  
 17246                                  mouse_handler:
 17247 00007695 670FBE442406            		movsx ax,byte [esp+6]
 17248 0000769B 2E0106[9176]            		add [cs:mouse_y],ax
 17249 000076A0 670FBE442408            		movsx ax,byte [esp+8]
 17250 000076A6 2E0106[8F76]            		add [cs:mouse_x],ax
 17251 000076AB 678B44240A              		mov ax,[esp+10]
 17252 000076B0 2EA3[9376]              		mov [cs:mouse_button],ax
 17253                                  
 17254 000076B4 CB                      		retf
 17255                                  
 17256                                  
 17257                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17258                                  ; parse edid record
 17259                                  ;
 17260                                  ; es:ecx	edid
 17261                                  ;
 17262                                  
 17263                                  		bits 32
 17264                                  
 17265                                  parse_edid:
 17266 000076B5 66C705[B0090000]00-     		mov word [display_res.cnt],0
 17267 000076BD 00                 
 17268 000076BE C705[F2090000]0000-     		mov dword [display_res_pref],0
 17269 000076C6 0000               
 17270                                  
 17271 000076C8 2683790800              		cmp dword [es:ecx+8],0
 17272 000076CD 0F8407020000            		jz parse_edid_90
 17273                                  
 17274 000076D3 266683791200            		cmp word [es:ecx+18],0
 17275 000076D9 0F84FB010000            		jz parse_edid_90
 17276                                  
 17277 000076DF 260FB64123              		movzx	eax, byte [es:ecx+35]
 17278 000076E4 A83C                    		test	al, 60
 17279 000076E6 741B                    		je	.L5
 17280 000076E8 66C705[B2090000]80-     		mov	word [display_res], 640
 17281 000076F0 02                 
 17282 000076F1 66C705[B4090000]E0-     		mov	word [display_res+2], 480
 17283 000076F9 01                 
 17284 000076FA 66C705[B0090000]01-     		mov	word [display_res.cnt], 1
 17285 00007702 00                 
 17286                                  .L5:
 17287 00007703 A803                    		test	al, 3
 17288 00007705 7424                    		je	.L6
 17289 00007707 66A1[B0090000]          		mov	ax, [display_res.cnt]
 17290 0000770D 0FB7D0                  		movzx	edx, ax
 17291 00007710 40                      		inc	eax
 17292 00007711 66C70495[B2090000]-     		mov	word [display_res+edx*4], 800
 17293 00007719 2003               
 17294 0000771B 66C70495[B4090000]-     		mov	word [display_res+2+edx*4], 600
 17295 00007723 5802               
 17296 00007725 66A3[B0090000]          		mov	[display_res.cnt], ax
 17297                                  .L6:
 17298 0000772B 260FB64124              		movzx	eax, byte [es:ecx+36]
 17299 00007730 A8C0                    		test	al, -64
 17300 00007732 7426                    		je	.L7
 17301 00007734 668B15[B0090000]        		mov	dx, [display_res.cnt]
 17302 0000773B 0FB7DA                  		movzx	ebx, dx
 17303 0000773E 42                      		inc	edx
 17304 0000773F 66C7049D[B2090000]-     		mov	word [display_res+ebx*4], 800
 17305 00007747 2003               
 17306 00007749 66C7049D[B4090000]-     		mov	word [display_res+2+ebx*4], 600
 17307 00007751 5802               
 17308 00007753 668915[B0090000]        		mov	[display_res.cnt], dx
 17309                                  .L7:
 17310 0000775A A80E                    		test	al, 14
 17311 0000775C 7426                    		je	.L8
 17312 0000775E 668B15[B0090000]        		mov	dx, [display_res.cnt]
 17313 00007765 0FB7DA                  		movzx	ebx, dx
 17314 00007768 42                      		inc	edx
 17315 00007769 66C7049D[B2090000]-     		mov	word [display_res+ebx*4], 1024
 17316 00007771 0004               
 17317 00007773 66C7049D[B4090000]-     		mov	word [display_res+2+ebx*4], 768
 17318 0000777B 0003               
 17319 0000777D 668915[B0090000]        		mov	[display_res.cnt], dx
 17320                                  .L8:
 17321 00007784 A801                    		test	al, 1
 17322 00007786 7424                    		je	.L9
 17323 00007788 66A1[B0090000]          		mov	ax, [display_res.cnt]
 17324 0000778E 0FB7D0                  		movzx	edx, ax
 17325 00007791 40                      		inc	eax
 17326 00007792 66C70495[B2090000]-     		mov	word [display_res+edx*4], 1280
 17327 0000779A 0005               
 17328 0000779C 66C70495[B4090000]-     		mov	word [display_res+2+edx*4], 1024
 17329 000077A4 0004               
 17330 000077A6 66A3[B0090000]          		mov	[display_res.cnt], ax
 17331                                  .L9:
 17332 000077AC 31DB                    		xor	ebx, ebx
 17333 000077AE BF05000000              		mov	edi, 5
 17334                                  .L15:
 17335 000077B3 260FB6545927            		movzx	edx, byte [es:ecx+39+ebx*2]
 17336 000077B9 260FB6445926            		movzx	eax, byte [es:ecx+38+ebx*2]
 17337 000077BF C1EA06                  		shr	edx, 6
 17338 000077C2 83C01F                  		add	eax, 31
 17339 000077C5 83FA02                  		cmp	edx, 2
 17340 000077C8 8D34C500000000          		lea	esi, [eax*8]
 17341 000077CF 7413                    		je	.L12
 17342 000077D1 83FA03                  		cmp	edx, 3
 17343 000077D4 741A                    		je	.L13
 17344 000077D6 4A                      		dec	edx
 17345 000077D7 7522                    		jne	.L10
 17346 000077D9 8D0476                  		lea	eax, [esi+esi*2]
 17347 000077DC C1E802                  		shr	eax, 2
 17348 000077DF E9CE000000              		jmp	.L14
 17349                                  .L12:
 17350 000077E4 C1E005                  		sal	eax, 5
 17351 000077E7 31D2                    		xor	edx, edx
 17352 000077E9 F7F7                    		div	edi
 17353 000077EB E9C2000000              		jmp	.L14
 17354                                  .L13:
 17355 000077F0 8D04F6                  		lea	eax, [esi+esi*8]
 17356 000077F3 C1E804                  		shr	eax, 4
 17357 000077F6 E9B7000000              		jmp	.L14
 17358                                  .L10:
 17359 000077FB 43                      		inc	ebx
 17360 000077FC 83FB04                  		cmp	ebx, 4
 17361 000077FF 75B2                    		jne	.L15
 17362 00007801 B836000000              		mov	eax, 54
 17363                                  .L17:
 17364 00007806 260FB65C0102            		movzx	ebx, byte [es:ecx+2+eax]
 17365 0000780C 260FB63C01              		movzx	edi, byte [es:ecx+eax]
 17366 00007811 260FB6740101            		movzx	esi, byte [es:ecx+1+eax]
 17367 00007817 89DA                    		mov	edx, ebx
 17368 00007819 C1E718                  		sal	edi, 24
 17369 0000781C C1E610                  		sal	esi, 16
 17370 0000781F C1E208                  		sal	edx, 8
 17371 00007822 01FE                    		add	esi, edi
 17372 00007824 01D6                    		add	esi, edx
 17373 00007826 260FB6540103            		movzx	edx, byte [es:ecx+3+eax]
 17374 0000782C 01D6                    		add	esi, edx
 17375 0000782E 81FEFF000000            		cmp	esi, 255
 17376 00007834 766E                    		jbe	.L16
 17377 00007836 260FB6540104            		movzx	edx, byte [es:ecx+4+eax]
 17378 0000783C 260FB6740105            		movzx	esi, byte [es:ecx+5+eax]
 17379 00007842 81E2F0000000            		and	edx, 240
 17380 00007848 C1E204                  		sal	edx, 4
 17381 0000784B 01D3                    		add	ebx, edx
 17382 0000784D 260FB6540107            		movzx	edx, byte [es:ecx+7+eax]
 17383 00007853 81E2F0000000            		and	edx, 240
 17384 00007859 C1E204                  		sal	edx, 4
 17385 0000785C 01F2                    		add	edx, esi
 17386 0000785E 747A                    		je	parse_edid_90
 17387 00007860 85DB                    		test	ebx, ebx
 17388 00007862 7476                    		je	parse_edid_90
 17389 00007864 81FAFF0F0000            		cmp	edx, 4095
 17390 0000786A 746E                    		je	parse_edid_90
 17391 0000786C 81FBFF0F0000            		cmp	ebx, 4095
 17392 00007872 7466                    		je	parse_edid_90
 17393 00007874 668B35[B0090000]        		mov	si, [display_res.cnt]
 17394 0000787B 0FB7FE                  		movzx	edi, si
 17395 0000787E 46                      		inc	esi
 17396 0000787F 66891CBD[B2090000]      		mov	[display_res+edi*4], bx
 17397 00007887 668914BD[B4090000]      		mov	[display_res+2+edi*4], dx
 17398 0000788F 66891D[F2090000]        		mov	[display_res_pref], bx
 17399 00007896 668915[F4090000]        		mov	[display_res_pref+2], dx
 17400 0000789D 668935[B0090000]        		mov	[display_res.cnt], si
 17401                                  .L16:
 17402 000078A4 83C012                  		add	eax, 18
 17403 000078A7 83F87E                  		cmp	eax, 126
 17404 000078AA 0F8556FFFFFF            		jne	.L17
 17405 000078B0 EB28                    		jmp	parse_edid_90
 17406                                  .L14:
 17407 000078B2 0FB715[B0090000]        		movzx	edx, word [display_res.cnt]
 17408 000078B9 66890495[B4090000]      		mov	[display_res+2+edx*4], ax
 17409 000078C1 6667A1[B009]            		mov	ax, [word display_res.cnt]
 17410 000078C6 66893495[B2090000]      		mov	[display_res+edx*4], si
 17411 000078CE 40                      		inc	eax
 17412 000078CF 66A3[B0090000]          		mov	[display_res.cnt], ax
 17413 000078D5 E921FFFFFF              		jmp	.L10
 17414                                  
 17415                                  parse_edid_90:
 17416 000078DA C3                      		ret
 17417                                  
 17418                                  
 17419                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17420                                  ; Read EDID record via DDC
 17421                                  ;
 17422                                  
 17423                                  		bits 32
 17424                                  
 17425                                  read_ddc:
 17426                                  		; vbe support check
 17427 000078DB 66833D[EB000000]00      		cmp word [screen_mem],0
 17428 000078E3 0F8488000000            		jz read_ddc_90
 17429                                  
 17430 000078E9 31ED                    		xor ebp,ebp
 17431                                  
 17432                                  read_ddc_20:
 17433 000078EB 8B3D[5C000000]          		mov edi,[vbe_buffer]
 17434                                  
 17435 000078F1 B980000000              		mov ecx,80h
 17436 000078F6 31C0                    		xor eax,eax
 17437 000078F8 57                      		push edi
 17438 000078F9 F3AA                    		rep stosb
 17439 000078FB 5F                      		pop edi
 17440                                  
 17441 000078FC 8B35[9C090000]          		mov esi,[ddc_external]
 17442 00007902 09F6                    		or esi,esi
 17443 00007904 740A                    		jz read_ddc_25
 17444 00007906 B980000000              		mov ecx,80h
 17445 0000790B F326A4                  		es rep movsb
 17446 0000790E EB2C                    		jmp read_ddc_30
 17447                                  
 17448                                  read_ddc_25:
 17449                                  
 17450 00007910 89F8                    		mov eax,edi
 17451 00007912 C1E804                  		shr eax,4
 17452 00007915 66A3[0E0A0000]          		mov [rm_seg.es],ax
 17453 0000791B 83E70F                  		and edi,0fh
 17454                                  
 17455 0000791E 66B8154F                                mov ax,4f15h
 17456 00007922 B301                    		mov bl,1
 17457 00007924 6689E9                  		mov cx,bp
 17458 00007927 6631D2                  		xor dx,dx
 17459 0000792A 55                      		push ebp
 17460 0000792B CD10                    		int 10h
 17461 0000792D 5D                      		pop ebp
 17462 0000792E 6683F84F                		cmp ax,4fh
 17463 00007932 7408                    		jz read_ddc_30
 17464                                  
 17465 00007934 45                      		inc ebp
 17466 00007935 83FD02                  		cmp ebp,2		; some BIOSes don't like more (seen on a Packard Bell EasyNote)
 17467 00007938 72B1                    		jb read_ddc_20
 17468                                  
 17469 0000793A EB35                    		jmp read_ddc_90
 17470                                  
 17471                                  read_ddc_30:
 17472 0000793C 8B0D[5C000000]          		mov ecx,[vbe_buffer]
 17473 00007942 E86EFDFFFF              		call parse_edid
 17474                                  
 17475 00007947 833D[F2090000]00        		cmp dword [display_res_pref],0
 17476 0000794E 7521                    		jnz read_ddc_90
 17477                                  
 17478                                  		; pick the largest res
 17479                                  
 17480 00007950 0FB70D[B0090000]        		movzx ecx,word [display_res.cnt]
 17481 00007957 BE[B2090000]            		mov esi,display_res
 17482 0000795C 09C9                    		or ecx,ecx
 17483 0000795E 7411                    		jz read_ddc_90
 17484 00007960 8B1E                    		mov ebx,[esi]
 17485                                  read_ddc_50:
 17486 00007962 AD                      		lodsd
 17487 00007963 39D8                    		cmp eax,ebx
 17488 00007965 7602                    		jbe read_ddc_60
 17489 00007967 89C3                    		mov ebx,eax
 17490                                  read_ddc_60:
 17491 00007969 E2F7                    		loop read_ddc_50
 17492                                  
 17493 0000796B 891D[F2090000]          		mov [display_res_pref],ebx
 17494                                  
 17495                                  read_ddc_90:
 17496 00007971 C3                      		ret
 17497                                  
 17498                                  
 17499                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17500                                  ; Read vbe card info.
 17501                                  ;
 17502                                  ; al		info type
 17503                                  ;		  0: video mem size in kb
 17504                                  ;		  1: oem string
 17505                                  ;		  2: vendor string
 17506                                  ;		  3: product string
 17507                                  ;		  4: revision string
 17508                                  ;
 17509                                  ; return:
 17510                                  ;  eax		info
 17511                                  ;   dl		info type (enum_type_t)
 17512                                  ;
 17513                                  
 17514                                  		bits 32
 17515                                  
 17516                                  videoinfo:
 17517 00007972 8B3D[5C000000]          		mov edi,[vbe_buffer]
 17518                                  
 17519 00007978 50                      		push eax
 17520 00007979 57                      		push edi
 17521                                  
 17522 0000797A B980000000              		mov ecx,200h/4
 17523 0000797F 31C0                    		xor eax,eax
 17524 00007981 57                      		push edi
 17525 00007982 F3AB                    		rep stosd
 17526 00007984 5F                      		pop edi
 17527 00007985 26C70756424532          		mov dword [es:edi],32454256h	; 'VBE2'
 17528                                  
 17529 0000798C 89F8                    		mov eax,edi
 17530 0000798E C1E804                  		shr eax,4
 17531 00007991 66A3[0E0A0000]          		mov [rm_seg.es],ax
 17532 00007997 83E70F                  		and edi,0fh
 17533                                  
 17534 0000799A 66B8004F                		mov ax,4f00h
 17535 0000799E CD10                    		int 10h
 17536                                  
 17537 000079A0 5F                      		pop edi
 17538 000079A1 31C9                    		xor ecx,ecx
 17539 000079A3 6683F84F                		cmp ax,4fh
 17540 000079A7 58                      		pop eax
 17541 000079A8 0F8584000000            		jnz videoinfo_80
 17542                                  
 17543 000079AE 66833D[EB000000]00      		cmp word [screen_mem],0
 17544 000079B6 750C                    		jnz videoinfo_20
 17545 000079B8 2666FF7712              		push word [es:edi+12h]
 17546 000079BD 668F05[EB000000]        		pop word [screen_mem]
 17547                                  videoinfo_20:
 17548 000079C4 3C00                    		cmp al,0
 17549 000079C6 750E                    		jnz videoinfo_30
 17550 000079C8 0FB705[EB000000]        		movzx eax,word [screen_mem]
 17551 000079CF C1E006                  		shl eax,6
 17552 000079D2 B201                    		mov dl,t_int
 17553 000079D4 EB60                    		jmp videoinfo_90
 17554                                  videoinfo_30:
 17555 000079D6 3C01                    		cmp al,1
 17556 000079D8 7505                    		jnz videoinfo_31
 17557 000079DA 83C706                  		add edi,6
 17558 000079DD EB1D                    		jmp videoinfo_50
 17559                                  videoinfo_31:
 17560 000079DF 3C02                    		cmp al,2
 17561 000079E1 7505                    		jnz videoinfo_32
 17562 000079E3 83C716                  		add edi,16h
 17563 000079E6 EB14                    		jmp videoinfo_50
 17564                                  videoinfo_32:
 17565 000079E8 3C03                    		cmp al,3
 17566 000079EA 7505                    		jnz videoinfo_33
 17567 000079EC 83C71A                  		add edi,1ah
 17568 000079EF EB0B                    		jmp videoinfo_50
 17569                                  videoinfo_33:
 17570 000079F1 3C04                    		cmp al,4
 17571 000079F3 7505                    		jnz videoinfo_34
 17572 000079F5 83C71E                  		add edi,1eh
 17573 000079F8 EB02                    		jmp videoinfo_50
 17574                                  videoinfo_34:
 17575                                  		; add more here...
 17576                                  
 17577 000079FA EB36                    		jmp videoinfo_80
 17578                                  
 17579                                  videoinfo_50:
 17580 000079FC 26833F00                		cmp dword [es:edi],0
 17581 00007A00 7434                    		jz videoinfo_90
 17582 00007A02 260FB737                		movzx esi,word [es:edi]
 17583 00007A06 260FB74F02              		movzx ecx,word [es:edi+2]
 17584 00007A0B C1E104                  		shl ecx,4
 17585 00007A0E 01CE                    		add esi,ecx
 17586 00007A10 B9FF000000              		mov ecx,100h-1
 17587 00007A15 8B3D[64000000]          		mov edi,[vbe_info_buffer]
 17588                                  videoinfo_55:
 17589 00007A1B 26AC                    		es lodsb
 17590 00007A1D AA                      		stosb
 17591 00007A1E 08C0                    		or al,al
 17592 00007A20 7407                    		jz videoinfo_57
 17593 00007A22 49                      		dec ecx
 17594 00007A23 75F6                    		jnz videoinfo_55
 17595 00007A25 26C60700                		mov byte [es:edi],0
 17596                                  videoinfo_57:
 17597 00007A29 A1[64000000]            		mov eax,[vbe_info_buffer]
 17598 00007A2E B204                    		mov dl,t_string
 17599 00007A30 EB04                    		jmp videoinfo_90
 17600                                  
 17601                                  videoinfo_80:
 17602 00007A32 B200                    		mov dl,t_none
 17603 00007A34 31C0                    		xor eax,eax
 17604                                  videoinfo_90:
 17605 00007A36 C3                      		ret
 17606                                  
 17607                                  
 17608                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17609                                  ; Switch to local stack.
 17610                                  ;
 17611                                  ; no regs or flags changed
 17612                                  ;
 17613                                  
 17614                                  		bits 16
 17615                                  
 17616                                  use_local_stack:
 17617                                  		; cmp dword [old_stack.ofs],0
 17618                                  		; jnz $
 17619 00007A37 8F06[7C00]              		pop word [tmp_stack_val]
 17620 00007A3B 668926[7200]            		mov [old_stack.ofs],esp
 17621 00007A40 8C16[7600]              		mov [old_stack.seg],ss
 17622 00007A44 660FB226[6C00]          		lss esp,[local_stack]
 17623 00007A4A FF26[7C00]              		jmp [tmp_stack_val]
 17624                                  
 17625                                  
 17626                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17627                                  ; Switch back to system wide stack.
 17628                                  ;
 17629                                  ; no regs or flags changed
 17630                                  ;
 17631                                  
 17632                                  		bits 16
 17633                                  
 17634                                  use_old_stack:
 17635                                  		; cmp dword [old_stack.ofs],0
 17636                                  		; jz $
 17637 00007A4E 8F06[7C00]              		pop word [tmp_stack_val]
 17638 00007A52 660FB226[7200]          		lss esp,[old_stack]
 17639 00007A58 66C706[7200]000000-     		mov dword [old_stack.ofs],0
 17640 00007A60 00                 
 17641 00007A61 FF26[7C00]              		jmp [tmp_stack_val]
 17642                                  
 17643                                  
 17644                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17645                                  ; Set segment descriptor base in gdt (32 bit code).
 17646                                  ;
 17647                                  ; si		descriptor
 17648                                  ; eax		base
 17649                                  ;
 17650                                  ; changes no regs
 17651                                  ;
 17652                                  
 17653                                  		bits 32
 17654                                  
 17655                                  set_gdt_base_pm:
 17656 00007A65 50                      		push eax
 17657 00007A66 66678984[1A0A]          		mov [gdt+si+2],ax
 17658 00007A6C C1E810                  		shr eax,16
 17659 00007A6F 678884[1C0A]            		mov [gdt+si+4],al
 17660 00007A74 6788A4[1F0A]            		mov [gdt+si+7],ah
 17661 00007A79 58                      		pop eax
 17662 00007A7A C3                      		ret
 17663                                  
 17664                                  
 17665                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17666                                  ; Set segment descriptor base in gdt.
 17667                                  ;
 17668                                  ; si		descriptor
 17669                                  ; eax		base
 17670                                  ;
 17671                                  ; changes no regs
 17672                                  ;
 17673                                  
 17674                                  		bits 16
 17675                                  
 17676                                  set_gdt_base:
 17677 00007A7B 6650                    		push eax
 17678 00007A7D 8984[1A0A]              		mov [gdt+si+2],ax
 17679 00007A81 66C1E810                		shr eax,16
 17680 00007A85 8884[1C0A]              		mov [gdt+si+4],al
 17681 00007A89 88A4[1F0A]              		mov [gdt+si+7],ah
 17682 00007A8D 6658                    		pop eax
 17683 00007A8F C3                      		ret
 17684                                  
 17685                                  
 17686                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17687                                  ; Set segment descriptor limit in gdt.
 17688                                  ;
 17689                                  ; si		descriptor
 17690                                  ; eax		limit (largest address)
 17691                                  ;
 17692                                  ; changes no regs
 17693                                  ;
 17694                                  
 17695                                  		bits 16
 17696                                  
 17697                                  set_gdt_limit:
 17698 00007A90 6650                    		push eax
 17699 00007A92 52                      		push dx
 17700 00007A93 B200                    		mov dl,0
 17701 00007A95 663DFFFF0F00            		cmp eax,0fffffh
 17702 00007A9B 7606                    		jbe set_gdt_limit_40
 17703 00007A9D 66C1E80C                		shr eax,12
 17704 00007AA1 B280                    		mov dl,80h	; big segment
 17705                                  set_gdt_limit_40:
 17706 00007AA3 8984[180A]              		mov [gdt+si],ax
 17707 00007AA7 66C1E810                		shr eax,16
 17708 00007AAB 8AA4[1E0A]              		mov ah,[gdt+si+6]
 17709 00007AAF 80E470                  		and ah,70h
 17710 00007AB2 08C4                    		or ah,al
 17711 00007AB4 08D4                    		or ah,dl
 17712 00007AB6 88A4[1E0A]              		mov [gdt+si+6],ah
 17713 00007ABA 5A                      		pop dx
 17714 00007ABB 6658                    		pop eax
 17715 00007ABD C3                      		ret
 17716                                  
 17717                                  
 17718                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17719                                  ; Preliminary protected mode interface init.
 17720                                  ;
 17721                                  ; Setup gdt so we can at least switch modes with interrupts disabled.
 17722                                  ;
 17723                                  
 17724                                  		bits 16
 17725                                  
 17726                                  gdt_init:
 17727 00007ABE 668CC8                  		mov eax,cs
 17728 00007AC1 A3[9B7C]                		mov [rm_prog_cs],ax
 17729                                  
 17730 00007AC4 66C1E004                		shl eax,4
 17731 00007AC8 66A3[140A]              		mov [prog.base],eax
 17732                                  
 17733 00007ACC 66678D90[180A0000]      		lea edx,[eax+gdt]
 17734 00007AD4 668916[040A]            		mov [pm_gdt.base],edx
 17735                                  
 17736 00007AD9 BE1800                  		mov si,pm_seg.prog_c32
 17737 00007ADC E89CFF                  		call set_gdt_base
 17738                                  
 17739 00007ADF BE2000                  		mov si,pm_seg.prog_d16
 17740 00007AE2 E896FF                  		call set_gdt_base
 17741                                  
 17742 00007AE5 BE2800                  		mov si,pm_seg.prog_c16
 17743 00007AE8 E890FF                  		call set_gdt_base
 17744                                  
 17745                                  		; temporary location, will be moved in pm_init
 17746 00007AEB 66B880050000            		mov eax,580h
 17747 00007AF1 BE4800                  		mov si,pm_seg.tss
 17748 00007AF4 E884FF                  		call set_gdt_base
 17749                                  
 17750 00007AF7 66B8FFFF0000            		mov eax,0ffffh
 17751                                  
 17752 00007AFD BE1800                  		mov si,pm_seg.prog_c32
 17753 00007B00 E88DFF                  		call set_gdt_limit
 17754                                  
 17755 00007B03 BE2000                  		mov si,pm_seg.prog_d16
 17756 00007B06 E887FF                  		call set_gdt_limit
 17757                                  
 17758 00007B09 BE2800                  		mov si,pm_seg.prog_c16
 17759 00007B0C E881FF                  		call set_gdt_limit
 17760                                  
 17761 00007B0F BE3000                  		mov si,pm_seg.data_d16
 17762 00007B12 E87BFF                  		call set_gdt_limit
 17763                                  
 17764 00007B15 BE3800                  		mov si,pm_seg.screen_r16
 17765 00007B18 E875FF                  		call set_gdt_limit
 17766                                  
 17767 00007B1B BE4000                  		mov si,pm_seg.screen_w16
 17768 00007B1E E86FFF                  		call set_gdt_limit
 17769                                  
 17770 00007B21 C3                      		ret
 17771                                  
 17772                                  
 17773                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17774                                  ; Complete protected mode setup.
 17775                                  ;
 17776                                  ; Initialize idt and setup interrupt handlers.
 17777                                  ;
 17778                                  
 17779                                  		bits 32
 17780                                  
 17781                                  pm_init:
 17782 00007B22 B868000000              		mov eax,104	; minimal tss size
 17783 00007B27 E8D69FFFFF              		call xcalloc
 17784 00007B2C 83F801                  		cmp eax,1
 17785 00007B2F 7260                    		jc pm_init_90
 17786 00007B31 66BE4800                		mov si,pm_seg.tss
 17787 00007B35 E82BFFFFFF              		call set_gdt_base_pm
 17788                                  
 17789 00007B3A B800100000              		mov eax,(8+8)*100h
 17790 00007B3F E8BE9FFFFF              		call xcalloc
 17791 00007B44 83F801                  		cmp eax,1
 17792 00007B47 7248                    		jc pm_init_90
 17793 00007B49 A3[F8090000]            		mov [pm_idt.base],eax
 17794                                  
 17795                                  		; setup idt
 17796                                  
 17797 00007B4E 8B35[F8090000]          		mov esi,[pm_idt.base]
 17798 00007B54 8D9E00080000            		lea ebx,[esi+8*100h]
 17799 00007B5A 89DF                    		mov edi,ebx
 17800 00007B5C B81000008E              		mov eax,8e000000h + pm_seg.4gb_c32
 17801                                  
 17802 00007B61 B900010000              		mov ecx,100h
 17803                                  pm_init_20:
 17804 00007B66 26891E                  		mov [es:esi],ebx
 17805 00007B69 26895E04                		mov [es:esi+4],ebx
 17806 00007B6D 26894602                		mov [es:esi+2],eax
 17807 00007B71 83C608                  		add esi,8
 17808 00007B74 83C308                  		add ebx,8
 17809 00007B77 E2ED                    		loop pm_init_20		
 17810                                  
 17811                                  		; push eax, call far pm_seg.prog_c32:pm_int
 17812 00007B79 B8509A927B              		mov eax,9a50h + (((pm_int - _start) & 0xffff) << 16)
 17813 00007B7E BA00001800              		mov edx,(((pm_int - _start) >> 16) & 0xffff) + (pm_seg.prog_c32 << 16)
 17814                                  
 17815 00007B83 B501                    		mov ch,1
 17816                                  pm_init_40:
 17817 00007B85 268907                  		mov [es:edi],eax
 17818 00007B88 26895704                		mov [es:edi+4],edx
 17819 00007B8C 83C708                  		add edi,8
 17820 00007B8F E2F4                    		loop pm_init_40
 17821                                  
 17822                                  pm_init_90:
 17823 00007B91 C3                      		ret
 17824                                  
 17825                                  
 17826                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17827                                  ; Protected mode interrupt handler.
 17828                                  ;
 17829                                  ; switches to real mode and runs the real mode interrupt handler
 17830                                  ;
 17831                                  ; Note: processor generated ints with error code are not properly handled.
 17832                                  ;
 17833                                  
 17834                                  		bits 32
 17835                                  
 17836                                  pm_int:
 17837 00007B92 58                      		pop eax
 17838                                  
 17839 00007B93 1E                      		push ds
 17840 00007B94 06                      		push es
 17841 00007B95 0FA0                    		push fs
 17842 00007B97 0FA8                    		push gs
 17843                                  
 17844 00007B99 53                      		push ebx
 17845 00007B9A 66BB2000                		mov bx,pm_seg.prog_d16
 17846 00007B9E 8EDB                    		mov ds,bx
 17847 00007BA0 66BB0800                		mov bx,pm_seg.4gb_d32
 17848 00007BA4 8EC3                    		mov es,bx
 17849 00007BA6 5B                      		pop ebx
 17850                                  
 17851 00007BA7 669C                    		pushfw
 17852 00007BA9 66FF35[9B7C0000]        		push word [rm_prog_cs]
 17853 00007BB0 6668[CE7B]              		push word pm_int_50
 17854                                  
 17855 00007BB4 2B05[F8090000]          		sub eax,[pm_idt.base]
 17856 00007BBA D1E8                    		shr eax,1
 17857 00007BBC 2D04040000              		sub eax,101h*4
 17858                                  
 17859                                  		; eax = int_nr*4
 17860                                  
 17861 00007BC1 26FF30                  		push dword [es:eax]
 17862                                  
 17863                                  		; get original eax
 17864 00007BC4 8B44241E                		mov eax,[esp+4+3*2+4*4+4]	; seg from far call
 17865                                  
 17866                                  		pm_leave
 17867                              <1> %%j_pm_1:
 17868 00007BC8 E89D000000          <1>  call switch_to_rm
 17869                              <1> %%j_pm_2:
 17870                              <1>  %if %%j_pm_2 - %%j_pm_1 != 5
 17871                              <1>  %error "pm_leave: not in 32 bit mode"
 17872                              <1>  %endif
 17873                              <1> 
 17874                              <1>  bits 16
 17875                                  
 17876                                  		; jmp to int handler & continue at pm_int_50
 17877 00007BCD CB                      		retf
 17878                                  pm_int_50:
 17879                                  
 17880                                  		pm_enter
 17881                              <1> %%j_pm_1:
 17882 00007BCE E81100              <1>  call switch_to_pm
 17883                              <1> %%j_pm_2:
 17884                              <1>  %if %%j_pm_2 - %%j_pm_1 != 3
 17885                              <1>  %error "pm_enter: not in 16 bit mode"
 17886                              <1>  %endif
 17887                              <1> 
 17888                              <1>  bits 32
 17889                                  
 17890 00007BD1 0FA9                    		pop gs
 17891 00007BD3 0FA1                    		pop fs
 17892 00007BD5 07                      		pop es
 17893 00007BD6 1F                      		pop ds
 17894                                  
 17895                                  		; update arithmetic flags
 17896 00007BD7 50                      		push eax
 17897 00007BD8 9F                      		lahf
 17898 00007BD9 88642414                		mov [esp+4*5],ah
 17899 00007BDD 58                      		pop eax
 17900                                  
 17901 00007BDE 83C408                  		add esp,4*2		; skip eax & seg from far call
 17902                                  
 17903 00007BE1 CF                      		iret
 17904                                  
 17905                                  
 17906                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17907                                  ; Switch from real mode to 32 bit protected mode.
 17908                                  ;
 17909                                  ; Assumes cs = .text.
 17910                                  ;
 17911                                  ; No normal regs or flags changed.
 17912                                  ; Segment regs != cs are stored in rm_seg.
 17913                                  ; ds = .text; ss, es, fs, gs = 4GB selector
 17914                                  ;
 17915                                  
 17916                                  		bits 16
 17917                                  
 17918                                  switch_to_pm:
 17919 00007BE2 9C                      		pushf
 17920 00007BE3 6650                    		push eax
 17921                                  
 17922 00007BE5 0F20C0                  		mov eax,cr0
 17923                                  
 17924 00007BE8 A801                    		test al,1
 17925 00007BEA 75FE                    		jnz $			; FIXME - for testing
 17926                                  
 17927 00007BEC FA                      		cli
 17928                                  
 17929 00007BED 2E8C16[080A]            		mov word [cs:rm_seg.ss],ss
 17930                                  
 17931 00007BF2 2E8C1E[0C0A]            		mov word [cs:rm_seg.ds],ds
 17932 00007BF7 2E8C06[0E0A]            		mov word [cs:rm_seg.es],es
 17933 00007BFC 2E8C26[100A]            		mov word [cs:rm_seg.fs],fs
 17934 00007C01 2E8C2E[120A]            		mov word [cs:rm_seg.gs],gs
 17935                                  
 17936 00007C06 0C01                    		or al,1
 17937 00007C08 2E660F0116[020A]        		o32 lgdt [cs:pm_gdt]
 17938 00007C0F 2E660F011E[F609]        		o32 lidt [cs:pm_idt]
 17939 00007C16 0F22C0                  		mov cr0,eax
 17940 00007C19 EA[1E7C]1800            		jmp pm_seg.prog_c32:switch_to_pm_20
 17941                                  switch_to_pm_20:
 17942                                  
 17943                                  		bits 32
 17944                                  
 17945 00007C1E 66B82000                		mov ax,pm_seg.prog_d16
 17946 00007C22 8ED8                    		mov ds,ax
 17947                                  
 17948                                  		; needed for KVM:
 17949                                  		; ss:rpl must equal cs:rpl in PM for VT. We can't rely on ss
 17950                                  		; maintaining its value after the transition.
 17951                                  
 17952 00007C24 0FB705[080A0000]        		movzx eax,word [rm_seg.ss]
 17953 00007C2B 81E4FFFF0000            		and esp,0ffffh
 17954 00007C31 C1E004                  		shl eax,4
 17955 00007C34 01C4                    		add esp,eax
 17956 00007C36 66B80800                		mov ax,pm_seg.4gb_d32
 17957 00007C3A 8ED0                    		mov ss,ax
 17958                                  
 17959 00007C3C 8EC0                    		mov es,ax
 17960 00007C3E 8EE0                    		mov fs,ax
 17961 00007C40 8EE8                    		mov gs,ax
 17962                                  
 17963 00007C42 31C0                    		xor eax,eax
 17964 00007C44 0F00D0                  		lldt ax
 17965                                  
 17966 00007C47 C605[650A0000]89        		mov byte [gdt.tss + 5],89h	; mark task inactive
 17967 00007C4E 66B84800                		mov ax,pm_seg.tss
 17968 00007C52 0F00D8                  		ltr ax
 17969                                  
 17970 00007C55 803D[9A090000]00        		cmp byte [need_sound_update],0
 17971 00007C5C 7407                    		jz switch_to_pm_80
 17972 00007C5E 60                      		pusha
 17973 00007C5F E82DEFFFFF              		call sound_update
 17974 00007C64 61                      		popa
 17975                                  switch_to_pm_80:
 17976 00007C65 58                      		pop eax
 17977 00007C66 669D                    		popfw
 17978 00007C68 66C3                    		o16 ret
 17979                                  
 17980                                  
 17981                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 17982                                  ; Switch from 32 bit protected mode to real mode.
 17983                                  ;
 17984                                  ; Assumes cs = .text
 17985                                  ;
 17986                                  ; No normal regs or flags changed.
 17987                                  ; Segment regs != cs are taken from rm_seg.
 17988                                  ;
 17989                                  
 17990                                  		bits 32
 17991                                  
 17992                                  switch_to_rm:
 17993 00007C6A 669C                    		pushfw
 17994 00007C6C 50                      		push eax
 17995 00007C6D 52                      		push edx
 17996                                  
 17997 00007C6E 0F20C0                  		mov eax,cr0
 17998                                  
 17999 00007C71 A801                    		test al,1
 18000 00007C73 74FE                    		jz $				; FIXME - for testing
 18001                                  
 18002 00007C75 FA                      		cli
 18003                                  
 18004 00007C76 2E0F011D[FC090000]      		o32 lidt [cs:rm_idt]
 18005                                  
 18006 00007C7E 66BA2000                		mov dx,pm_seg.prog_d16
 18007 00007C82 8ED2                    		mov ss,dx
 18008 00007C84 8EDA                    		mov ds,dx
 18009 00007C86 8EC2                    		mov es,dx
 18010 00007C88 8EE2                    		mov fs,dx
 18011 00007C8A 8EEA                    		mov gs,dx
 18012                                  
 18013                                  		; first down to 16 bit...
 18014 00007C8C EA[937C0000]2800        		jmp pm_seg.prog_c16:switch_to_rm_10
 18015                                  switch_to_rm_10:
 18016                                  
 18017                                  		bits 16
 18018                                  
 18019 00007C93 24FE                    		and al,~1
 18020 00007C95 0F22C0                  		mov cr0,eax
 18021                                  
 18022                                  		; ... then reload cs
 18023 00007C98 EA[9D7C]0000            		jmp 0:switch_to_rm_20
 18024                                  rm_prog_cs	equ $-2				; our real mode cs value (patched here)
 18025                                  switch_to_rm_20:
 18026                                  
 18027 00007C9D 2E660FB706[080A]        		movzx eax,word [cs:rm_seg.ss]
 18028 00007CA4 8ED0                    		mov ss,ax
 18029 00007CA6 66C1E004                		shl eax,4
 18030 00007CAA 6629C4                  		sub esp,eax
 18031                                  
 18032 00007CAD 2E8E1E[0C0A]            		mov ds,[cs:rm_seg.ds]
 18033 00007CB2 2E8E06[0E0A]            		mov es,[cs:rm_seg.es]
 18034 00007CB7 2E8E26[100A]            		mov fs,[cs:rm_seg.fs]
 18035 00007CBC 2E8E2E[120A]            		mov gs,[cs:rm_seg.gs]
 18036                                  
 18037 00007CC1 665A                    		pop edx
 18038 00007CC3 6658                    		pop eax
 18039 00007CC5 9D                      		popf
 18040 00007CC6 66C3                    		o32 ret
 18041                                  
 18042                                  
 18043                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 18044                                  
 18045                                  		bits 32
 18046                                  
 18047                                  %include	"kroete.inc"
 18048                              <1> ; must be large enough, else we will get evil memory corruptions
 18049                              <1> kroete.width    equ 520
 18050                              <1> kroete.height   equ 236
 18051                              <1> 
 18052                              <1> ;  esi			kroete data
 18053                              <1> ;  edi			drawing buffer
 18054                              <1> ;  [idle.data2]		direction (0 forward, != 0 backward)
 18055                              <1> 
 18056                              <1> kroete:
 18057 00007CC8 260FB707            <1> 		movzx eax,word [es:edi]		; width
 18058                              <1> 
 18059 00007CCC 8B15[6B010000]      <1> 		mov edx,[pixel_bytes]
 18060 00007CD2 0FAFD0              <1> 		imul edx,eax
 18061 00007CD5 8915[A0090000]      <1> 		mov [tmp_var_0],edx
 18062                              <1> 
 18063 00007CDB 260FB75702          <1> 		movzx edx,word [es:edi+2]	; height
 18064 00007CE0 42                  <1> 		inc edx
 18065 00007CE1 F7E2                <1> 		mul edx
 18066 00007CE3 D1E8                <1> 		shr eax,1
 18067 00007CE5 F725[6B010000]      <1> 		mul dword [pixel_bytes]
 18068 00007CEB 83C704              <1> 		add edi,4
 18069 00007CEE 01C7                <1> 		add edi,eax
 18070                              <1> 
 18071                              <1> 		; edi: start offset into buffer
 18072                              <1> 
 18073 00007CF0 FF15[01010000]      <1> 		call [getpixel]
 18074                              <1> 
 18075 00007CF6 803D[F0010000]00    <1> 		cmp byte [idle.data2],0
 18076 00007CFD 7530                <1> 		jnz sul3
 18077 00007CFF 8DAE00400000        <1> 		lea ebp,[esi+16384]
 18078                              <1> sul:
 18079 00007D05 268A1E              <1> 		mov bl,[es:esi]
 18080 00007D08 C0C302              <1> 		rol bl,2
 18081 00007D0B E857000000          <1> 		call doit
 18082 00007D10 C0C302              <1> 		rol bl,2
 18083 00007D13 E84F000000          <1> 		call doit
 18084 00007D18 C0C302              <1> 		rol bl,2
 18085 00007D1B E847000000          <1> 		call doit
 18086 00007D20 C0C302              <1> 		rol bl,2
 18087 00007D23 E83F000000          <1> 		call doit
 18088 00007D28 46                  <1> 		inc esi
 18089 00007D29 39EE                <1> 		cmp esi,ebp
 18090 00007D2B 75D8                <1> 		jnz sul
 18091 00007D2D EB31                <1> 		jmp sul5
 18092                              <1> 
 18093                              <1> sul3:
 18094 00007D2F 8D6EFF              <1> 		lea ebp,[esi-1]
 18095 00007D32 81C6FF3F0000        <1> 		add esi,16383
 18096                              <1> sul4:
 18097 00007D38 268A1E              <1> 		mov bl,[es:esi]
 18098 00007D3B 80F3AA              <1> 		xor bl,0xaa
 18099 00007D3E E824000000          <1> 		call doit
 18100 00007D43 C0CB02              <1> 		ror bl,2
 18101 00007D46 E81C000000          <1> 		call doit
 18102 00007D4B C0CB02              <1> 		ror bl,2
 18103 00007D4E E814000000          <1> 		call doit
 18104 00007D53 C0CB02              <1> 		ror bl,2
 18105 00007D56 E80C000000          <1> 		call doit
 18106 00007D5B 4E                  <1> 		dec esi
 18107 00007D5C 39EE                <1> 		cmp esi,ebp
 18108 00007D5E 75D8                <1> 		jnz sul4
 18109                              <1> sul5:
 18110 00007D60 FF15[F5000000]      <1> 		call [setpixel_a]
 18111 00007D66 C3                  <1> 		ret
 18112                              <1> 
 18113                              <1> doit:
 18114 00007D67 92                  <1> 		xchg eax,edx
 18115 00007D68 FF15[01010000]      <1> 		call [getpixel]
 18116 00007D6E 92                  <1> 		xchg eax,edx
 18117 00007D6F FF15[F5000000]      <1> 		call [setpixel_a]
 18118 00007D75 92                  <1> 		xchg eax,edx
 18119                              <1> 
 18120 00007D76 89DA                <1> 		mov edx,ebx
 18121 00007D78 83E203              <1> 		and edx,3
 18122 00007D7B FF2495[A07D0000]    <1> 		jmp [doit_tab+4*edx]
 18123                              <1> 
 18124                              <1> doit0:
 18125 00007D82 2B3D[6B010000]      <1> 		sub edi,[pixel_bytes]
 18126 00007D88 C3                  <1> 		ret
 18127                              <1> 
 18128                              <1> doit1:
 18129 00007D89 2B3D[A0090000]      <1> 		sub edi,[tmp_var_0]
 18130 00007D8F C3                  <1> 		ret
 18131                              <1> 
 18132                              <1> doit2:
 18133 00007D90 033D[6B010000]      <1> 		add edi,[pixel_bytes]
 18134 00007D96 C3                  <1> 		ret
 18135                              <1> 
 18136                              <1> doit3:
 18137 00007D97 033D[A0090000]      <1> 		add edi,[tmp_var_0]
 18138 00007D9D C3                  <1> 		ret
 18139                              <1> 
 18140 00007D9E 00<rept>            <1> 		align 4, db 0
 18141 00007DA0 [827D0000]-         <1> doit_tab	dd doit0, doit1, doit2, doit3
 18142 00007DA4 [897D0000]-         <1>
 18143 00007DA8 [907D0000]-         <1>
 18144 00007DAC [977D0000]          <1>
 18145                              <1> 
 18146                                  %include	"modplay.inc"
 18147                              <1> ; MOD player  (c) 2002 mls
 18148                              <1> ;
 18149                              <1> ; generates samples for 11000 HZ
 18150                              <1> ; bpm always 125
 18151                              <1> 
 18152                              <1> 
 18153                              <1> %if 0
 18154                              <1> 		init
 18155                              <1> 		loadmod
 18156                              <1> 		play
 18157                              <1> 		playmod
 18158                              <1> 		playsamp
 18159                              <1> 		setvol
 18160                              <1> 		getvol
 18161                              <1> 		getstate
 18162                              <1> 		stop
 18163                              <1> %endif
 18164                              <1> 
 18165                              <1> 
 18166                              <1> ; pl_loadmod - configure a mod player
 18167                              <1> ;   es:esi	start of player
 18168                              <1> ;   es:edi	start of mod
 18169                              <1> 
 18170                              <1> pl_loadmod:
 18171 00007DB0 57                  <1> 		push edi
 18172 00007DB1 8D7E06              <1> 		lea edi,[esi+pl_state]
 18173 00007DB4 31C0                <1> 		xor eax,eax
 18174 00007DB6 B9E4010000          <1> 		mov ecx,pl_sizeof-pl_state
 18175 00007DBB F3AA                <1> 		rep stosb
 18176 00007DBD 5F                  <1> 		pop edi
 18177                              <1> 
 18178 00007DBE 89F2                <1> 		mov edx,esi
 18179 00007DC0 B904000000          <1> 		mov ecx,4
 18180 00007DC5 56                  <1> 		push esi
 18181 00007DC6 81C6E8000000        <1> 		add esi,pl_channs
 18182                              <1> sm10:
 18183 00007DCC 2689563C            <1> 		mov [es:esi+ch_player],edx
 18184 00007DD0 83C640              <1> 		add esi,ch_sizeof
 18185 00007DD3 E2F7                <1> 		loop sm10
 18186                              <1> 
 18187 00007DD5 5E                  <1> 		pop esi
 18188 00007DD6 BA20000000          <1> 		mov edx,32
 18189 00007DDB 268B8738040000      <1> 		mov eax,[es:edi+0x438]
 18190 00007DE2 3D43484E34          <1> 		cmp eax,'CHN4'
 18191 00007DE7 7417                <1> 		jz sm2
 18192 00007DE9 3D4D2E4B2E          <1> 		cmp eax,'M.K.'
 18193 00007DEE 7410                <1> 		jz sm2
 18194 00007DF0 3D4D264B21          <1> 		cmp eax,'M&K!'
 18195 00007DF5 7409                <1> 		jz sm2
 18196 00007DF7 3D464C5434          <1> 		cmp eax,'FLT4'
 18197 00007DFC 7402                <1> 		jz sm2
 18198 00007DFE B210                <1> 		mov dl,16
 18199                              <1> sm2:
 18200 00007E00 83C72A              <1> 		add edi,20+22
 18201 00007E03 26897E24            <1> 		mov [es:esi+pl_sampinfo],edi
 18202 00007E07 83EF34              <1> 		sub edi,22+30
 18203 00007E0A 6BCA1E              <1> 		imul ecx,edx,30
 18204 00007E0D 01CF                <1> 		add edi,ecx
 18205 00007E0F 268A07              <1> 		mov al,[es:edi]
 18206 00007E12 26884608            <1> 		mov [es:esi+pl_songlen],al
 18207 00007E16 47                  <1> 		inc edi
 18208 00007E17 47                  <1> 		inc edi
 18209 00007E18 26897E1C            <1> 		mov [es:esi+pl_song],edi
 18210 00007E1C 31DB                <1> 		xor ebx,ebx
 18211 00007E1E B980000000          <1> 		mov ecx,128
 18212                              <1> sm5:
 18213 00007E23 268A07              <1> 		mov al,[es:edi]
 18214 00007E26 47                  <1> 		inc edi
 18215 00007E27 38C3                <1> 		cmp bl,al
 18216 00007E29 7D02                <1> 		jge sm4
 18217 00007E2B 88C3                <1> 		mov bl,al
 18218                              <1> sm4:
 18219 00007E2D E2F4                <1> 		loop sm5
 18220 00007E2F FEC3                <1> 		inc bl
 18221 00007E31 80FA20              <1> 		cmp dl,32
 18222 00007E34 7503                <1> 		jnz sm6
 18223 00007E36 83C704              <1> 		add edi,4
 18224                              <1> sm6:
 18225 00007E39 26897E20            <1> 		mov [es:esi+pl_patterns],edi
 18226 00007E3D C1E30A              <1> 		shl ebx,6+4		; *64*16
 18227 00007E40 01FB                <1> 		add ebx,edi
 18228                              <1> 
 18229 00007E42 26C6460A06          <1> 		mov byte [es:esi+pl_speed],6
 18230 00007E47 26C6460C06          <1> 		mov byte [es:esi+pl_effpos],6
 18231 00007E4C 26C686E801000001    <1> 		mov byte [es:esi+pl_loaded],1
 18232 00007E54 268B7E24            <1> 		mov edi,[es:esi+pl_sampinfo]
 18233 00007E58 8D4AFF              <1> 		lea ecx,[edx-1]
 18234                              <1> sm9:
 18235 00007E5B 26895E2C            <1> 		mov [es:esi+pl_sampd+4],ebx	; +4 -> skip first?
 18236 00007E5F 260FB707            <1> 		movzx eax,word [es:edi]
 18237 00007E63 86C4                <1> 		xchg al,ah
 18238 00007E65 01C3                <1> 		add ebx,eax
 18239 00007E67 01C3                <1> 		add ebx,eax
 18240 00007E69 83C604              <1> 		add esi,4
 18241 00007E6C 83C71E              <1> 		add edi,30
 18242 00007E6F E2EA                <1> 		loop sm9
 18243 00007E71 C3                  <1> 		ret
 18244                              <1> 
 18245                              <1> 
 18246                              <1> ; pl_play - play modfile
 18247                              <1> ;   es:esi	start of player
 18248                              <1> ;   es:edi	buffer to add samples
 18249                              <1> 
 18250                              <1> pl_play:
 18251 00007E72 60                  <1> 		pusha
 18252 00007E73 57                  <1> 		push edi
 18253                              <1> 
 18254 00007E74 E843070000          <1> 		call fixvol
 18255                              <1> 
 18256 00007E79 26668B4606          <1> 		mov ax,[es:esi+pl_state]
 18257 00007E7E 6609C0              <1> 		or ax,ax
 18258 00007E81 745E                <1> 		jz p3
 18259 00007E83 6648                <1> 		dec ax
 18260 00007E85 0F854B010000        <1> 		jnz p1
 18261                              <1> 
 18262                              <1> 		; run effects
 18263 00007E8B 56                  <1> 		push esi
 18264 00007E8C 81C6E8000000        <1> 		add esi,pl_channs
 18265 00007E92 B904000000          <1> 		mov ecx,4
 18266                              <1> p31:
 18267 00007E97 26668B463A          <1> 		mov ax,[es:esi+ch_effect]
 18268 00007E9C 6609C0              <1> 		or ax,ax
 18269 00007E9F 740A                <1> 		jz p30
 18270 00007EA1 E87D050000          <1> 		call doeff
 18271 00007EA6 E8DF020000          <1> 		call norm
 18272                              <1> p30:
 18273 00007EAB 83C640              <1> 		add esi,ch_sizeof
 18274 00007EAE E2E7                <1> 		loop p31
 18275 00007EB0 5E                  <1> 		pop esi
 18276                              <1> 
 18277 00007EB1 2666FF460C          <1> 		inc word [es:esi+pl_effpos]
 18278 00007EB6 26668B460C          <1> 		mov ax,[es:esi+pl_effpos]
 18279 00007EBB 26663B460A          <1> 		cmp ax,[es:esi+pl_speed]
 18280 00007EC0 0F8210010000        <1> 		jb p1
 18281                              <1> 
 18282                              <1> 		; advance note
 18283 00007EC6 31C0                <1> 		xor eax,eax
 18284 00007EC8 266689460C          <1> 		mov [es:esi+pl_effpos],ax
 18285 00007ECD 26668B5E0E          <1> 		mov bx,[es:esi+pl_nextsongnum]
 18286 00007ED2 2666895E12          <1> 		mov [es:esi+pl_songnum],bx
 18287 00007ED7 26668B4E08          <1> 		mov cx,[es:esi+pl_songlen]
 18288 00007EDC 6639CB              <1> 		cmp bx,cx
 18289 00007EDF 7208                <1> 		jb p2
 18290                              <1> p3:
 18291 00007EE1 2666894606          <1> 		mov [es:esi+pl_state],ax
 18292 00007EE6 5F                  <1> 		pop edi
 18293 00007EE7 61                  <1> 		popa
 18294 00007EE8 C3                  <1> 		ret
 18295                              <1> 
 18296                              <1> p2:
 18297 00007EE9 26668B5610          <1> 		mov dx,[es:esi+pl_nextnotenum]
 18298 00007EEE 2666895614          <1> 		mov [es:esi+pl_notenum],dx
 18299 00007EF3 6683FA40            <1> 		cmp dx,64
 18300 00007EF7 73E8                <1> 		jnb p3
 18301 00007EF9 42                  <1> 		inc edx
 18302 00007EFA 80FA40              <1> 		cmp dl,64
 18303 00007EFD 720F                <1> 		jb p4
 18304 00007EFF 30D2                <1> 		xor dl,dl
 18305 00007F01 43                  <1> 		inc ebx
 18306 00007F02 6639CB              <1> 		cmp bx,cx
 18307 00007F05 7202                <1> 		jb p5
 18308 00007F07 31DB                <1> 		xor ebx,ebx
 18309                              <1> p5:
 18310 00007F09 2666895E0E          <1> 		mov [es:esi+pl_nextsongnum],bx
 18311                              <1> p4:
 18312 00007F0E 2666895610          <1> 		mov [es:esi+pl_nextnotenum],dx
 18313                              <1> 
 18314                              <1> 		; interpret events for each channel
 18315 00007F13 260FB75E12          <1> 		movzx ebx,word [es:esi+pl_songnum]
 18316 00007F18 26035E1C            <1> 		add ebx,[es:esi+pl_song]
 18317 00007F1C 268A1B              <1> 		mov bl,[es:ebx]
 18318 00007F1F 80FB80              <1> 		cmp bl,0x80
 18319 00007F22 7202                <1> 		jb p11
 18320 00007F24 30DB                <1> 		xor bl,bl
 18321                              <1> p11:
 18322 00007F26 0FB6DB              <1> 		movzx ebx,bl
 18323 00007F29 C1E306              <1> 		shl ebx,6
 18324 00007F2C 260FB74E14          <1> 		movzx ecx,word [es:esi+pl_notenum]
 18325 00007F31 01CB                <1> 		add ebx,ecx
 18326 00007F33 C1E304              <1> 		shl ebx,4
 18327 00007F36 26035E20            <1> 		add ebx,[es:esi+pl_patterns]
 18328                              <1> 
 18329 00007F3A 268B7E24            <1> 		mov edi,[es:esi+pl_sampinfo]
 18330 00007F3E 56                  <1> 		push esi
 18331 00007F3F 81C6E8000000        <1> 		add esi,pl_channs
 18332                              <1> 
 18333 00007F45 B904000000          <1> 		mov ecx,4
 18334                              <1> p18:
 18335 00007F4A 268A23              <1> 		mov ah,[es:ebx]
 18336 00007F4D 80E410              <1> 		and ah,0x10
 18337 00007F50 268A4302            <1> 		mov al,[es:ebx+2]
 18338 00007F54 C0E804              <1> 		shr al,4
 18339 00007F57 08E0                <1> 		or al,ah
 18340 00007F59 7405                <1> 		jz p16
 18341 00007F5B E87F070000          <1> 		call setsamp
 18342                              <1> p16:
 18343 00007F60 268A23              <1> 		mov ah,[es:ebx]
 18344 00007F63 80E40F              <1> 		and ah,0x0f
 18345 00007F66 268A4301            <1> 		mov al,[es:ebx+1]
 18346 00007F6A 6609C0              <1> 		or ax,ax
 18347 00007F6D 742E                <1> 		jz p17
 18348 00007F6F 2666894626          <1> 		mov [es:esi+ch_pitchgoal],ax
 18349 00007F74 268A5302            <1> 		mov dl,[es:ebx+2]
 18350 00007F78 FEC2                <1> 		inc dl
 18351 00007F7A 80CAF2              <1> 		or dl,0xf2
 18352 00007F7D 80FAF6              <1> 		cmp dl,0xf6
 18353 00007F80 741B                <1> 		jz p17
 18354 00007F82 2666894604          <1> 		mov [es:esi+ch_pitch],ax
 18355 00007F87 31C0                <1> 		xor eax,eax
 18356 00007F89 266689460E          <1> 		mov [es:esi+ch_pointer],ax
 18357 00007F8E 2666894610          <1> 		mov [es:esi+ch_pointer8],ax
 18358 00007F93 26668B4614          <1> 		mov ax,[es:esi+ch_send]
 18359 00007F98 2666894612          <1> 		mov [es:esi+ch_end],ax
 18360                              <1> p17:
 18361 00007F9D 31C0                <1> 		xor eax,eax
 18362 00007F9F 266689463A          <1> 		mov [es:esi+ch_effect],ax
 18363 00007FA4 268A5303            <1> 		mov dl,[es:ebx+3]
 18364 00007FA8 268A4302            <1> 		mov al,[es:ebx+2]
 18365 00007FAC 240F                <1> 		and al,0x0f
 18366 00007FAE 08C2                <1> 		or dl,al
 18367 00007FB0 7411                <1> 		jz p29
 18368                              <1> 
 18369 00007FB2 57                  <1> 		push edi
 18370 00007FB3 268B7E3C            <1> 		mov edi,[es:esi+ch_player]
 18371 00007FB7 268A5303            <1> 		mov dl,[es:ebx+3]
 18372 00007FBB 30F6                <1> 		xor dh,dh
 18373 00007FBD E8F7010000          <1> 		call effects
 18374 00007FC2 5F                  <1> 		pop edi
 18375                              <1> p29:
 18376 00007FC3 E8C2010000          <1> 		call norm
 18377 00007FC8 83C640              <1> 		add esi,ch_sizeof
 18378 00007FCB 83C304              <1> 		add ebx,4
 18379 00007FCE 49                  <1> 		dec ecx
 18380 00007FCF 0F8575FFFFFF        <1> 		jnz p18
 18381                              <1> 
 18382 00007FD5 5E                  <1> 		pop esi
 18383                              <1> 
 18384                              <1> 		; prepare playing of each channel
 18385                              <1> p1:
 18386 00007FD6 56                  <1> 		push esi
 18387 00007FD7 81C6E8000000        <1> 		add esi,pl_channs
 18388 00007FDD B904000000          <1> 		mov ecx,4
 18389                              <1> p10:
 18390 00007FE2 26668B4612          <1> 		mov ax,[es:esi+ch_end]
 18391 00007FE7 6609C0              <1> 		or ax,ax
 18392 00007FEA 750A                <1> 		jnz p6
 18393                              <1> p8:
 18394 00007FEC 26C7460A00000000    <1> 		mov dword [es:esi+ch_start],0
 18395 00007FF4 EB56                <1> 		jmp p7
 18396                              <1> p6:
 18397 00007FF6 26668B4604          <1> 		mov ax,[es:esi+ch_pitch]
 18398 00007FFB 6609C0              <1> 		or ax,ax
 18399 00007FFE 74EC                <1> 		jz p8
 18400 00008000 260FB71E            <1> 		movzx ebx,word [es:esi+ch_samp]
 18401 00008004 09DB                <1> 		or ebx,ebx
 18402 00008006 74E4                <1> 		jz p8
 18403 00008008 89F2                <1> 		mov edx,esi
 18404 0000800A 5E                  <1> 		pop esi
 18405 0000800B 56                  <1> 		push esi
 18406 0000800C C1E302              <1> 		shl ebx,2
 18407 0000800F 01DE                <1> 		add esi,ebx
 18408 00008011 268B5E28            <1> 		mov ebx,[es:esi+pl_sampd]
 18409 00008015 87F2                <1> 		xchg esi,edx
 18410 00008017 26895E0A            <1> 		mov [es:esi+ch_start],ebx
 18411 0000801B 26668B5606          <1> 		mov dx,[es:esi+ch_finetune]
 18412 00008020 6601D2              <1> 		add dx,dx
 18413 00008023 7413                <1> 		jz p9
 18414 00008025 668B15[6A810000]    <1> 		mov dx,[fttab]
 18415 0000802C 66F7E2              <1> 		mul dx
 18416 0000802F 66D1E0              <1> 		shl ax,1
 18417 00008032 6689D0              <1> 		mov ax,dx
 18418 00008035 6611C0              <1> 		adc ax,ax
 18419                              <1> p9:
 18420 00008038 6689C3              <1> 		mov bx,ax
 18421 0000803B 66B87DDF            <1> 		mov ax,57213
 18422 0000803F 31D2                <1> 		xor edx,edx
 18423 00008041 66F7F3              <1> 		div bx
 18424 00008044 2688661A            <1> 		mov [es:esi+ch_step],ah
 18425 00008048 2688461C            <1> 		mov [es:esi+ch_step8],al
 18426                              <1> p7:
 18427 0000804C 83C640              <1> 		add esi,ch_sizeof
 18428 0000804F E291                <1> 		loop p10
 18429                              <1> 
 18430 00008051 5E                  <1> 		pop esi
 18431                              <1> 
 18432                              <1> 		; now generate 320 samples for each channel
 18433 00008052 5F                  <1> 		pop edi
 18434 00008053 81C6E8000000        <1> 		add esi,pl_channs
 18435 00008059 B840010000          <1> 		mov eax,320
 18436                              <1> p21:
 18437 0000805E 50                  <1> 		push eax
 18438 0000805F B904000000          <1> 		mov ecx,4
 18439                              <1> p20:
 18440 00008064 268B5E0A            <1> 		mov ebx,[es:esi+ch_start]
 18441 00008068 09DB                <1> 		or ebx,ebx
 18442 0000806A 0F84AB000000        <1> 		jz p22
 18443                              <1> 
 18444 00008070 260FB7460E          <1> 		movzx eax,word [es:esi+ch_pointer]
 18445 00008075 01C3                <1> 		add ebx,eax
 18446 00008077 26660FBE13          <1> 		movsx dx,[es:ebx]
 18447 0000807C 66C1E202            <1> 		shl dx,2
 18448 00008080 40                  <1> 		inc eax
 18449 00008081 26663B4612          <1> 		cmp ax,[es:esi+ch_end]
 18450 00008086 7327                <1> 		jnb p23
 18451 00008088 43                  <1> 		inc ebx
 18452 00008089 26660FBE03          <1> 		movsx ax,[es:ebx]
 18453 0000808E 51                  <1> 		push ecx
 18454 0000808F 26668B4E10          <1> 		mov cx,[es:esi+ch_pointer8]
 18455 00008094 6609C9              <1> 		or cx,cx
 18456 00008097 7415                <1> 		jz p24
 18457 00008099 66C1FA02            <1> 		sar dx,2
 18458 0000809D 660FAFC1            <1> 		imul ax,cx
 18459 000080A1 F6D9                <1> 		neg cl
 18460 000080A3 660FAFD1            <1> 		imul dx,cx
 18461 000080A7 6601C2              <1> 		add dx,ax
 18462 000080AA 66C1FA06            <1> 		sar dx,6
 18463                              <1> p24:
 18464 000080AE 59                  <1> 		pop ecx
 18465                              <1> p23:
 18466 000080AF 26660FAF5608        <1> 		imul dx,[es:esi+ch_volume]
 18467 000080B5 66C1FA02            <1> 		sar dx,2
 18468 000080B9 56                  <1> 		push esi
 18469 000080BA 268B763C            <1> 		mov esi,[es:esi+ch_player]
 18470 000080BE 260FB706            <1> 		movzx eax,word [es:esi+pl_volume]
 18471 000080C2 5E                  <1> 		pop esi
 18472 000080C3 0FBFD2              <1> 		movsx edx,dx
 18473 000080C6 F7EA                <1> 		imul edx
 18474 000080C8 C1F810              <1> 		sar eax,16
 18475 000080CB 26660307            <1> 		add ax,word [es:edi]
 18476 000080CF 7107                <1> 		jno p40
 18477 000080D1 66B8FF7F            <1> 		mov ax,32767
 18478 000080D5 7801                <1> 		js p40
 18479 000080D7 40                  <1> 		inc eax
 18480                              <1> p40:
 18481 000080D8 26668907            <1> 		mov [es:edi],ax
 18482 000080DC 26668B5E10          <1> 		mov bx,[es:esi+ch_pointer8]
 18483 000080E1 26668B460E          <1> 		mov ax,[es:esi+ch_pointer]
 18484 000080E6 26025E1C            <1> 		add bl,[es:esi+ch_step8]
 18485 000080EA 266613461A          <1> 		adc ax,[es:esi+ch_step]
 18486 000080EF 26885E10            <1> 		mov [es:esi+ch_pointer8],bl
 18487 000080F3 26663B4612          <1> 		cmp ax,[es:esi+ch_end]
 18488 000080F8 721C                <1> 		jb p25
 18489 000080FA 26668B4616          <1> 		mov ax,[es:esi+ch_roff]
 18490 000080FF 26668B5E18          <1> 		mov bx,[es:esi+ch_rend]
 18491 00008104 2666895E12          <1> 		mov [es:esi+ch_end],bx
 18492 00008109 6609DB              <1> 		or bx,bx
 18493 0000810C 7508                <1> 		jnz p25
 18494 0000810E 26C7460A00000000    <1> 		mov dword [es:esi+ch_start],0
 18495                              <1> p25:
 18496 00008116 266689460E          <1> 		mov [es:esi+ch_pointer],ax
 18497                              <1> p22:
 18498 0000811B 83C640              <1> 		add esi,ch_sizeof
 18499 0000811E 49                  <1> 		dec ecx
 18500 0000811F 0F853FFFFFFF        <1> 		jnz p20
 18501 00008125 83C702              <1> 		add edi,2
 18502 00008128 81EE00010000        <1> 		sub esi,ch_sizeof * 4
 18503 0000812E 58                  <1> 		pop eax
 18504 0000812F 48                  <1> 		dec eax
 18505 00008130 0F8528FFFFFF        <1> 		jnz p21
 18506 00008136 81EEE8000000        <1> 		sub esi,pl_channs
 18507 0000813C 26668B4606          <1> 		mov ax,[es:esi+pl_state]
 18508 00008141 6648                <1> 		dec ax
 18509 00008143 7423                <1> 		jz p50
 18510 00008145 81C6E8000000        <1> 		add esi,pl_channs
 18511 0000814B B904000000          <1> 		mov ecx,4
 18512                              <1> p51:
 18513 00008150 268B460A            <1> 		mov eax,[es:esi+ch_start]
 18514 00008154 09C0                <1> 		or eax,eax
 18515 00008156 7510                <1> 		jnz p50
 18516 00008158 83C640              <1> 		add esi,ch_sizeof
 18517 0000815B E2F3                <1> 		loop p51
 18518 0000815D 81EEE8010000        <1> 		sub esi,ch_sizeof * 4 + pl_channs
 18519 00008163 2666894606          <1> 		mov [es:esi+pl_state],ax
 18520                              <1> p50:
 18521 00008168 61                  <1> 		popa
 18522 00008169 C3                  <1> 		ret
 18523                              <1> 
 18524                              <1> 
 18525 0000816A 0080147F2A7E427D    <1> fttab		dw 32768, 32532, 32298, 32066
 18526 00008172 5B7C767B927AB179    <1> 		dw 31835, 31606, 31378, 31153
 18527 0000817A 9C87A286AB85B484    <1> 		dw 34716, 34466, 34219, 33972
 18528 00008182 C083CD82DC81ED80    <1> 		dw 33728, 33485, 33244, 33005
 18529                              <1> 
 18530                              <1> 
 18531                              <1> ; norm - normalize channel values
 18532                              <1> ;   es:esi	start of chanel
 18533                              <1> 
 18534                              <1> norm:
 18535 0000818A 50                  <1> 		push eax
 18536 0000818B 26668B4608          <1> 		mov ax,[es:esi+ch_volume]
 18537 00008190 6609C0              <1> 		or ax,ax
 18538 00008193 7902                <1> 		jns n1
 18539 00008195 31C0                <1> 		xor eax,eax
 18540                              <1> n1:
 18541 00008197 6683F840            <1> 		cmp ax,64
 18542 0000819B 7204                <1> 		jb n2
 18543 0000819D 66B84000            <1> 		mov ax,64
 18544                              <1> n2:
 18545 000081A1 2666894608          <1> 		mov [es:esi+ch_volume],ax
 18546 000081A6 26668B4604          <1> 		mov ax,[es:esi+ch_pitch]
 18547 000081AB 6609C0              <1> 		or ax,ax
 18548 000081AE 7307                <1> 		jnb n3
 18549 000081B0 31C0                <1> 		xor eax,eax
 18550 000081B2 2666894604          <1> 		mov [es:esi+ch_pitch],ax
 18551                              <1> n3:
 18552 000081B7 58                  <1> 		pop eax
 18553 000081B8 C3                  <1> 		ret
 18554                              <1> 
 18555                              <1> 
 18556                              <1> ; effects - interpret effect
 18557                              <1> ;   ax		effect
 18558                              <1> ;   dx		arg
 18559                              <1> ;   es:edi	start of player
 18560                              <1> ;   es:esi	start of channel
 18561                              <1> ;	
 18562                              <1> ;   trashes ax, dx
 18563                              <1> 
 18564                              <1> effects:
 18565 000081B9 0FB7D2              <1> 		movzx edx,dx
 18566 000081BC 08C0                <1> 		or al,al
 18567 000081BE 7549                <1> 		jnz e1
 18568 000081C0 266689462C          <1> 		mov [es:esi+ch_arpindex],ax
 18569 000081C5 26668B4604          <1> 		mov ax,[es:esi+ch_pitch]
 18570 000081CA 266689462E          <1> 		mov [es:esi+ch_arp],ax
 18571 000081CF 52                  <1> 		push edx
 18572 000081D0 50                  <1> 		push eax
 18573 000081D1 C0EA04              <1> 		shr dl,4
 18574 000081D4 740E                <1> 		jz e1b
 18575 000081D6 668B9412[03840000]  <1> 		mov dx,[arptab+2*edx]
 18576 000081DE 66F7E2              <1> 		mul dx
 18577 000081E1 6689D0              <1> 		mov ax,dx
 18578                              <1> e1b:
 18579 000081E4 2666894630          <1> 		mov [es:esi+ch_arp+2],ax
 18580 000081E9 58                  <1> 		pop eax
 18581 000081EA 5A                  <1> 		pop edx
 18582 000081EB 80E20F              <1> 		and dl,0x0f
 18583 000081EE 740E                <1> 		jz e1a
 18584 000081F0 668B9412[03840000]  <1> 		mov dx,[arptab+2*edx]
 18585 000081F8 66F7E2              <1> 		mul dx
 18586 000081FB 6689D0              <1> 		mov ax,dx
 18587                              <1> e1a:
 18588 000081FE 2666894632          <1> 		mov [es:esi+ch_arp+4],ax
 18589 00008203 26C6463A01          <1> 		mov byte [es:esi+ch_effect],EFF_ARP
 18590 00008208 C3                  <1> 		ret
 18591                              <1> e1:
 18592 00008209 3C01                <1> 		cmp al,1
 18593 0000820B 7505                <1> 		jnz e2
 18594 0000820D 66F7DA              <1> 		neg dx
 18595 00008210 EB04                <1> 		jmp e3
 18596                              <1> e2:
 18597 00008212 3C02                <1> 		cmp al,2
 18598 00008214 750F                <1> 		jnz e4
 18599                              <1> e3:
 18600 00008216 08D2                <1> 		or dl, dl
 18601 00008218 7405                <1> 		jz e5
 18602 0000821A 266689561E          <1> 		mov [es:esi+ch_slide],dx
 18603                              <1> e5:
 18604 0000821F 26C6463A02          <1> 		mov byte [es:esi+ch_effect],EFF_SLIDE
 18605 00008224 C3                  <1> 		ret
 18606                              <1> e4:
 18607 00008225 3C03                <1> 		cmp al,3
 18608 00008227 750F                <1> 		jnz e6
 18609 00008229 08D2                <1> 		or dl,dl
 18610 0000822B 7405                <1> 		jz e7
 18611 0000822D 2666895628          <1> 		mov [es:esi+ch_pitchrate],dx
 18612                              <1> e7:
 18613 00008232 26C6463A03          <1> 		mov byte [es:esi+ch_effect],EFF_PORTA
 18614 00008237 C3                  <1> 		ret
 18615                              <1> e6:
 18616 00008238 3C04                <1> 		cmp al,4
 18617 0000823A 751E                <1> 		jnz e8
 18618 0000823C 6689D0              <1> 		mov ax,dx
 18619 0000823F 66C1E804            <1> 		shr ax,4
 18620 00008243 7405                <1> 		jz e9
 18621 00008245 2666894620          <1> 		mov [es:esi+ch_vibrate],ax
 18622                              <1> e9:
 18623 0000824A 80E20F              <1> 		and dl,0x0f
 18624 0000824D 7405                <1> 		jz e10
 18625 0000824F 2666895624          <1> 		mov [es:esi+ch_vibdepth],dx
 18626                              <1> e10:
 18627 00008254 26C6463A04          <1> 		mov byte [es:esi+ch_effect],EFF_VIBRA
 18628 00008259 C3                  <1> 		ret
 18629                              <1> e8:	
 18630 0000825A 3C05                <1> 		cmp al,5
 18631 0000825C 7507                <1> 		jnz e11
 18632 0000825E 26C6463A0B          <1> 		mov byte [es:esi+ch_effect],EFF_PORTASLIDE
 18633 00008263 EB63                <1> 		jmp e12
 18634                              <1> e11:
 18635 00008265 3C06                <1> 		cmp al,6
 18636 00008267 7507                <1> 		jnz e13
 18637 00008269 26C6463A0C          <1> 		mov byte [es:esi+ch_effect],EFF_VIBRASLIDE
 18638 0000826E EB58                <1> 		jmp e12
 18639                              <1> e13:
 18640 00008270 3C09                <1> 		cmp al,9
 18641 00008272 754B                <1> 		jnz e14
 18642 00008274 26668B06            <1> 		mov ax,[es:esi+ch_samp]
 18643 00008278 08C0                <1> 		or al,al
 18644 0000827A 7442                <1> 		jz e15
 18645 0000827C 31C0                <1> 		xor eax,eax
 18646 0000827E 2666894610          <1> 		mov [es:esi+ch_pointer8],ax
 18647 00008283 26668B4614          <1> 		mov ax,[es:esi+ch_send]
 18648 00008288 2666894612          <1> 		mov [es:esi+ch_end],ax
 18649 0000828D 66C1E208            <1> 		shl dx,8
 18650 00008291 6639C2              <1> 		cmp dx,ax
 18651 00008294 7223                <1> 		jb e16
 18652 00008296 6629C2              <1> 		sub dx,ax
 18653 00008299 26668B4618          <1> 		mov ax,[es:esi+ch_rend]
 18654 0000829E 2666894612          <1> 		mov [es:esi+ch_end],ax
 18655 000082A3 26662B4616          <1> 		sub ax,[es:esi+ch_roff]
 18656 000082A8 740A                <1> 		jz e17
 18657                              <1> e18:
 18658 000082AA 6639C2              <1> 		cmp dx,ax
 18659 000082AD 7205                <1> 		jb e17
 18660 000082AF 6629C2              <1> 		sub dx,ax
 18661 000082B2 EBF6                <1> 		jmp e18
 18662                              <1> e17:
 18663 000082B4 2666035616          <1> 		add dx,[es:esi+ch_roff]
 18664                              <1> e16:
 18665 000082B9 266689560E          <1> 		mov [es:esi+ch_pointer],dx
 18666                              <1> e15:
 18667 000082BE C3                  <1> 		ret
 18668                              <1> e14:
 18669 000082BF 3C0A                <1> 		cmp al,10
 18670 000082C1 751E                <1> 		jnz e19
 18671 000082C3 26C6463A08          <1> 		mov byte [es:esi+ch_effect],EFF_SLIDEVOL
 18672                              <1> e12:
 18673 000082C8 6689D0              <1> 		mov ax,dx
 18674 000082CB 80E20F              <1> 		and dl,0x0f
 18675 000082CE 7405                <1> 		jz e20
 18676 000082D0 66F7DA              <1> 		neg dx
 18677 000082D3 EB06                <1> 		jmp e21
 18678                              <1> e20:
 18679 000082D5 6689C2              <1> 		mov dx,ax
 18680 000082D8 C0EA04              <1> 		shr dl,4
 18681                              <1> e21:
 18682 000082DB 266689562A          <1> 		mov [es:esi+ch_volumerate],dx
 18683 000082E0 C3                  <1> 		ret
 18684                              <1> e19:
 18685 000082E1 3C0B                <1> 		cmp al,11
 18686 000082E3 750D                <1> 		jnz e22
 18687 000082E5 266689570E          <1> 		mov [es:edi+pl_nextsongnum],dx
 18688 000082EA 31D2                <1> 		xor edx,edx
 18689 000082EC 2666895710          <1> 		mov [es:edi+pl_nextnotenum],dx
 18690 000082F1 C3                  <1> 		ret
 18691                              <1> e22:
 18692 000082F2 3C0C                <1> 		cmp al,12
 18693 000082F4 7506                <1> 		jnz e23
 18694 000082F6 2666895608          <1> 		mov [es:esi+ch_volume],dx
 18695 000082FB C3                  <1> 		ret
 18696                              <1> e23:
 18697 000082FC 3C0D                <1> 		cmp al,13
 18698 000082FE 752F                <1> 		jnz e24
 18699 00008300 6689D0              <1> 		mov ax,dx
 18700 00008303 C0E804              <1> 		shr al,4
 18701 00008306 666BC00A            <1> 		imul ax,10
 18702 0000830A 6683E20F            <1> 		and dx,0x0f
 18703 0000830E 6601C2              <1> 		add dx,ax
 18704 00008311 2666895710          <1> 		mov [es:edi+pl_nextnotenum],dx
 18705 00008316 26668B5712          <1> 		mov dx,[es:edi+pl_songnum]
 18706 0000831B 6642                <1> 		inc dx
 18707 0000831D 26668B4708          <1> 		mov ax,[es:edi+pl_songlen]
 18708 00008322 6639C2              <1> 		cmp dx,ax
 18709 00008325 7202                <1> 		jb e25
 18710 00008327 31D2                <1> 		xor edx,edx
 18711                              <1> e25:
 18712 00008329 266689570E          <1> 		mov [es:edi+pl_nextsongnum],dx
 18713 0000832E C3                  <1> 		ret
 18714                              <1> e24:
 18715 0000832F 3C0F                <1> 		cmp al,15
 18716 00008331 750B                <1> 		jnz e27
 18717 00008333 80FA20              <1> 		cmp dl,32
 18718 00008336 7305                <1> 		jnb e26
 18719 00008338 266689570A          <1> 		mov [es:edi+pl_speed],dx
 18720                              <1> e26:
 18721 0000833D C3                  <1> 		ret
 18722                              <1> e27:
 18723 0000833E 3C0E                <1> 		cmp al,14
 18724 00008340 75FB                <1> 		jnz e26
 18725 00008342 88D0                <1> 		mov al,dl
 18726 00008344 C0E804              <1> 		shr al,4
 18727 00008347 80E20F              <1> 		and dl,0x0f
 18728 0000834A 3C01                <1> 		cmp al,1
 18729 0000834C 7506                <1> 		jnz e28
 18730                              <1> e30:
 18731 0000834E 2666015604          <1> 		add [es:esi+ch_pitch],dx
 18732 00008353 C3                  <1> 		ret
 18733                              <1> e28:
 18734 00008354 3C02                <1> 		cmp al,2
 18735 00008356 7505                <1> 		jnz e29
 18736 00008358 66F7DA              <1> 		neg dx
 18737 0000835B EBF1                <1> 		jmp e30
 18738                              <1> e29:
 18739 0000835D 3C05                <1> 		cmp al,5
 18740 0000835F 7506                <1> 		jnz e31
 18741 00008361 2666895606          <1> 		mov [es:esi+ch_finetune],dx
 18742 00008366 C3                  <1> 		ret
 18743                              <1> e31:
 18744 00008367 3C06                <1> 		cmp al,6
 18745 00008369 7532                <1> 		jnz e32
 18746 0000836B 08D2                <1> 		or dl,dl
 18747 0000836D 750B                <1> 		jnz e33
 18748 0000836F 26668B5714          <1> 		mov dx,[es:edi+pl_notenum]
 18749 00008374 2666895716          <1> 		mov [es:edi+pl_loop_notenum],dx
 18750 00008379 C3                  <1> 		ret
 18751                              <1> e33:
 18752 0000837A 26668B4718          <1> 		mov ax,[es:edi+pl_loop_counter]
 18753 0000837F 6609C0              <1> 		or ax,ax
 18754 00008382 7505                <1> 		jnz e34
 18755 00008384 6689D0              <1> 		mov ax,dx
 18756 00008387 6640                <1> 		inc ax
 18757                              <1> e34:
 18758 00008389 6648                <1> 		dec ax
 18759 0000838B 2666894718          <1> 		mov [es:edi+pl_loop_counter],ax
 18760 00008390 740A                <1> 		jz e35
 18761 00008392 26668B5716          <1> 		mov dx,[es:edi+pl_loop_notenum]
 18762 00008397 2666895710          <1> 		mov [es:edi+pl_nextnotenum],dx
 18763                              <1> e35:
 18764 0000839C C3                  <1> 		ret
 18765                              <1> e32:
 18766 0000839D 3C09                <1> 		cmp al,9
 18767 0000839F 7510                <1> 		jnz e36
 18768 000083A1 2666895636          <1> 		mov [es:esi+ch_retrig],dx
 18769 000083A6 2666895634          <1> 		mov [es:esi+ch_current],dx
 18770 000083AB 26C6463A05          <1> 		mov byte [es:esi+ch_effect],EFF_RETRIG
 18771 000083B0 C3                  <1> 		ret
 18772                              <1> e36:	
 18773 000083B1 3C0A                <1> 		cmp al,10
 18774 000083B3 7506                <1> 		jnz e37
 18775                              <1> e39:
 18776 000083B5 2666015608          <1> 		add [es:esi+ch_volume],dx
 18777 000083BA C3                  <1> 		ret
 18778                              <1> e37:	
 18779 000083BB 3C0B                <1> 		cmp  al,11
 18780 000083BD 7505                <1> 		jnz e38
 18781 000083BF 66F7DA              <1> 		neg dx
 18782 000083C2 EBF1                <1> 		jmp e39
 18783                              <1> e38:
 18784 000083C4 3C0C                <1> 		cmp al,12
 18785 000083C6 750B                <1> 		jnz e40
 18786 000083C8 2666895636          <1> 		mov [es:esi+ch_retrig],dx
 18787 000083CD 26C6463A06          <1> 		mov byte [es:esi+ch_effect],EFF_CUT
 18788 000083D2 C3                  <1> 		ret
 18789                              <1> e40:	
 18790 000083D3 3C0D                <1> 		cmp al,13
 18791 000083D5 751A                <1> 		jnz e41
 18792 000083D7 2666895634          <1> 		mov [es:esi+ch_current],dx
 18793 000083DC 26668B16            <1> 		mov dx,[es:esi+ch_samp]
 18794 000083E0 2666895638          <1> 		mov [es:esi+ch_latesamp],dx
 18795 000083E5 31D2                <1> 		xor edx,edx
 18796 000083E7 26668916            <1> 		mov [es:esi+ch_samp],dx
 18797 000083EB 26C6463A07          <1> 		mov byte [es:esi+ch_effect],EFF_LATESTART
 18798 000083F0 C3                  <1> 		ret
 18799                              <1> e41:	
 18800 000083F1 3C0E                <1> 		cmp al,14
 18801 000083F3 750D                <1> 		jnz e42
 18802 000083F5 6642                <1> 		inc dx
 18803 000083F7 26660FAF570A        <1> 		imul dx,[es:edi+pl_speed]
 18804 000083FD 266629570C          <1> 		sub [es:edi+pl_effpos],dx
 18805                              <1> e42:
 18806 00008402 C3                  <1> 		ret
 18807                              <1> 
 18808                              <1> 
 18809 00008403 0000A2F112E445D7    <1> arptab		dw     0, 61858, 58386, 55109
 18810 0000840B 30CBC9BF05B5DCAA    <1> 		dw 52016, 49097, 46341, 43740
 18811 00008413 45A13898AD8F9C87    <1> 		dw 41285, 38968, 36781, 34716
 18812 0000841B 0080D1780972A26B    <1> 		dw 32768, 30929, 29193, 27554
 18813                              <1> 
 18814                              <1> 
 18815                              <1> ; doeff - apply channel effect
 18816                              <1> ;   ax		effect
 18817                              <1> ;   es:esi	start of chanel
 18818                              <1> ;
 18819                              <1> ;   trashes ax, bx
 18820                              <1> 
 18821                              <1> doeff:
 18822 00008423 660FBAE003          <1> 		bt ax,3
 18823 00008428 730C                <1> 		jnc d1
 18824 0000842A 26668B5E2A          <1> 		mov bx,[es:esi+ch_volumerate]
 18825 0000842F 2666015E08          <1> 		add [es:esi+ch_volume],bx
 18826 00008434 2C08                <1> 		sub al,8
 18827                              <1> d1:
 18828 00008436 3C01                <1> 		cmp al,EFF_ARP
 18829 00008438 7520                <1> 		jnz d2
 18830 0000843A 260FB75E2C          <1> 		movzx ebx,word [es:esi+ch_arpindex]
 18831 0000843F FEC3                <1> 		inc bl
 18832 00008441 80FB03              <1> 		cmp bl,3
 18833 00008444 7202                <1> 		jb d3
 18834 00008446 30DB                <1> 		xor bl,bl
 18835                              <1> d3:
 18836 00008448 26885E2C            <1> 		mov [es:esi+ch_arpindex],bl
 18837 0000844C 00DB                <1> 		add bl,bl
 18838 0000844E 26668B441E2E        <1> 		mov ax,[es:esi+ebx+ch_arp]
 18839 00008454 2666894604          <1> 		mov [es:esi+ch_pitch],ax
 18840 00008459 C3                  <1> 		ret
 18841                              <1> d2:
 18842 0000845A 3C02                <1> 		cmp al,EFF_SLIDE
 18843 0000845C 750B                <1> 		jnz d4
 18844 0000845E 26668B461E          <1> 		mov ax,[es:esi+ch_slide]
 18845 00008463 2666014604          <1> 		add [es:esi+ch_pitch],ax
 18846 00008468 C3                  <1> 		ret
 18847                              <1> d4:
 18848 00008469 3C03                <1> 		cmp al,EFF_PORTA
 18849 0000846B 752E                <1> 		jnz d5
 18850 0000846D 26668B4604          <1> 		mov ax,[es:esi+ch_pitch]
 18851 00008472 26668B5E26          <1> 		mov bx,[es:esi+ch_pitchgoal]
 18852 00008477 6639D8              <1> 		cmp ax,bx
 18853 0000847A 7313                <1> 		jnb d6
 18854 0000847C 2666034628          <1> 		add ax,[es:esi+ch_pitchrate]
 18855 00008481 6639D8              <1> 		cmp ax,bx
 18856 00008484 7203                <1> 		jb d7
 18857                              <1> d8:
 18858 00008486 6689D8              <1> 		mov ax,bx
 18859                              <1> d7:
 18860 00008489 2666894604          <1> 		mov [es:esi+ch_pitch],ax
 18861 0000848E C3                  <1> 		ret
 18862                              <1> d6:
 18863 0000848F 26662B4628          <1> 		sub ax,[es:esi+ch_pitchrate]
 18864 00008494 6639D8              <1> 		cmp ax,bx
 18865 00008497 72ED                <1> 		jb d8
 18866 00008499 EBEE                <1> 		jmp d7
 18867                              <1> d5:
 18868 0000849B 3C04                <1> 		cmp al,EFF_VIBRA
 18869 0000849D 752F                <1> 		jnz d9
 18870 0000849F 26668B5E22          <1> 		mov bx,[es:esi+ch_viboffset]
 18871 000084A4 2666035E20          <1> 		add bx,[es:esi+ch_vibrate]
 18872 000084A9 83E33F              <1> 		and ebx,0x3f
 18873 000084AC 2666895E22          <1> 		mov [es:esi+ch_viboffset],bx
 18874 000084B1 668B841B[3C850000]  <1> 		mov ax,[vibtab+2*ebx]
 18875 000084B9 26660FAF4624        <1> 		imul ax,[es:esi+ch_vibdepth]
 18876 000084BF 66C1F808            <1> 		sar ax, 8
 18877 000084C3 2666034626          <1> 		add ax,[es:esi+ch_pitchgoal]
 18878 000084C8 2666894604          <1> 		mov [es:esi+ch_pitch],ax
 18879                              <1> d12:
 18880 000084CD C3                  <1> 		ret
 18881                              <1> d9:
 18882 000084CE 3C05                <1> 		cmp al,EFF_RETRIG
 18883 000084D0 752A                <1> 		jnz d10
 18884 000084D2 2666FF4E34          <1> 		dec word [es:esi+ch_current]
 18885 000084D7 7402                <1> 		jz d11
 18886 000084D9 79F2                <1> 		jns d12
 18887                              <1> d11:
 18888 000084DB 26668B4636          <1> 		mov ax,[es:esi+ch_retrig]
 18889 000084E0 2666894634          <1> 		mov [es:esi+ch_current],ax
 18890 000084E5 26668B4614          <1> 		mov ax,[es:esi+ch_send]
 18891 000084EA 2666894612          <1> 		mov [es:esi+ch_end],ax
 18892 000084EF 31C0                <1> 		xor eax,eax
 18893 000084F1 266689460E          <1> 		mov [es:esi+ch_pointer],ax
 18894 000084F6 2666894610          <1> 		mov [es:esi+ch_pointer8],ax
 18895 000084FB C3                  <1> 		ret
 18896                              <1> d10:
 18897 000084FC 3C06                <1> 		cmp al,EFF_CUT
 18898 000084FE 7516                <1> 		jnz d13
 18899 00008500 26668B4636          <1> 		mov ax,[es:esi+ch_retrig]
 18900 00008505 740E                <1> 		jz d14
 18901 00008507 2666FF4E36          <1> 		dec word [es:esi+ch_retrig]
 18902 0000850C 7507                <1> 		jnz d14
 18903 0000850E 31C0                <1> 		xor eax,eax
 18904 00008510 2666894608          <1> 		mov [es:esi+ch_volume],ax
 18905                              <1> d14:
 18906 00008515 C3                  <1> 		ret
 18907                              <1> d13:
 18908 00008516 3C07                <1> 		cmp al,EFF_LATESTART
 18909 00008518 75FB                <1> 		jnz d14
 18910 0000851A 2666FF4E34          <1> 		dec word [es:esi+ch_current]
 18911 0000851F 7402                <1> 		jz d15
 18912 00008521 79F2                <1> 		jns d14
 18913                              <1> d15:
 18914 00008523 E8B3FFFFFF          <1> 		call d11
 18915 00008528 2666894634          <1> 		mov [es:esi+ch_current],ax
 18916 0000852D 266689463A          <1> 		mov [es:esi+ch_effect],ax
 18917 00008532 26668B4638          <1> 		mov ax,[es:esi+ch_latesamp]
 18918 00008537 26668906            <1> 		mov [es:esi+ch_samp],ax
 18919 0000853B C3                  <1> 		ret
 18920                              <1> 
 18921                              <1> 
 18922 0000853C 0000320064009500C4- <1> vibtab		dw    0,  50, 100, 149, 196, 241, 284, 325
 18923 00008545 00F1001C014501      <1>
 18924 0000854C 6A018C01AA01C401D9- <1> 		dw  362, 396, 426, 452, 473, 490, 502, 510
 18925 00008555 01EA01F601FE01      <1>
 18926 0000855C 0002FE01F601EA01D9- <1> 		dw  512, 510, 502, 490, 473, 452, 426, 396
 18927 00008565 01C401AA018C01      <1>
 18928 0000856C 6A0145011C01F100C4- <1> 		dw  362, 325, 284, 241, 196, 149, 100,  50
 18929 00008575 00950064003200      <1>
 18930 0000857C 0000CFFF9DFF6CFF3D- <1> 		dw    0, -49, -99,-148,-195,-240,-283,-324
 18931 00008585 FF10FFE5FEBCFE      <1>
 18932 0000858C 97FE75FE57FE3DFE28- <1> 		dw -361,-395,-425,-451,-472,-489,-501,-509
 18933 00008595 FE17FE0BFE03FE      <1>
 18934 0000859C 01FE03FE0BFE17FE28- <1> 		dw -511,-509,-501,-489,-472,-451,-425,-395
 18935 000085A5 FE3DFE57FE75FE      <1>
 18936 000085AC 97FEBCFEE5FE10FF3D- <1> 		dw -361,-324,-283,-240, -195,-148,-99, -49
 18937 000085B5 FF6CFF9DFFCFFF      <1>
 18938                              <1> 
 18939                              <1> 
 18940                              <1> ; fixvol - fixup volume
 18941                              <1> ;   es:esi	start of volblock
 18942                              <1> 
 18943                              <1> fixvol:
 18944 000085BC 50                  <1> 		push eax
 18945 000085BD 53                  <1> 		push ebx
 18946 000085BE 26668B06            <1> 		mov ax,[es:esi+vo_volume]
 18947 000085C2 26668B5E02          <1> 		mov bx,[es:esi+vo_volumegoal]
 18948 000085C7 6639D8              <1> 		cmp ax,bx
 18949 000085CA 7415                <1> 		jz vo3
 18950 000085CC 7316                <1> 		jnb vo1
 18951 000085CE 2666034604          <1> 		add ax,[es:esi+vo_volumerate]
 18952 000085D3 7205                <1> 		jc vohit
 18953 000085D5 6639D8              <1> 		cmp ax,bx
 18954 000085D8 7203                <1> 		jb vo2
 18955                              <1> vohit:
 18956 000085DA 6689D8              <1> 		mov ax,bx
 18957                              <1> vo2:
 18958 000085DD 26668906            <1> 		mov [es:esi+vo_volume],ax
 18959                              <1> vo3:
 18960 000085E1 5B                  <1> 		pop ebx
 18961 000085E2 58                  <1> 		pop eax
 18962 000085E3 C3                  <1> 		ret
 18963                              <1> vo1:
 18964 000085E4 26662B4604          <1> 		sub ax,[es:esi+vo_volumerate]
 18965 000085E9 72EF                <1> 		jc vohit
 18966 000085EB 6639D8              <1> 		cmp ax,bx
 18967 000085EE 72EA                <1> 		jb vohit
 18968 000085F0 EBEB                <1> 		jmp vo2
 18969                              <1> 
 18970                              <1> 
 18971                              <1> ; vo_setvol - set volume
 18972                              <1> ;
 18973                              <1> ;   es:esi	start of volblock
 18974                              <1> ;   ax		goal
 18975                              <1> ;   bx		rate 0=immediate 50=one sec
 18976                              <1> 
 18977                              <1> vo_setvol:
 18978 000085F2 2666894602          <1> 		mov [es:esi+vo_volumegoal],ax
 18979 000085F7 6609DB              <1> 		or bx,bx
 18980 000085FA 750A                <1> 		jnz sv1
 18981 000085FC 26668906            <1> 		mov [es:esi+vo_volume],ax
 18982 00008600 2666895E04          <1> 		mov [es:esi+vo_volumerate],bx
 18983 00008605 C3                  <1> 		ret
 18984                              <1> sv1:
 18985 00008606 50                  <1> 		push eax
 18986 00008607 F9                  <1> 		stc
 18987 00008608 19C0                <1> 		sbb eax,eax
 18988 0000860A 52                  <1> 		push edx
 18989 0000860B 66F7F3              <1> 		div bx
 18990 0000860E 5A                  <1> 		pop edx
 18991 0000860F 2666894604          <1> 		mov [es:esi+vo_volumerate],ax
 18992 00008614 58                  <1> 		pop eax
 18993 00008615 C3                  <1> 		ret
 18994                              <1> 
 18995                              <1> 
 18996                              <1> ; getvol - get volume
 18997                              <1> ;   es:esi	start of volblock
 18998                              <1> 
 18999                              <1> vo_getvol:
 19000 00008616 26668B06            <1> 		mov ax,[es:esi+vo_volume]
 19001 0000861A C3                  <1> 		ret
 19002                              <1> 	
 19003                              <1> 
 19004                              <1> ; pl_playmod - play a modfile
 19005                              <1> ;   es:esi	start of player
 19006                              <1> ;   ax		start of song
 19007                              <1> 
 19008                              <1> pl_playmod:
 19009 0000861B 2680BEE801000001    <1> 		cmp byte [es:esi+pl_loaded],1
 19010 00008623 7401                <1> 		jz pm0
 19011 00008625 C3                  <1> 		ret
 19012                              <1> pm0:
 19013 00008626 31DB                <1> 		xor ebx,ebx
 19014 00008628 2666895E06          <1> 		mov [es:esi+pl_state],bx
 19015 0000862D 26C6460A06          <1> 		mov byte [es:esi+pl_speed],6
 19016 00008632 26C6460C06          <1> 		mov byte [es:esi+pl_effpos],6
 19017 00008637 266689460E          <1> 		mov [es:esi+pl_nextsongnum],ax
 19018 0000863C 2666895E10          <1> 		mov [es:esi+pl_nextnotenum],bx
 19019 00008641 E877000000          <1> 		call clearchans
 19020 00008646 43                  <1> 		inc ebx
 19021 00008647 2666895E06          <1> 		mov [es:esi+pl_state],bx
 19022 0000864C C3                  <1> 		ret
 19023                              <1> 
 19024                              <1> 
 19025                              <1> ; pl_playsamp - play a sample
 19026                              <1> ;   es:esi	start of player
 19027                              <1> ;   ax		channel number
 19028                              <1> ;   bx		sample number
 19029                              <1> ;   cx		pitch
 19030                              <1> 
 19031                              <1> pl_playsamp:
 19032 0000864D 2680BEE801000001    <1> 		cmp byte [es:esi+pl_loaded],1
 19033 00008655 7401                <1> 		jz ps0
 19034 00008657 C3                  <1> 		ret
 19035                              <1> ps0:	
 19036 00008658 50                  <1> 		push eax
 19037 00008659 26668B4606          <1> 		mov ax,[es:esi+pl_state]
 19038 0000865E 6648                <1> 		dec ax
 19039 00008660 6648                <1> 		dec ax
 19040 00008662 7405                <1> 		jz ps1
 19041 00008664 E854000000          <1> 		call clearchans
 19042                              <1> ps1:
 19043 00008669 58                  <1> 		pop eax
 19044 0000866A 56                  <1> 		push esi
 19045 0000866B 268B7E24            <1> 		mov edi,[es:esi+pl_sampinfo]
 19046 0000866F 81C6E8000000        <1> 		add esi,pl_channs
 19047 00008675 6BC040              <1> 		imul eax,ch_sizeof
 19048 00008678 01C6                <1> 		add esi,eax
 19049 0000867A 31C0                <1> 		xor eax,eax
 19050 0000867C 2689460A            <1> 		mov [es:esi+ch_start],eax
 19051 00008680 266689463A          <1> 		mov [es:esi+ch_effect],ax
 19052 00008685 266689460E          <1> 		mov [es:esi+ch_pointer],ax
 19053 0000868A 2666894610          <1> 		mov [es:esi+ch_pointer8],ax
 19054 0000868F 2666894E04          <1> 		mov [es:esi+ch_pitch],cx
 19055 00008694 89D8                <1> 		mov eax,ebx
 19056 00008696 6609C0              <1> 		or ax,ax
 19057 00008699 7405                <1> 		jz ps2
 19058 0000869B E83F000000          <1> 		call setsamp
 19059                              <1> ps2:
 19060 000086A0 26668B4614          <1> 		mov ax,[es:esi+ ch_send]
 19061 000086A5 2666894612          <1> 		mov [es:esi+ch_end],ax
 19062 000086AA 5E                  <1> 		pop esi
 19063 000086AB 26C6460602          <1> 		mov byte [es:esi + pl_state],2
 19064 000086B0 C3                  <1> 		ret
 19065                              <1> 
 19066                              <1> 
 19067                              <1> ; pl_getstate - get state of player
 19068                              <1> ;   es:esi	start of player
 19069                              <1> 
 19070                              <1> pl_getstate:
 19071 000086B1 26668B4606          <1> 		mov ax,[es:esi+pl_state]
 19072 000086B6 C3                  <1> 		ret
 19073                              <1> 
 19074                              <1> 
 19075                              <1> ; pl_stop - stop something?
 19076                              <1> ;   es:esi  start of player
 19077                              <1> 
 19078                              <1> pl_stop:
 19079 000086B7 26C6460600          <1> 		mov byte [es:esi+pl_state],0
 19080 000086BC C3                  <1> 		ret
 19081                              <1> 
 19082                              <1> 
 19083                              <1> ; clearchans - stop all channels
 19084                              <1> ;   es:esi	start of player
 19085                              <1> 
 19086                              <1> clearchans:
 19087 000086BD 56                  <1> 		push esi
 19088 000086BE 51                  <1> 		push ecx
 19089 000086BF 50                  <1> 		push eax
 19090 000086C0 31C0                <1> 		xor eax,eax
 19091 000086C2 81C6E8000000        <1> 		add esi,pl_channs
 19092 000086C8 B904000000          <1> 		mov ecx,4
 19093                              <1> cc1:
 19094 000086CD 2689460A            <1> 		mov [es:esi+ch_start],eax
 19095 000086D1 266689463A          <1> 		mov [es:esi+ch_effect],ax
 19096 000086D6 83C640              <1> 		add esi,ch_sizeof
 19097 000086D9 E2F2                <1> 		loop cc1
 19098 000086DB 58                  <1> 		pop eax
 19099 000086DC 59                  <1> 		pop ecx
 19100 000086DD 5E                  <1> 		pop esi
 19101 000086DE C3                  <1> 		ret
 19102                              <1> 
 19103                              <1> 
 19104                              <1> ; setsamp - start a sample
 19105                              <1> ;   es:esi	start of channel
 19106                              <1> ;   es:edi	start of sampinfo
 19107                              <1> ;   ax		sample number
 19108                              <1> ;
 19109                              <1> ;   trashes ax, dx
 19110                              <1> 
 19111                              <1> setsamp:
 19112 000086DF 0FB6C0              <1> 		movzx eax,al
 19113 000086E2 26668906            <1> 		mov [es:esi+ch_samp],ax
 19114 000086E6 6648                <1> 		dec ax
 19115 000086E8 666BC01E            <1> 		imul ax,30
 19116 000086EC 53                  <1> 		push ebx
 19117 000086ED 89C3                <1> 		mov ebx,eax
 19118 000086EF 26668B041F          <1> 		mov ax,[es:edi+ebx]
 19119 000086F4 86E0                <1> 		xchg ah,al
 19120 000086F6 6601C0              <1> 		add ax,ax
 19121 000086F9 2666894614          <1> 		mov [es:esi+ch_send],ax
 19122 000086FE 26668B441F04        <1> 		mov ax,[es:edi+ebx+4]
 19123 00008704 86E0                <1> 		xchg ah,al
 19124 00008706 6601C0              <1> 		add ax,ax
 19125 00008709 2666894616          <1> 		mov [es:esi+ch_roff],ax
 19126 0000870E 26668B541F06        <1> 		mov dx,[es:edi+ebx+6]
 19127 00008714 86F2                <1> 		xchg dh,dl
 19128 00008716 6601D2              <1> 		add dx,dx
 19129 00008719 2666895618          <1> 		mov [es:esi+ch_rend],dx
 19130 0000871E 6601D0              <1> 		add ax,dx
 19131 00008721 26668B5614          <1> 		mov dx,[es:esi+ch_send]
 19132 00008726 6648                <1> 		dec ax
 19133 00008728 6648                <1> 		dec ax
 19134 0000872A 6639D0              <1> 		cmp ax,dx
 19135 0000872D 7605                <1> 		jna ss13
 19136 0000872F 2666D16E16          <1> 		shr word [es:esi+ch_roff],1
 19137                              <1> ss13:
 19138 00008734 26668B4616          <1> 		mov ax,[es:esi+ch_roff]
 19139 00008739 2666034618          <1> 		add ax,[es:esi+ch_rend]
 19140 0000873E 26663B5616          <1> 		cmp dx,[es:esi+ch_roff]
 19141 00008743 7307                <1> 		jnb ss14
 19142                              <1> ss16:
 19143 00008745 31C0                <1> 		xor eax,eax
 19144 00008747 2666894616          <1> 		mov [es:esi+ch_roff],ax
 19145                              <1> ss14:
 19146 0000874C 6639C2              <1> 		cmp dx,ax
 19147 0000874F 7303                <1> 		jnb ss15
 19148 00008751 6689D0              <1> 		mov ax,dx
 19149                              <1> ss15:
 19150 00008754 2666894618          <1> 		mov [es:esi+ch_rend],ax
 19151 00008759 6648                <1> 		dec ax
 19152 0000875B 6648                <1> 		dec ax
 19153 0000875D 74E6                <1> 		jz ss16
 19154 0000875F 268A441F02          <1> 		mov al,[es:edi+ebx+2]
 19155 00008764 26884606            <1> 		mov [es:esi+ch_finetune],al
 19156 00008768 268A441F03          <1> 		mov al,[es:edi+ebx+3]
 19157 0000876D 26884608            <1> 		mov [es:esi+ch_volume],al
 19158 00008771 5B                  <1> 		pop ebx
 19159 00008772 C3                  <1> 		ret
 19160                              <1> 
 19161                              <1> 
 19162                              <1> ; the big picture: four mod players
 19163                              <1> ;
 19164                              <1> ; init - initialize everything
 19165                              <1> ;
 19166                              <1> ;   es:esi	start of area
 19167                              <1> 
 19168                              <1> init:
 19169 00008773 89F7                <1> 		mov edi,esi
 19170 00008775 31C0                <1> 		xor eax,eax
 19171 00008777 B9700B0000          <1> 		mov ecx,ar_sizeof
 19172 0000877C F3AA                <1> 		rep stosb
 19173 0000877E F7D0                <1> 		not eax
 19174 00008780 31DB                <1> 		xor ebx,ebx
 19175 00008782 56                  <1> 		push esi
 19176 00008783 81C648010000        <1> 		add esi,ar_players
 19177 00008789 B904000000          <1> 		mov ecx,4
 19178                              <1> ii2:
 19179 0000878E E85FFEFFFF          <1> 		call vo_setvol
 19180 00008793 81C6EA010000        <1> 		add esi,pl_sizeof
 19181 00008799 E2F3                <1> 		loop ii2
 19182 0000879B 5E                  <1> 		pop esi
 19183 0000879C 81C642010000        <1> 		add esi,ar_volume
 19184 000087A2 66B8FF7F            <1> 		mov ax,32767
 19185 000087A6 E847FEFFFF          <1> 		call vo_setvol
 19186 000087AB C3                  <1> 		ret
 19187                              <1> 
 19188                              <1> 
 19189                              <1> ; setpl - get player offset
 19190                              <1> ;   eax		player no.
 19191                              <1> ;
 19192                              <1> ; return:
 19193                              <1> ;   esi		player offset
 19194                              <1> 
 19195                              <1> setpl:
 19196 000087AC 81C648010000        <1> 		add esi,ar_players
 19197 000087B2 69C0EA010000        <1> 		imul eax,pl_sizeof
 19198 000087B8 01C6                <1> 		add esi,eax
 19199 000087BA C3                  <1> 		ret
 19200                              <1> 
 19201                              <1> 
 19202                              <1> ; loadmod - load a mod into one of the players
 19203                              <1> ;   es:esi	start of area
 19204                              <1> ;   es:edi	start of mod
 19205                              <1> ;   eax		player no.
 19206                              <1> 
 19207                              <1> loadmod:
 19208 000087BB E8ECFFFFFF          <1> 		call setpl
 19209 000087C0 E8EBF5FFFF          <1> 		call pl_loadmod
 19210 000087C5 C3                  <1> 		ret
 19211                              <1> 
 19212                              <1> 
 19213                              <1> ; playmod - play a modfile
 19214                              <1> ;   es:esi	start of area
 19215                              <1> ;   eax		player no.
 19216                              <1> ;   bx		start of song
 19217                              <1> 
 19218                              <1> playmod:
 19219 000087C6 E8E1FFFFFF          <1> 		call setpl
 19220 000087CB 89D8                <1> 		mov eax,ebx
 19221 000087CD E849FEFFFF          <1> 		call pl_playmod
 19222 000087D2 C3                  <1> 		ret
 19223                              <1> 
 19224                              <1> 
 19225                              <1> ; playsamp - play a sample
 19226                              <1> ;   es:esi	start of area
 19227                              <1> ;   eax		player no.
 19228                              <1> ;   bx		channel number
 19229                              <1> ;   cx		sample number
 19230                              <1> ;   dx		pitch
 19231                              <1> 
 19232                              <1> playsamp:
 19233 000087D3 E8D4FFFFFF          <1> 		call setpl
 19234 000087D8 89D8                <1> 		mov eax,ebx
 19235 000087DA 89CB                <1> 		mov ebx,ecx
 19236 000087DC 89D1                <1> 		mov ecx,edx
 19237 000087DE E86AFEFFFF          <1> 		call pl_playsamp
 19238 000087E3 C3                  <1> 		ret
 19239                              <1> 
 19240                              <1> 
 19241                              <1> ; getstate - get state of player
 19242                              <1> ;   es:esi	start of area
 19243                              <1> ;   eax		player no.
 19244                              <1> 
 19245                              <1> getstate:
 19246 000087E4 E8C3FFFFFF          <1> 		call setpl
 19247 000087E9 E8C3FEFFFF          <1> 		call pl_getstate
 19248 000087EE C3                  <1> 		ret
 19249                              <1> 
 19250                              <1> 
 19251                              <1> ; stop - stop a player
 19252                              <1> ;   es:esi	start of area
 19253                              <1> ;   eax		player no.
 19254                              <1> 
 19255                              <1> stop:
 19256 000087EF E8B8FFFFFF          <1> 		call setpl
 19257 000087F4 E8BEFEFFFF          <1> 		call pl_stop
 19258 000087F9 C3                  <1> 		ret
 19259                              <1> 
 19260                              <1> 
 19261                              <1> ; play - generate samples
 19262                              <1> ;   es:esi	start of area
 19263                              <1> 
 19264                              <1> play:
 19265 000087FA 56                  <1> 		push esi
 19266 000087FB 31C0                <1> 		xor eax,eax
 19267 000087FD B942010000          <1> 		mov ecx,ar_volume
 19268                              <1> ap1:
 19269 00008802 268806              <1> 		mov [es:esi],al
 19270 00008805 46                  <1> 		inc esi
 19271 00008806 E2FA                <1> 		loop ap1
 19272 00008808 E8AFFDFFFF          <1> 		call fixvol
 19273 0000880D 5E                  <1> 		pop esi
 19274 0000880E 56                  <1> 		push esi
 19275 0000880F 81C6F0080000        <1> 		add esi,ar_ssamps
 19276 00008815 89F7                <1> 		mov edi,esi
 19277 00008817 B980020000          <1> 		mov ecx,ar_sizeof-ar_ssamps
 19278                              <1> ap2:
 19279 0000881C 268806              <1> 		mov [es:esi],al
 19280 0000881F 46                  <1> 		inc esi
 19281 00008820 E2FA                <1> 		loop ap2
 19282 00008822 5E                  <1> 		pop esi
 19283 00008823 56                  <1> 		push esi
 19284 00008824 B904000000          <1> 		mov ecx,4
 19285 00008829 31DB                <1> 		xor ebx,ebx
 19286 0000882B 81C648010000        <1> 		add esi,ar_players
 19287                              <1> ap4:
 19288 00008831 26668B4606          <1> 		mov ax,[es:esi+pl_state]
 19289 00008836 6609C0              <1> 		or ax,ax
 19290 00008839 7410                <1> 		jz ap3
 19291 0000883B E832F6FFFF          <1> 		call pl_play
 19292 00008840 26668B06            <1> 		mov ax,[es:esi+pl_volume]
 19293 00008844 6609C0              <1> 		or ax,ax
 19294 00008847 7402                <1> 		jz ap3
 19295 00008849 B301                <1> 		mov bl,1
 19296                              <1> ap3:
 19297 0000884B 81C6EA010000        <1> 		add esi,pl_sizeof
 19298 00008851 E2DE                <1> 		loop ap4
 19299 00008853 5E                  <1> 		pop esi
 19300 00008854 260FB78642010000    <1> 		movzx eax,word [es:esi+ar_volume]
 19301 0000885C 6609C0              <1> 		or ax,ax
 19302 0000885F 744A                <1> 		jz ap5
 19303 00008861 26881E              <1> 		mov [es:esi+ar_hassamp],bl
 19304 00008864 B940010000          <1> 		mov ecx,320
 19305 00008869 31DB                <1> 		xor ebx,ebx
 19306                              <1> ap6:
 19307 0000886B 260FBF941EF0080000  <1> 		movsx edx,word [es:esi+ebx+ar_ssamps]
 19308                              <1> 
 19309 00008874 0FAFD0              <1> 		imul edx,eax
 19310                              <1> 
 19311 00008877 C1FA0E              <1> 		sar edx,16-2
 19312                              <1> 
 19313 0000887A 81FAFF7F0000        <1> 		cmp edx,32767
 19314 00008880 7C05                <1> 		jl ap7
 19315 00008882 BAFF7F0000          <1> 		mov edx,32767
 19316                              <1> ap7:
 19317 00008887 81FA0080FFFF        <1> 		cmp edx,-32768
 19318 0000888D 7F05                <1> 		jg ap8
 19319 0000888F BA0080FFFF          <1> 		mov edx,-32768
 19320                              <1> 
 19321                              <1> ap8:
 19322 00008894 80C680              <1> 		add dh,128
 19323 00008897 53                  <1> 		push ebx
 19324 00008898 31DB                <1> 		xor ebx,ebx
 19325 0000889A 88F3                <1> 		mov bl,dh
 19326 0000889C 8A93[AC880000]      <1> 		mov dl,[pctab+ebx]
 19327 000088A2 5B                  <1> 		pop ebx
 19328 000088A3 26885601            <1> 		mov [es:esi+ar_samps],dl
 19329 000088A7 46                  <1> 		inc esi
 19330 000088A8 43                  <1> 		inc ebx
 19331 000088A9 E2C0                <1> 		loop ap6
 19332                              <1> ap5:
 19333 000088AB C3                  <1> 		ret
 19334                              <1> 
 19335                              <1> 
 19336 000088AC 4040404040404040    <1> pctab		db 64,  64,  64,  64,  64,  64,  64,  64
 19337 000088B4 40403F3F3F3F3F3F    <1> 		db 64,  64,  63,  63,  63,  63,  63,  63
 19338 000088BC 3F3F3F3F3F3F3E3E    <1> 		db 63,  63,  63,  63,  63,  63,  62,  62
 19339 000088C4 3E3E3E3E3E3E3E3E    <1> 		db 62,  62,  62,  62,  62,  62,  62,  62
 19340 000088CC 3D3D3D3D3D3D3D3D    <1> 		db 61,  61,  61,  61,  61,  61,  61,  61
 19341 000088D4 3D3C3C3C3C3C3C3C    <1> 		db 61,  60,  60,  60,  60,  60,  60,  60
 19342 000088DC 3C3C3C3B3B3B3B3B    <1> 		db 60,  60,  60,  59,  59,  59,  59,  59
 19343 000088E4 3B3B3B3B3B3A3A3A    <1> 		db 59,  59,  59,  59,  59,  58,  58,  58
 19344 000088EC 3A3A3A3A3A3A3A39    <1> 		db 58,  58,  58,  58,  58,  58,  58,  57
 19345 000088F4 3939393939393939    <1> 		db 57,  57,  57,  57,  57,  57,  57,  57
 19346 000088FC 3938383838383838    <1> 		db 57,  56,  56,  56,  56,  56,  56,  56
 19347 00008904 3837373737373636    <1> 		db 56,  55,  55,  55,  55,  55,  54,  54
 19348 0000890C 3636353535353434    <1> 		db 54,  54,  53,  53,  53,  53,  52,  52
 19349 00008914 3433333232313130    <1> 		db 52,  51,  51,  50,  50,  49,  49,  48
 19350 0000891C 302F2E2D2C2B2A29    <1> 		db 48,  47,  46,  45,  44,  43,  42,  41
 19351 00008924 2827262524232221    <1> 		db 40,  39,  38,  37,  36,  35,  34,  33
 19352 0000892C 201F1E1D1C1B1A19    <1> 		db 32,  31,  30,  29,  28,  27,  26,  25
 19353 00008934 1817161514131211    <1> 		db 24,  23,  22,  21,  20,  19,  18,  17
 19354 0000893C 1110100F0F0E0E0D    <1> 		db 17,  16,  16,  15,  15,  14,  14,  13
 19355 00008944 0D0D0C0C0C0C0B0B    <1> 		db 13,  13,  12,  12,  12,  12,  11,  11
 19356 0000894C 0B0B0A0A0A0A0A09    <1> 		db 11,  11,  10,  10,  10,  10,  10,   9
 19357 00008954 0909090909090909    <1> 		db  9,   9,   9,   9,   9,   9,   9,   9
 19358 0000895C 0808080808080808    <1> 		db  8,   8,   8,   8,   8,   8,   8,   8
 19359 00008964 0808080807070707    <1> 		db  8,   8,   8,   8,   7,   7,   7,   7
 19360 0000896C 0707070606060606    <1> 		db  7,   7,   7,   6,   6,   6,   6,   6
 19361 00008974 0606060606060505    <1> 		db  6,   6,   6,   6,   6,   6,   5,   5
 19362 0000897C 0505050505050505    <1> 		db  5,   5,   5,   5,   5,   5,   5,   5
 19363 00008984 0404040404040404    <1> 		db  4,   4,   4,   4,   4,   4,   4,   4
 19364 0000898C 0404030303030303    <1> 		db  4,   4,   3,   3,   3,   3,   3,   3
 19365 00008994 0303030302020202    <1> 		db  3,   3,   3,   3,   2,   2,   2,   2
 19366 0000899C 0202020202010101    <1> 		db  2,   2,   2,   2,   2,   1,   1,   1
 19367 000089A4 0101010101010101    <1> 		db  1,   1,   1,   1,   1,   1,   1,   1
 19368                              <1> 	
 19369                              <1> 
 19370                              <1> ; setvol - set volume
 19371                              <1> ;   es:esi	start of area
 19372                              <1> ;   eax		player no.
 19373                              <1> ;   bx		goal
 19374                              <1> ;   cx		rate 0=immediate 50=one sec
 19375                              <1> 
 19376                              <1> setvol:
 19377 000089AC E815000000          <1> 		call setplvl
 19378 000089B1 89D8                <1> 		mov eax,ebx
 19379 000089B3 89CB                <1> 		mov ebx,ecx
 19380 000089B5 E838FCFFFF          <1> 		call vo_setvol	
 19381 000089BA C3                  <1> 		ret
 19382                              <1> 
 19383                              <1> 
 19384                              <1> ; getvol - get volume
 19385                              <1> ;   es:esi	start of area
 19386                              <1> ;   eax		player no.
 19387                              <1> ;
 19388                              <1> ; return:
 19389                              <1> ;   ax		volume
 19390                              <1> 
 19391                              <1> getvol:
 19392 000089BB E806000000          <1> 		call setplvl
 19393 000089C0 E851FCFFFF          <1> 		call vo_getvol	
 19394 000089C5 C3                  <1> 		ret
 19395                              <1> 
 19396                              <1> 
 19397                              <1> ; setplvl - get volume offset
 19398                              <1> ;   eax		player no.
 19399                              <1> 
 19400                              <1> setplvl:
 19401 000089C6 09C0                <1> 		or eax,eax
 19402 000089C8 0F89DEFDFFFF        <1> 		jns setpl
 19403 000089CE 81C642010000        <1> 		add esi,ar_volume
 19404 000089D4 C3                  <1> 		ret
 19405                              <1> 
 19406                                  
 19407                                  ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 19408                                  ;
 19409                                  ; code end
 19410                                  
 19411                                  _end:
 19412                                  
